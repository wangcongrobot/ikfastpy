/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-04-28 01:25:41.512987
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.07155)*x6);
x13=((0.3571)*x4);
x14=((1.0)*x8);
x15=((0.07155)*x7);
x16=((1.0)*x9);
x17=((0.1885)*x6);
x18=((1.0)*x7);
x19=((0.27155)*x7);
x20=((1.0)*x0);
x21=((0.07155)*x0);
x22=((0.1885)*x5);
x23=((0.1885)*x7);
x24=((0.27155)*x0);
x25=((0.1885)*x0);
x26=(x1*x3);
x27=(x1*x2);
x28=(x3*x4);
x29=(x2*x4);
x30=((-1.0)*x5);
x31=(x6*x9);
x32=(x6*x7);
x33=(x20*x6);
x34=((1.0)*x29);
x35=(x20*x29);
x36=(x18*x29);
x37=((((-1.0)*x26))+x34);
x38=((((1.0)*x27))+(((1.0)*x28)));
x39=(x37*x6);
x40=((((-1.0)*x18*x26))+x36);
x41=(x20*(((((-1.0)*x27))+(((-1.0)*x28)))));
x42=(x18*(((((-1.0)*x27))+(((-1.0)*x28)))));
x43=(x40*x9);
x44=(x42*x6);
x45=(x41*x5);
x46=((((-1.0)*x18*x5))+((x41*x6)));
x47=(((x0*x5))+x44);
x48=(x47*x8);
x49=((((-1.0)*x14*x39))+(((-1.0)*x16*x38)));
x50=(((x16*(((((-1.0)*x35))+((x20*x26))))))+(((-1.0)*x14*x46)));
eerot[0]=(((x46*x9))+((x8*(((((-1.0)*x35))+((x0*x26)))))));
eerot[1]=(((x10*(((((-1.0)*x32))+((x30*x41))))))+((x11*x50)));
eerot[2]=(((x11*((x32+x45))))+((x10*x50)));
IkReal x51=((1.0)*x29);
IkReal x52=((1.0)*x7);
eetrans[0]=(((x8*(((((-1.0)*x25*x51))+((x25*x26))))))+(((-1.0)*x24*x51))+((x5*((((x21*x28))+((x21*x27))))))+((x0*x13))+((x9*((((x17*x41))+(((-1.0)*x22*x52))))))+(((-1.0)*x12*x52))+((x24*x26)));
eerot[3]=(((x8*(((((-1.0)*x36))+((x26*x7))))))+((x47*x9)));
eerot[4]=(((x11*(((((-1.0)*x14*x47))+(((-1.0)*x16*x40))))))+((x10*((x33+((x30*x42)))))));
eerot[5]=(((x10*(((((-1.0)*x43))+(((-1.0)*x48))))))+((x11*(((((-1.0)*x33))+((x42*x5)))))));
IkReal x53=((1.0)*x29);
eetrans[1]=(((x0*x12))+((x19*x26))+((x5*((((x15*x27))+((x15*x28))))))+(((-1.0)*x19*x53))+((x9*((((x0*x22))+((x17*x42))))))+((x8*((((x23*x26))+(((-1.0)*x23*x53))))))+((x13*x7)));
eerot[6]=((((-1.0)*x38*x8))+((x31*x37)));
eerot[7]=(((x11*x49))+((x10*x5*(((((-1.0)*x34))+x26)))));
eerot[8]=(((x10*x49))+((x11*x37*x5)));
eetrans[2]=((0.08335)+(((0.3571)*x1))+((x31*(((((0.1885)*x29))+(((-0.1885)*x26))))))+((x8*(((((-0.1885)*x27))+(((-0.1885)*x28))))))+((x5*(((((0.07155)*x26))+(((-0.07155)*x29))))))+(((-0.27155)*x28))+(((-0.27155)*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=(px+(((-0.1885)*r00)));
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.1885)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.08335)+pz+(((-0.1885)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x57=((0.3571)*pp);
IkReal x58=((0.19394101)*npz);
IkReal x59=((0.05110101)*npx);
IkReal x60=((2.0)*rxp1_2);
IkReal x61=((0.1431)*r22);
IkReal x62=((0.07155)*r21);
IkReal x63=((1.0)*rxp2_2);
IkReal x64=(x61+(((-1.0)*x60)));
IkReal x65=(x62+(((-1.0)*x63)));
IkReal x66=((-0.0173770591455)+x57);
IkReal x67=(x60+x61);
IkReal x68=((((-1.0)*x63))+(((-1.0)*x62)));
IkReal x69=(x59+x58);
IkReal x70=(x59+x66+(((-1.0)*x58)));
IkReal x71=(x66+(((-1.0)*x69)));
IkReal x72=(x58+x66+(((-1.0)*x59)));
IkReal x73=(x66+x69);
IkReal gconst0=x70;
IkReal gconst1=x71;
IkReal gconst2=x70;
IkReal gconst3=x71;
IkReal gconst4=x64;
IkReal gconst5=x67;
IkReal gconst6=x64;
IkReal gconst7=x67;
IkReal gconst8=x68;
IkReal gconst9=x65;
IkReal gconst10=x73;
IkReal gconst11=x72;
IkReal gconst12=x68;
IkReal gconst13=x65;
IkReal gconst14=x73;
IkReal gconst15=x72;
IkReal x74=npy*npy;
IkReal x75=r20*r20;
IkReal x76=rxp2_2*rxp2_2;
IkReal x77=r21*r21;
IkReal x78=(gconst6*r21);
IkReal x79=(gconst0*gconst2);
IkReal x80=((0.014625109062)*r20);
IkReal x81=(gconst11*npy);
IkReal x82=(gconst12*gconst8);
IkReal x83=(gconst1*npy);
IkReal x84=((0.055505917062)*r21);
IkReal x85=(r20*r21);
IkReal x86=(gconst3*rxp2_2);
IkReal x87=((1.0)*gconst7);
IkReal x88=(gconst14*gconst9);
IkReal x89=(gconst1*gconst2);
IkReal x90=((0.40880808)*rxp0_2);
IkReal x91=(gconst12*gconst5);
IkReal x92=(gconst11*gconst12);
IkReal x93=((1.0)*gconst15);
IkReal x94=(gconst12*gconst9);
IkReal x95=(gconst0*gconst3);
IkReal x96=(gconst13*gconst8);
IkReal x97=(gconst11*gconst14);
IkReal x98=(gconst5*rxp2_2);
IkReal x99=((0.38788202)*npy);
IkReal x100=(gconst1*gconst3);
IkReal x101=((0.0079428967315722)*npx);
IkReal x102=(gconst14*npy);
IkReal x103=(gconst0*npy);
IkReal x104=(gconst10*gconst15);
IkReal x105=((0.1431)*r21);
IkReal x106=(gconst2*npy);
IkReal x107=((1.0)*gconst1);
IkReal x108=(gconst6*gconst9);
IkReal x109=((0.000747357844428353)*x74);
IkReal x110=((1.0)*x76);
IkReal x111=((0.07155)*gconst5*r21);
IkReal x112=(rxp2_2*x106);
IkReal x113=((0.0079428967315722)*x75);
IkReal x114=((0.0104452528920804)*x74);
IkReal x115=((0.0051194025)*x77);
IkReal x116=((1.1448)*r20*rxp0_2);
IkReal x117=((0.111011834124)*npx*r20);
IkReal x118=((0.158569303862722)*npx*npy);
IkReal x119=((0.029250218124)*r21*rxp0_2);
IkReal x120=((0.77576404)*x76);
IkReal x121=((0.02047761)*x75);
IkReal x122=((0.07155)*gconst7*r21);
IkReal x123=((1.0)*gconst10*gconst13);
IkReal x124=((0.07155)*gconst4*r21);
IkReal x125=((0.00567281684568887)*r20*x74);
op[0]=((((-1.0)*x114*x94))+((x96*x97))+((gconst12*x80*x81))+((npy*x80*x88))+(((-1.0)*x121*x97))+(((-1.0)*gconst11*x82*x93))+((x104*x94))+(((-1.0)*x123*x88)));
op[1]=((((-1.0)*x114*x91))+(((-1.0)*gconst10*gconst13*gconst9*x99))+((gconst9*x125))+((gconst6*x80*x81))+(((-1.0)*gconst11*gconst6*gconst8*x93))+((gconst15*x94*x99))+(((-1.0)*x113*x81))+((x102*x113))+(((-1.0)*gconst13*x88*x99))+((gconst15*x82*x99))+(((-1.0)*gconst4*x92*x93))+(((-1.0)*x108*x114))+((npy*x88*x90))+(((-1.0)*gconst12*x125))+(((-1.0)*gconst14*gconst5*x123))+((x118*x94))+((gconst12*x81*x90))+(((-1.0)*x117*x88))+((gconst5*x102*x80))+(((-1.0)*x116*x97))+(((-1.0)*gconst10*x94*x99))+(((-1.0)*x117*x92))+(((-1.0)*gconst10*x87*x88))+((x104*x108))+((gconst7*gconst8*x97))+(((0.38788202)*x81*x96))+((gconst13*gconst4*x97))+(((0.38788202)*x81*x82))+((x104*x91))+(((-1.0)*gconst14*x96*x99)));
op[2]=((((0.07155)*gconst10*gconst14*gconst9*r21))+(((0.40880808)*gconst14*gconst5*npy*rxp0_2))+((gconst10*gconst15*gconst9*rxp2_2))+(((-0.444047336496)*gconst11*npy*r20*rxp0_2))+(((-16.0)*gconst11*gconst14*(rxp0_2*rxp0_2)))+(((0.014625109062)*gconst1*gconst12*npy*r20))+(((-0.38788202)*gconst10*gconst7*gconst9*npy))+((gconst11*gconst14*gconst4*gconst7))+(((0.04095522)*gconst11*gconst14*(r20*r20)))+(((-0.38788202)*gconst14*gconst7*gconst9*npy))+(((0.07155)*gconst11*gconst13*gconst14*r21))+((gconst11*gconst13*gconst14*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst15*gconst8))+(((-0.07155)*gconst11*gconst15*gconst8*r21))+(((-0.38788202)*gconst13*gconst14*gconst5*npy))+(((-0.158569303862722)*gconst12*rxp0_2*(npy*npy)))+(((-0.38788202)*gconst14*gconst7*gconst8*npy))+(((-0.15045246143928)*gconst12*gconst8*(npy*npy)))+(((0.38788202)*gconst11*gconst6*gconst8*npy))+(((0.38788202)*gconst15*gconst6*gconst8*npy))+(((-0.0104452528920804)*gconst5*gconst6*(npy*npy)))+(((-0.171342967223441)*gconst12*gconst9*(npy*npy)))+(((-0.02047761)*gconst11*gconst2*(r20*r20)))+(((0.38788202)*gconst15*gconst6*gconst9*npy))+((gconst11*gconst14*gconst8*rxp2_2))+(((0.014625109062)*gconst2*gconst9*npy*r20))+(((-0.00567281684568887)*gconst6*r20*(npy*npy)))+(((-0.0430594944639221)*gconst9*npx*npy*r20))+((gconst0*gconst12*gconst15*gconst9))+(((-0.07155)*gconst11*gconst14*gconst8*r21))+(((0.158569303862722)*gconst6*gconst9*npx*npy))+((gconst11*gconst13*gconst2*gconst8))+(((0.00567281684568887)*gconst5*r20*(npy*npy)))+(((0.0010464265533861)*gconst11*npy*r20*r21))+((gconst1*gconst13*gconst14*gconst8))+(((0.38788202)*gconst11*gconst13*gconst4*npy))+(((0.014625109062)*gconst14*npy*r20*rxp2_2))+(((-3.10305616)*gconst14*gconst9*npx*rxp0_2))+(((0.38788202)*gconst11*gconst12*gconst4*npy))+(((0.38788202)*gconst11*gconst7*gconst8*npy))+(((-0.38788202)*gconst10*gconst6*gconst9*npy))+(((-0.111011834124)*gconst11*gconst6*npx*r20))+(((-0.07155)*gconst10*gconst12*gconst15*r21))+(((-0.38788202)*gconst13*gconst14*gconst4*npy))+(((0.0430594944639221)*gconst12*npx*npy*r20))+((gconst10*gconst12*gconst3*gconst9))+(((0.07155)*gconst10*gconst13*gconst14*r21))+((gconst10*gconst15*gconst5*gconst6))+(((-0.0104452528920804)*gconst12*rxp2_2*(npy*npy)))+(((-0.111011834124)*gconst14*gconst5*npx*r20))+(((-1.0)*gconst10*gconst14*gconst9*rxp2_2))+(((-0.601809845757122)*gconst12*gconst9*(npx*npx)))+(((0.000747357844428353)*gconst12*r21*(npy*npy)))+(((0.00308090682889362)*(npy*npy)*(r20*r20)))+(((-1.0)*gconst11*gconst12*gconst15*rxp2_2))+(((-0.0104452528920804)*gconst9*rxp2_2*(npy*npy)))+((gconst10*gconst12*gconst15*rxp2_2))+(((-0.07155)*gconst11*gconst12*gconst15*r21))+(((0.444047336496)*gconst14*npy*r20*rxp0_2))+(((0.158569303862722)*gconst9*rxp0_2*(npy*npy)))+(((0.158569303862722)*gconst12*gconst5*npx*npy))+(((-1.0)*gconst10*gconst13*gconst14*rxp2_2))+(((0.014625109062)*gconst11*npy*r20*rxp2_2))+(((-0.0010464265533861)*gconst14*npy*r20*r21))+(((0.38788202)*gconst12*gconst15*gconst5*npy))+(((-0.15045246143928)*gconst13*gconst9*(npy*npy)))+(((-0.38788202)*gconst10*gconst13*gconst5*npy))+(((-1.0)*gconst10*gconst13*gconst2*gconst9))+(((0.07155)*gconst10*gconst15*gconst9*r21))+(((-0.000747357844428353)*gconst9*r21*(npy*npy)))+(((-0.38788202)*gconst10*gconst12*gconst5*npy))+(((-1.0)*gconst10*gconst14*gconst5*gconst7))+(((0.38788202)*gconst12*gconst15*gconst4*npy))+(((-3.10305616)*gconst11*gconst12*npx*rxp0_2))+(((-1.0)*gconst11*gconst12*gconst3*gconst8))+(((0.40880808)*gconst11*gconst6*npy*rxp0_2))+(((-1.0)*gconst11*gconst15*gconst8*rxp2_2))+(((-0.15045246143928)*gconst13*gconst8*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst14*gconst9))+(((-1.0)*gconst11*gconst15*gconst4*gconst6))+(((-0.02047761)*gconst1*gconst14*(r20*r20))));
op[3]=((((0.07155)*gconst11*gconst14*gconst7*r21))+(((0.158569303862722)*gconst5*rxp0_2*(npy*npy)))+(((-0.07155)*gconst11*gconst15*gconst4*r21))+(((-0.171342967223441)*gconst12*gconst5*(npy*npy)))+(((0.0158857934631444)*gconst11*npy*(r20*r20)))+(((-1.0)*gconst0*gconst14*gconst7*gconst9))+(((0.027752958531)*gconst15*gconst9*npy*r21))+(((-1.0)*gconst10*gconst14*gconst5*rxp2_2))+(((0.111011834124)*gconst14*gconst9*npx*r20))+(((0.38788202)*gconst12*gconst3*gconst9*npy))+(((-1.0)*gconst11*gconst15*gconst6*rxp2_2))+(((-0.07155)*gconst11*gconst14*gconst4*r21))+(((0.38788202)*gconst11*gconst4*gconst6*npy))+(((0.40880808)*gconst14*gconst9*npy*rxp0_2))+(((-0.000811780090618077)*r20*r21*(npy*npy)))+(((-0.38788202)*gconst0*gconst13*gconst9*npy))+(((-0.0104452528920804)*gconst6*rxp2_2*(npy*npy)))+(((-1.0)*gconst1*gconst12*gconst15*gconst4))+(((-0.38788202)*gconst10*gconst12*npy*rxp2_2))+(((-0.77576404)*gconst13*gconst14*npy*rxp2_2))+((gconst11*gconst14*gconst7*rxp2_2))+(((0.38788202)*gconst15*gconst9*npy*rxp2_2))+((gconst10*gconst3*gconst6*gconst9))+(((0.38788202)*gconst15*gconst8*npy*rxp2_2))+(((0.40880808)*gconst14*npy*rxp0_2*rxp2_2))+(((0.38788202)*gconst11*gconst12*npy*rxp2_2))+(((0.027752958531)*gconst14*gconst9*npy*r21))+(((0.0079428967315722)*gconst14*npx*r20*r21))+(((-1.0)*gconst11*gconst3*gconst6*gconst8))+(((-0.111011834124)*gconst2*gconst9*npx*r20))+(((-0.000747357844428353)*gconst5*r21*(npy*npy)))+(((0.38788202)*gconst15*gconst5*gconst6*npy))+(((0.027752958531)*gconst10*gconst12*npy*r21))+((gconst10*gconst15*gconst5*rxp2_2))+(((0.40880808)*gconst2*gconst9*npy*rxp0_2))+(((1.20361969151424)*gconst12*npx*npy*rxp0_2))+(((0.38788202)*gconst11*gconst13*npy*rxp2_2))+(((6.20611232)*gconst14*npy*(rxp0_2*rxp0_2)))+((gconst0*gconst12*gconst15*gconst5))+((gconst11*gconst13*gconst2*gconst4))+(((-1.0)*gconst10*gconst2*gconst7*gconst9))+(((-0.0079428967315722)*gconst1*npy*(r20*r20)))+(((-0.0113456336913777)*gconst12*npx*npy*r21))+(((-0.0430594944639221)*gconst5*npx*npy*r20))+(((-1.0)*gconst10*gconst14*gconst7*rxp2_2))+(((-0.171342967223441)*gconst6*gconst9*(npy*npy)))+((gconst1*gconst13*gconst14*gconst4))+(((-0.15045246143928)*gconst6*gconst8*(npy*npy)))+(((-0.029250218124)*gconst14*npy*r21*rxp0_2))+(((0.07155)*gconst10*gconst15*gconst5*r21))+((gconst0*gconst15*gconst6*gconst9))+(((0.07155)*gconst10*gconst14*gconst5*r21))+(((-6.20611232)*gconst11*npy*(rxp0_2*rxp0_2)))+(((-3.10305616)*gconst14*gconst5*npx*rxp0_2))+(((-1.0)*gconst1*gconst15*gconst6*gconst8))+(((0.77576404)*gconst11*gconst8*npy*rxp2_2))+(((-0.111011834124)*gconst11*npx*r20*rxp2_2))+(((-0.0158857934631444)*gconst14*npy*(r20*r20)))+(((-0.38788202)*gconst14*gconst4*gconst7*npy))+(((-1.1448)*gconst1*gconst14*r20*rxp0_2))+(((-0.15045246143928)*gconst12*gconst4*(npy*npy)))+((gconst11*gconst14*gconst4*rxp2_2))+(((-0.15045246143928)*gconst7*gconst9*(npy*npy)))+(((-0.38788202)*gconst0*gconst12*gconst9*npy))+(((0.172237977855688)*r20*rxp0_2*(npy*npy)))+(((0.158569303862722)*gconst12*npx*npy*rxp2_2))+(((-0.38788202)*gconst10*gconst5*gconst7*npy))+(((-0.15045246143928)*gconst7*gconst8*(npy*npy)))+(((-0.38788202)*gconst14*gconst9*npy*rxp2_2))+(((-1.20361969151424)*gconst9*npx*npy*rxp0_2))+(((0.158569303862722)*gconst5*gconst6*npx*npy))+((gconst10*gconst12*gconst3*gconst5))+(((-0.0079428967315722)*gconst11*npx*r20*r21))+(((-0.15045246143928)*gconst13*gconst5*(npy*npy)))+((gconst10*gconst15*gconst6*rxp2_2))+(((-0.111011834124)*gconst14*npx*r20*rxp2_2))+((gconst11*gconst2*gconst7*gconst8))+(((-0.601809845757122)*gconst12*gconst5*(npx*npx)))+(((0.027752958531)*gconst11*gconst13*npy*r21))+(((0.027752958531)*gconst15*gconst8*npy*r21))+(((-0.15045246143928)*gconst13*gconst4*(npy*npy)))+(((0.029250218124)*gconst11*npy*r21*rxp0_2))+(((0.07155)*gconst10*gconst14*gconst7*r21))+(((-0.07155)*gconst11*gconst15*gconst6*r21))+(((-0.07155)*gconst10*gconst15*gconst6*r21))+(((0.38788202)*gconst12*gconst3*gconst8*npy))+(((0.000747357844428353)*gconst6*r21*(npy*npy)))+(((0.38788202)*gconst1*gconst13*gconst8*npy))+(((-0.38788202)*gconst10*gconst13*npy*rxp2_2))+(((-1.1448)*gconst11*gconst2*r20*rxp0_2))+(((-0.0104452528920804)*gconst5*rxp2_2*(npy*npy)))+(((0.0430594944639221)*gconst6*npx*npy*r20))+(((0.0113456336913777)*gconst9*npx*npy*r21))+(((-0.38788202)*gconst14*gconst5*gconst7*npy))+(((0.158569303862722)*gconst12*gconst9*npx*npy))+(((0.014625109062)*gconst1*gconst6*npy*r20))+(((0.0079428967315722)*gconst2*npy*(r20*r20)))+(((-0.111011834124)*gconst1*gconst12*npx*r20))+(((-0.158569303862722)*gconst6*rxp0_2*(npy*npy)))+(((-0.77576404)*gconst10*gconst9*npy*rxp2_2))+(((-1.0)*gconst11*gconst15*gconst4*rxp2_2))+(((-1.0)*gconst10*gconst13*gconst2*gconst5))+(((0.014625109062)*gconst2*gconst5*npy*r20))+(((0.027752958531)*gconst11*gconst12*npy*r21))+(((0.40880808)*gconst11*gconst12*npy*rxp0_2))+(((0.40880808)*gconst1*gconst12*npy*rxp0_2))+(((0.38788202)*gconst1*gconst12*gconst8*npy))+(((0.158569303862722)*gconst9*npx*npy*rxp2_2))+(((-0.38788202)*gconst14*gconst8*npy*rxp2_2))+(((0.027752958531)*gconst10*gconst13*npy*r21))+(((0.111011834124)*gconst11*gconst12*npx*r20))+(((-1.0)*gconst11*gconst12*gconst3*gconst4))+(((0.77576404)*gconst12*gconst15*npy*rxp2_2))+(((0.38788202)*gconst11*gconst4*gconst7*npy))+(((-3.10305616)*gconst11*gconst6*npx*rxp0_2))+(((0.027752958531)*gconst14*gconst8*npy*r21))+(((-1.0)*gconst0*gconst13*gconst14*gconst5))+(((-0.38788202)*gconst13*gconst2*gconst8*npy))+(((0.38788202)*gconst15*gconst4*gconst6*npy))+((gconst1*gconst14*gconst7*gconst8))+(((-0.38788202)*gconst10*gconst5*gconst6*npy))+(((-0.601809845757122)*gconst6*gconst9*(npx*npx)))+(((-0.38788202)*gconst13*gconst2*gconst9*npy))+(((1.1448)*gconst11*gconst14*r20*rxp0_2))+(((0.40880808)*gconst11*npy*rxp0_2*rxp2_2)));
op[4]=((((0.158569303862722)*gconst6*npx*npy*rxp2_2))+(((0.04095522)*gconst1*gconst14*(r20*r20)))+(((-3.10305616)*gconst14*npx*rxp0_2*rxp2_2))+(((0.40880808)*gconst14*gconst5*npy*rxp0_2))+(((-0.1431)*gconst11*gconst15*r21*rxp2_2))+((gconst0*gconst15*gconst9*rxp2_2))+(((-0.38788202)*gconst0*gconst12*gconst5*npy))+(((-0.0113456336913777)*gconst6*npx*npy*r21))+((gconst1*gconst14*gconst8*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst9*rxp2_2))+(((-0.601809845757122)*gconst5*gconst6*(npx*npx)))+(((-1.0)*gconst10*gconst2*gconst9*rxp2_2))+(((-0.15045246143928)*gconst5*gconst7*(npy*npy)))+(((5.34734537688486e-5)*(npy*npy)*(r21*r21)))+(((-1.0)*gconst10*gconst2*gconst5*gconst7))+(((-3.10305616)*gconst11*npx*rxp0_2*rxp2_2))+(((0.38788202)*gconst15*gconst5*npy*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst8))+(((0.38788202)*gconst1*gconst13*gconst4*npy))+(((-0.158569303862722)*gconst12*rxp0_2*(npy*npy)))+(((-0.0051194025)*gconst11*gconst14*(r21*r21)))+(((0.027752958531)*gconst11*gconst7*npy*r21))+(((0.111011834124)*gconst14*gconst5*npx*r20))+(((0.07155)*gconst0*gconst13*gconst14*r21))+((gconst11*gconst14*(rxp2_2*rxp2_2)))+(((-3.10305616)*gconst2*gconst9*npx*rxp0_2))+(((0.07155)*gconst10*gconst3*gconst9*r21))+((gconst1*gconst14*gconst4*gconst7))+(((-0.0104452528920804)*gconst12*gconst9*(npy*npy)))+(((-1.0)*gconst11*gconst12*gconst3*rxp2_2))+(((0.07155)*gconst11*gconst13*gconst2*r21))+(((-1.0)*gconst10*gconst13*gconst2*rxp2_2))+(((1.20361969151424)*gconst6*npx*npy*rxp0_2))+(((0.00149471568885671)*gconst12*r21*(npy*npy)))+(((-0.171342967223441)*gconst5*gconst6*(npy*npy)))+(((0.38788202)*gconst1*gconst7*gconst8*npy))+((gconst1*gconst13*gconst2*gconst8))+(((-0.601809845757122)*gconst9*rxp2_2*(npx*npx)))+(((0.027752958531)*gconst14*gconst4*npy*r21))+(((0.07155)*gconst0*gconst14*gconst9*r21))+(((-0.0051194025)*gconst10*gconst15*(r21*r21)))+(((-0.07155)*gconst11*gconst3*gconst8*r21))+(((0.027752958531)*gconst14*gconst5*npy*r21))+((gconst11*gconst2*gconst4*gconst7))+(((0.38788202)*gconst1*gconst12*gconst4*npy))+(((-0.444047336496)*gconst14*npy*r20*rxp0_2))+(((0.38788202)*gconst1*gconst6*gconst8*npy))+(((-0.38788202)*gconst0*gconst7*gconst9*npy))+(((0.158569303862722)*gconst6*gconst9*npx*npy))+(((0.0010464265533861)*gconst1*npy*r20*r21))+(((-0.300904922878561)*gconst8*rxp2_2*(npy*npy)))+(((-0.07155)*gconst0*gconst12*gconst15*r21))+((gconst10*gconst15*(rxp2_2*rxp2_2)))+(((-0.07155)*gconst1*gconst15*gconst8*r21))+((gconst10*gconst12*gconst3*rxp2_2))+(((-16.0)*gconst1*gconst14*(rxp0_2*rxp0_2)))+(((-0.38788202)*gconst0*gconst6*gconst9*npy))+(((-0.07155)*gconst1*gconst14*gconst8*r21))+(((-1.0)*gconst1*gconst15*gconst4*gconst6))+(((0.0430594944639221)*gconst12*r21*(npx*npx)))+(((0.04095522)*gconst11*gconst2*(r20*r20)))+(((-0.07155)*gconst1*gconst12*gconst15*r21))+(((0.38788202)*gconst12*gconst3*gconst5*npy))+((gconst10*gconst3*gconst5*gconst6))+(((-0.38788202)*gconst2*gconst7*gconst9*npy))+(((-0.77576404)*gconst14*gconst7*npy*rxp2_2))+(((-0.321795428662722)*gconst12*rxp2_2*(npy*npy)))+(((0.38788202)*gconst3*gconst6*gconst9*npy))+((gconst0*gconst12*gconst15*rxp2_2))+(((0.40880808)*gconst2*gconst5*npy*rxp0_2))+(((-0.444047336496)*gconst1*npy*r20*rxp0_2))+(((-0.38788202)*gconst2*gconst7*gconst8*npy))+(((-0.0430594944639221)*gconst9*r21*(npx*npx)))+(((-0.014625109062)*gconst11*gconst12*npy*r20))+(((-1.0)*gconst11*gconst3*gconst8*rxp2_2))+(((-0.0051194025)*gconst11*gconst15*(r21*r21)))+(((-0.0430594944639221)*gconst12*npx*npy*r20))+(((-0.014625109062)*gconst14*gconst9*npy*r20))+(((-0.00616181365778725)*(npy*npy)*(r20*r20)))+(((0.444047336496)*gconst2*npy*r20*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst15*rxp2_2))+(((0.00616181365778725)*npx*npy*r20*r21))+(((0.111011834124)*gconst11*gconst6*npx*r20))+(((0.38788202)*gconst15*gconst4*npy*rxp2_2))+(((-0.02047761)*gconst11*gconst14*(r20*r20)))+(((-0.300904922878561)*gconst13*rxp2_2*(npy*npy)))+(((-1.0)*gconst11*gconst15*(rxp2_2*rxp2_2)))+(((-0.0010464265533861)*gconst2*npy*r20*r21))+((gconst11*gconst2*gconst8*rxp2_2))+(((-0.222023668248)*gconst11*npx*r21*rxp0_2))+(((2.40723938302849)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst11*gconst3*gconst4*gconst6))+(((0.40880808)*gconst1*gconst6*npy*rxp0_2))+(((-0.0226912673827555)*r21*rxp0_2*(npy*npy)))+(((0.014625109062)*gconst2*npy*r20*rxp2_2))+(((-3.10305616)*gconst1*gconst12*npx*rxp0_2))+(((0.07155)*gconst10*gconst13*gconst2*r21))+(((-0.0051194025)*gconst10*gconst14*(r21*r21)))+(((0.444047336496)*gconst11*npy*r20*rxp0_2))+(((-0.38788202)*gconst10*gconst7*npy*rxp2_2))+(((0.158569303862722)*gconst9*rxp0_2*(npy*npy)))+(((-0.07155)*gconst11*gconst2*gconst8*r21))+(((-16.0)*gconst11*gconst2*(rxp0_2*rxp0_2)))+(((0.158569303862722)*gconst12*gconst5*npx*npy))+(((-0.38788202)*gconst14*gconst5*npy*rxp2_2))+(((0.38788202)*gconst11*gconst7*npy*rxp2_2))+(((-0.38788202)*gconst0*gconst13*gconst5*npy))+(((-0.111011834124)*gconst2*gconst5*npx*r20))+(((0.158569303862722)*gconst5*npx*npy*rxp2_2))+(((0.38788202)*gconst12*gconst3*gconst4*npy))+(((-0.38788202)*gconst10*gconst6*npy*rxp2_2))+(((0.38788202)*gconst11*gconst6*npy*rxp2_2))+((gconst1*gconst13*gconst14*rxp2_2))+(((-0.38788202)*gconst13*gconst2*gconst5*npy))+(((0.1431)*gconst10*gconst14*r21*rxp2_2))+((gconst0*gconst12*gconst3*gconst9))+(((-1.0)*gconst0*gconst13*gconst2*gconst9))+(((-1.20361969151424)*gconst5*npx*npy*rxp0_2))+(((-1.0)*gconst0*gconst13*gconst14*rxp2_2))+(((0.027752958531)*gconst10*gconst7*npy*r21))+(((0.07155)*gconst0*gconst15*gconst9*r21))+(((0.027752958531)*gconst10*gconst6*npy*r21))+(((-0.601809845757122)*gconst12*rxp2_2*(npx*npx)))+(((0.07155)*gconst10*gconst2*gconst9*r21))+(((-0.0104452528920804)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-0.321795428662722)*gconst9*rxp2_2*(npy*npy)))+(((0.0113456336913777)*gconst5*npx*npy*r21))+(((-0.15045246143928)*gconst4*gconst7*(npy*npy)))+(((0.40880808)*gconst11*gconst6*npy*rxp0_2))+(((0.07155)*gconst1*gconst13*gconst14*r21))+(((-1.0)*gconst1*gconst15*gconst8*rxp2_2))+(((-0.38788202)*gconst13*gconst2*gconst4*npy))+(((0.222023668248)*gconst14*npx*r21*rxp0_2))+(((0.77576404)*gconst15*gconst6*npy*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst5*gconst7))+(((-0.111011834124)*gconst1*gconst6*npx*r20))+(((-0.02047761)*gconst1*gconst2*(r20*r20)))+(((0.38788202)*gconst3*gconst6*gconst8*npy))+(((0.027752958531)*gconst15*gconst5*npy*r21))+((gconst11*gconst13*gconst2*rxp2_2))+(((-0.15045246143928)*gconst4*gconst6*(npy*npy)))+(((-0.07155)*gconst11*gconst12*gconst3*r21))+((gconst0*gconst15*gconst5*gconst6))+(((-1.0)*gconst10*gconst14*(rxp2_2*rxp2_2)))+(((0.027752958531)*gconst15*gconst4*npy*r21))+(((0.014625109062)*gconst1*npy*r20*rxp2_2))+(((-0.77576404)*gconst10*gconst5*npy*rxp2_2))+(((-0.07155)*gconst10*gconst12*gconst3*r21))+(((0.77576404)*gconst11*gconst4*npy*rxp2_2))+(((0.027752958531)*gconst11*gconst6*npy*r21))+(((-0.38788202)*gconst14*gconst4*npy*rxp2_2))+(((0.0430594944639221)*gconst9*npx*npy*r20))+((gconst10*gconst3*gconst9*rxp2_2))+(((-0.00149471568885671)*gconst9*r21*(npy*npy))));
op[5]=((((0.0430594944639221)*gconst5*npx*npy*r20))+(((-0.00567281684568887)*gconst9*r20*(npy*npy)))+(((0.77576404)*gconst1*gconst8*npy*rxp2_2))+(((0.158569303862722)*gconst5*rxp0_2*(npy*npy)))+((gconst11*gconst2*gconst7*rxp2_2))+(((-0.38788202)*gconst2*gconst4*gconst7*npy))+(((0.07155)*gconst0*gconst14*gconst7*r21))+(((-1.0)*gconst1*gconst3*gconst6*gconst8))+(((-0.0430594944639221)*gconst5*r21*(npx*npx)))+(((0.029250218124)*gconst1*npy*r21*rxp0_2))+(((-0.07155)*gconst11*gconst3*gconst4*r21))+(((1.1448)*gconst11*gconst2*r20*rxp0_2))+(((-1.0)*gconst1*gconst15*gconst4*rxp2_2))+(((6.20611232)*gconst2*npy*(rxp0_2*rxp0_2)))+(((0.111011834124)*gconst14*npx*r20*rxp2_2))+(((-1.0)*gconst1*gconst12*gconst3*gconst4))+(((0.40880808)*gconst14*npy*rxp0_2*rxp2_2))+(((-0.77576404)*gconst14*npy*(rxp2_2*rxp2_2)))+(((-0.07155)*gconst11*gconst2*gconst4*r21))+(((-0.77576404)*gconst0*gconst9*npy*rxp2_2))+(((0.027752958531)*gconst1*gconst13*npy*r21))+(((-0.321795428662722)*gconst6*rxp2_2*(npy*npy)))+(((0.00567281684568887)*gconst12*r20*(npy*npy)))+(((-1.0)*gconst11*gconst3*gconst6*rxp2_2))+(((-0.014625109062)*gconst11*gconst6*npy*r20))+(((1.1448)*gconst1*gconst14*r20*rxp0_2))+(((0.38788202)*gconst1*gconst12*npy*rxp2_2))+(((-3.10305616)*gconst2*gconst5*npx*rxp0_2))+((gconst1*gconst13*gconst2*gconst4))+(((0.027752958531)*gconst3*gconst9*npy*r21))+(((-0.0079428967315722)*gconst14*npx*r20*r21))+(((-0.38788202)*gconst2*gconst8*npy*rxp2_2))+((gconst1*gconst14*gconst4*rxp2_2))+((gconst10*gconst3*gconst6*rxp2_2))+(((0.40880808)*gconst2*gconst9*npy*rxp0_2))+(((0.0079428967315722)*gconst2*npx*r20*r21))+(((-1.0)*gconst11*gconst3*gconst4*rxp2_2))+(((-0.014625109062)*gconst14*gconst5*npy*r20))+(((-0.111011834124)*gconst1*npx*r20*rxp2_2))+(((0.055505917062)*gconst10*npy*r21*rxp2_2))+((gconst0*gconst3*gconst6*gconst9))+(((-0.0113456336913777)*gconst12*npx*npy*r21))+(((-0.38788202)*gconst0*gconst13*npy*rxp2_2))+(((-0.0079428967315722)*gconst11*npy*(r20*r20)))+(((0.0430594944639221)*gconst6*r21*(npx*npx)))+(((0.027752958531)*gconst2*gconst8*npy*r21))+((gconst1*gconst14*gconst7*rxp2_2))+(((-0.029250218124)*gconst14*npy*r21*rxp0_2))+(((-0.0158857934631444)*gconst2*npy*(r20*r20)))+(((-0.172237977855688)*r20*rxp0_2*(npy*npy)))+(((0.158569303862722)*npx*npy*(rxp2_2*rxp2_2)))+(((0.111011834124)*gconst2*gconst9*npx*r20))+(((-0.38788202)*gconst0*gconst12*npy*rxp2_2))+(((0.77576404)*gconst15*npy*(rxp2_2*rxp2_2)))+(((-1.0)*gconst10*gconst2*gconst7*rxp2_2))+(((0.40880808)*gconst1*npy*rxp0_2*rxp2_2))+(((0.027752958531)*gconst0*gconst12*npy*r21))+(((0.07155)*gconst1*gconst14*gconst7*r21))+(((0.77576404)*gconst12*gconst3*npy*rxp2_2))+(((0.027752958531)*gconst2*gconst9*npy*r21))+(((0.38788202)*gconst3*gconst4*gconst6*npy))+(((0.055505917062)*gconst15*npy*r21*rxp2_2))+(((-0.300904922878561)*gconst4*rxp2_2*(npy*npy)))+(((0.07155)*gconst0*gconst14*gconst5*r21))+(((0.07155)*gconst10*gconst2*gconst7*r21))+(((0.055505917062)*gconst14*npy*r21*rxp2_2))+(((0.07155)*gconst10*gconst2*gconst5*r21))+((gconst1*gconst2*gconst7*gconst8))+(((-1.0)*gconst1*gconst15*gconst6*rxp2_2))+(((-1.0)*gconst10*gconst2*gconst5*rxp2_2))+(((-0.77576404)*gconst10*npy*(rxp2_2*rxp2_2)))+(((0.07155)*gconst10*gconst3*gconst5*r21))+(((-0.00149471568885671)*gconst5*r21*(npy*npy)))+(((-0.07155)*gconst0*gconst15*gconst6*r21))+(((0.0079428967315722)*gconst11*npx*r20*r21))+(((-0.0079428967315722)*gconst1*npx*r20*r21))+(((-0.000811780090618077)*npx*npy*(r21*r21)))+(((0.027752958531)*gconst0*gconst13*npy*r21))+(((0.158569303862722)*gconst12*npx*npy*rxp2_2))+(((0.158569303862722)*gconst5*gconst6*npx*npy))+(((-0.38788202)*gconst2*gconst9*npy*rxp2_2))+(((0.07155)*gconst0*gconst15*gconst5*r21))+(((0.38788202)*gconst1*gconst4*gconst6*npy))+(((-0.38788202)*gconst0*gconst5*gconst6*npy))+(((-0.38788202)*gconst2*gconst5*gconst7*npy))+(((0.77576404)*gconst11*npy*(rxp2_2*rxp2_2)))+((gconst11*gconst2*gconst4*rxp2_2))+(((0.029250218124)*gconst11*npy*r21*rxp0_2))+(((0.172237977855688)*npx*npy*r21*rxp0_2))+(((0.111011834124)*gconst1*gconst12*npx*r20))+(((-0.029250218124)*gconst2*npy*r21*rxp0_2))+(((-0.77576404)*gconst13*gconst2*npy*rxp2_2))+(((-0.07155)*gconst10*gconst3*gconst6*r21))+(((-0.07155)*gconst1*gconst14*gconst4*r21))+(((0.111011834124)*gconst11*npx*r20*rxp2_2))+(((0.38788202)*gconst3*gconst9*npy*rxp2_2))+(((-1.0)*gconst0*gconst14*gconst7*rxp2_2))+(((-0.38788202)*gconst0*gconst5*gconst7*npy))+(((0.38788202)*gconst1*gconst13*npy*rxp2_2))+(((0.0113456336913777)*gconst9*npx*npy*r21))+(((0.0079428967315722)*gconst14*npy*(r20*r20)))+(((-6.20611232)*gconst1*npy*(rxp0_2*rxp0_2)))+(((-1.1448)*gconst1*gconst2*r20*rxp0_2))+(((0.38788202)*gconst1*gconst4*gconst7*npy))+(((-0.321795428662722)*gconst5*rxp2_2*(npy*npy)))+(((-0.07155)*gconst11*gconst3*gconst6*r21))+(((0.027752958531)*gconst3*gconst8*npy*r21))+(((-0.158569303862722)*gconst6*rxp0_2*(npy*npy)))+(((0.38788202)*gconst3*gconst8*npy*rxp2_2))+((gconst0*gconst12*gconst3*gconst5))+(((-0.0104452528920804)*gconst12*gconst5*(npy*npy)))+(((-1.0)*gconst0*gconst13*gconst2*gconst5))+(((-0.07155)*gconst1*gconst15*gconst4*r21))+(((0.40880808)*gconst1*gconst12*npy*rxp0_2))+(((0.158569303862722)*gconst9*npx*npy*rxp2_2))+(((0.0158857934631444)*gconst1*npy*(r20*r20)))+((gconst0*gconst15*gconst6*rxp2_2))+(((-3.10305616)*gconst1*gconst6*npx*rxp0_2))+(((-0.111011834124)*gconst2*npx*r20*rxp2_2))+(((0.027752958531)*gconst1*gconst12*npy*r21))+(((-1.0)*gconst0*gconst14*gconst5*rxp2_2))+(((-0.0104452528920804)*gconst6*gconst9*(npy*npy)))+(((-1.0)*gconst0*gconst2*gconst7*gconst9))+(((-0.601809845757122)*gconst6*rxp2_2*(npx*npx)))+(((0.055505917062)*gconst11*npy*r21*rxp2_2))+(((-0.300904922878561)*gconst7*rxp2_2*(npy*npy)))+(((0.07155)*gconst11*gconst2*gconst7*r21))+(((0.40880808)*gconst2*npy*rxp0_2*rxp2_2))+(((-0.601809845757122)*gconst5*rxp2_2*(npx*npx)))+((gconst0*gconst15*gconst5*rxp2_2))+(((-0.0430594944639221)*gconst6*npx*npy*r20))+(((-0.07155)*gconst1*gconst15*gconst6*r21))+(((0.38788202)*gconst3*gconst5*gconst6*npy))+((gconst10*gconst3*gconst5*rxp2_2))+(((0.40880808)*gconst11*npy*rxp0_2*rxp2_2))+(((0.00149471568885671)*gconst6*r21*(npy*npy))));
op[6]=((((0.158569303862722)*gconst6*npx*npy*rxp2_2))+(((-0.0051194025)*gconst0*gconst15*(r21*r21)))+((gconst0*gconst12*gconst3*rxp2_2))+(((-0.00567281684568887)*gconst5*r20*(npy*npy)))+((gconst1*gconst2*gconst4*gconst7))+(((-0.1431)*gconst1*gconst15*r21*rxp2_2))+(((-0.0113456336913777)*gconst6*npx*npy*r21))+(((0.00567281684568887)*gconst6*r20*(npy*npy)))+(((0.027752958531)*gconst0*gconst7*npy*r21))+(((-0.77576404)*gconst2*gconst7*npy*rxp2_2))+(((-1.0)*gconst10*gconst2*(rxp2_2*rxp2_2)))+(((-0.1431)*gconst11*gconst3*r21*rxp2_2))+(((0.444047336496)*gconst1*npy*r20*rxp0_2))+((gconst1*gconst2*gconst8*rxp2_2))+(((0.027752958531)*gconst2*gconst4*npy*r21))+(((-0.0010464265533861)*gconst11*npy*r20*r21))+(((-0.0051194025)*gconst10*gconst2*(r21*r21)))+(((-0.0104452528920804)*gconst5*gconst6*(npy*npy)))+(((-0.014625109062)*gconst1*gconst12*npy*r20))+(((0.77576404)*gconst3*gconst6*npy*rxp2_2))+((gconst0*gconst3*gconst5*gconst6))+(((-1.0)*gconst0*gconst14*(rxp2_2*rxp2_2)))+(((0.04095522)*gconst1*gconst2*(r20*r20)))+(((0.027752958531)*gconst1*gconst6*npy*r21))+(((-0.02047761)*gconst11*gconst2*(r20*r20)))+(((-0.07155)*gconst1*gconst12*gconst3*r21))+((gconst1*gconst14*(rxp2_2*rxp2_2)))+(((0.00308090682889362)*(npx*npx)*(r21*r21)))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((0.07155)*gconst0*gconst13*gconst2*r21))+(((-0.014625109062)*gconst14*npy*r20*rxp2_2))+(((-0.0051194025)*gconst1*gconst14*(r21*r21)))+((gconst0*gconst3*gconst9*rxp2_2))+(((-0.0051194025)*gconst11*gconst3*(r21*r21)))+(((-0.00616181365778725)*npx*npy*r20*r21))+(((-0.38788202)*gconst0*gconst6*npy*rxp2_2))+(((-0.0051194025)*gconst10*gconst3*(r21*r21)))+(((0.027752958531)*gconst3*gconst5*npy*r21))+(((0.027752958531)*gconst0*gconst6*npy*r21))+(((-1.0)*gconst11*gconst3*(rxp2_2*rxp2_2)))+((gconst1*gconst13*gconst2*rxp2_2))+(((-1.0)*gconst0*gconst13*gconst2*rxp2_2))+(((0.027752958531)*gconst1*gconst7*npy*r21))+(((-0.38788202)*gconst2*gconst4*npy*rxp2_2))+(((0.38788202)*gconst3*gconst4*npy*rxp2_2))+(((0.07155)*gconst0*gconst2*gconst9*r21))+(((-3.10305616)*gconst1*npx*rxp0_2*rxp2_2))+((gconst10*gconst3*(rxp2_2*rxp2_2)))+(((0.40880808)*gconst2*gconst5*npy*rxp0_2))+(((0.07155)*gconst0*gconst3*gconst9*r21))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-0.0104452528920804)*gconst12*rxp2_2*(npy*npy)))+(((-3.10305616)*gconst2*npx*rxp0_2*rxp2_2))+(((0.38788202)*gconst1*gconst7*npy*rxp2_2))+(((0.0010464265533861)*gconst14*npy*r20*r21))+(((0.000747357844428353)*gconst12*r21*(npy*npy)))+(((0.00308090682889362)*(npy*npy)*(r20*r20)))+(((0.027752958531)*gconst3*gconst4*npy*r21))+(((0.40880808)*gconst1*gconst6*npy*rxp0_2))+(((-0.0226912673827555)*r21*rxp0_2*(npy*npy)))+(((-0.38788202)*gconst2*gconst5*npy*rxp2_2))+(((-0.0104452528920804)*gconst9*rxp2_2*(npy*npy)))+(((-0.07155)*gconst1*gconst3*gconst8*r21))+(((-1.0)*gconst0*gconst2*gconst5*gconst7))+(((-0.622700351541282)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+((gconst0*gconst15*(rxp2_2*rxp2_2)))+(((0.158569303862722)*gconst5*npx*npy*rxp2_2))+(((0.222023668248)*gconst2*npx*r21*rxp0_2))+(((-0.07155)*gconst0*gconst12*gconst3*r21))+(((-0.07155)*gconst1*gconst2*gconst8*r21))+(((0.111011834124)*gconst1*gconst6*npx*r20))+(((-16.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((0.07155)*gconst1*gconst13*gconst2*r21))+(((-0.38788202)*gconst0*gconst7*npy*rxp2_2))+(((0.000106946907537697)*(npy*npy)*(r21*r21)))+(((0.1431)*gconst0*gconst14*r21*rxp2_2))+(((-0.601809845757122)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-0.000747357844428353)*gconst9*r21*(npy*npy)))+(((0.38788202)*gconst3*gconst5*npy*rxp2_2))+(((-0.0051194025)*gconst1*gconst15*(r21*r21)))+(((0.38788202)*gconst1*gconst6*npy*rxp2_2))+(((-0.0051194025)*gconst0*gconst14*(r21*r21)))+(((0.0113456336913777)*gconst5*npx*npy*r21))+((gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-0.0051194025)*gconst11*gconst2*(r21*r21)))+(((0.111011834124)*gconst2*gconst5*npx*r20))+(((-0.77576404)*gconst0*gconst5*npy*rxp2_2))+(((0.77576404)*gconst1*gconst4*npy*rxp2_2))+(((-0.222023668248)*gconst1*npx*r21*rxp0_2))+(((-1.0)*gconst1*gconst12*gconst3*rxp2_2))+(((-1.0)*gconst1*gconst15*(rxp2_2*rxp2_2)))+(((0.1431)*gconst10*gconst2*r21*rxp2_2))+(((-0.014625109062)*gconst2*gconst9*npy*r20))+(((-0.444047336496)*gconst2*npy*r20*rxp0_2))+(((-0.014625109062)*gconst11*npy*r20*rxp2_2))+(((0.027752958531)*gconst2*gconst5*npy*r21))+(((-0.02047761)*gconst1*gconst14*(r20*r20))));
op[7]=((((-1.0)*x114*x98))+(((-1.0)*x100*x124))+((gconst0*gconst5*x86))+((gconst1*x101*x85))+((x111*x79))+(((-1.0)*rxp2_2*x79*x87))+((rxp2_2*x83*x84))+((x106*x113))+(((-0.000811780090618077)*npx*npy*x77))+(((-1.0)*gconst4*x107*x86))+(((-1.0)*x106*x120))+((rxp2_2*x83*x90))+((x122*x79))+((gconst7*rxp2_2*x89))+((gconst3*npy*x120))+(((-1.0)*x113*x83))+(((-1.0)*gconst6*x107*x86))+((gconst2*rxp2_2*x117))+(((-0.07155)*x100*x78))+((gconst0*gconst6*x86))+(((-1.0)*x106*x119))+(((-1.0)*x79*x98))+((x118*x76))+(((-1.0)*gconst5*r21*x109))+((rxp2_2*x103*x84))+((x112*x84))+(((-1.0)*gconst6*rxp2_2*x114))+(((-1.0)*gconst6*x80*x83))+((x112*x90))+((x111*x95))+((x119*x83))+(((-0.07155)*x78*x95))+((x122*x89))+((x116*x89))+((x109*x78))+(((-1.0)*gconst2*x101*x85))+((gconst1*rxp2_2*x117))+(((-1.0)*x103*x120))+(((0.000811780090618077)*x74*x85))+(((-1.0)*x124*x89))+((x120*x83))+((npy*x84*x86))+((gconst4*rxp2_2*x89))+(((-1.0)*gconst5*x106*x80)));
op[8]=(((rxp2_2*x105*x79))+(((-1.0)*x115*x89))+(((-1.0)*x115*x95))+(((-1.0)*x100*x115))+(((-1.0)*x100*x110))+(((-1.0)*x112*x80))+(((-0.0010464265533861)*x83*x85))+((x76*x89))+(((-1.0)*gconst1*x105*x86))+((x76*x95))+(((-1.0)*rxp2_2*x80*x83))+(((-1.0)*x115*x79))+(((0.0010464265533861)*x106*x85))+(((-1.0)*x121*x89))+(((-1.0)*x114*x76))+(((-1.0)*x110*x79))+(((5.34734537688486e-5)*x74*x77)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x126=cj4*cj4;
IkReal x127=((0.05110101)*sj4);
IkReal x128=(npx*rxp0_2);
IkReal x129=(npy*rxp1_2);
IkReal x130=((13.9762403913347)*sj4);
IkReal x131=(npx*rxp1_2);
IkReal x132=(cj4*pz);
IkReal x133=((0.19394101)*npy*rxp0_2);
IkReal x134=((53.04329948661)*npy*rxp0_2);
IkReal x135=(cj4*npz*r22);
IkReal x136=(cj4*npx*r21*sj4);
IkReal x137=(cj4*npy*r20*sj4);
j5eval[0]=((((-3.79524807826695)*x136))+(((-53.04329948661)*x126*x131))+x132+(((-1.0)*x128*x130))+(((-1.0)*x134))+((x126*x134))+(((-1.0)*x135))+(((-1.0)*x129*x130))+(((53.04329948661)*x131))+(((3.79524807826695)*x137)));
j5eval[1]=IKsign(((((-0.0138764792655)*x136))+(((-0.0036562772655)*x135))+(((-0.19394101)*x126*x131))+(((0.19394101)*x131))+(((0.0138764792655)*x137))+(((-1.0)*x133))+(((0.0036562772655)*x132))+((x126*x133))+(((-1.0)*x127*x129))+(((-1.0)*x127*x128))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x138=cj4*cj4;
IkReal x139=(cj4*r21);
IkReal x140=((0.025550505)*pp);
IkReal x141=(npx*sj4);
IkReal x142=(cj4*rxp2_2);
IkReal x143=((0.05110101)*npy);
IkReal x144=((0.0138764792655)*r22);
IkReal x145=(cj4*npz);
IkReal x146=(rxp1_2*sj4);
IkReal x147=(rxp0_2*sj4);
IkReal x148=((0.3571)*pp);
IkReal x149=((0.0036562772655)*r22);
IkReal x150=(npy*sj4);
IkReal x151=(cj4*r20);
IkReal x152=((0.19394101)*x138);
IkReal x153=((0.0138764792655)*npz*x138);
CheckValue<IkReal> x154=IKPowWithIntegerCheck(IKsign((((npy*rxp0_2*(((-0.19394101)+x152))))+(((-1.0)*x143*x146))+(((-0.0138764792655)*x139*x141))+(((-0.05110101)*rxp0_2*x141))+(((0.0036562772655)*cj4*pz))+(((-1.0)*x145*x149))+(((0.0138764792655)*x150*x151))+((npx*rxp1_2*(((0.19394101)+(((-1.0)*x152)))))))),-1);
if(!x154.valid){
continue;
}
CheckValue<IkReal> x155 = IKatan2WithCheck(IkReal(((((-0.00124332858186052)*x139))+((npy*x138*x144))+(((0.0173770591455)*x146))+(((-0.19394101)*x142*x150))+(((-1.0)*x141*x149))+(((-1.0)*x146*x148))+(((-1.0)*npy*x144))+(((-0.05110101)*npx*x142))+(((0.19394101)*x145*x146))+(((-1.0)*r21*x153))+((x139*x140)))),IkReal(((((-1.0)*x140*x151))+(((-1.0)*x142*x143))+((r20*x153))+(((-0.19394101)*x145*x147))+(((-0.0173770591455)*x147))+(((0.19394101)*x141*x142))+((x147*x148))+((npx*x144))+(((-1.0)*npx*x138*x144))+(((-1.0)*x149*x150))+(((0.00124332858186052)*x151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x155.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x154.value)))+(x155.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x156=IKcos(j5);
IkReal x157=IKsin(j5);
IkReal x158=((0.07155)*cj4);
IkReal x159=(sj4*x157);
IkReal x160=(sj4*x156);
evalcond[0]=((-0.0173770591455)+(((-0.05110101)*npy*x157))+(((0.05110101)*npx*x156))+(((0.19394101)*npx*x159))+(((0.19394101)*npy*x160))+(((-0.19394101)*cj4*npz))+(((0.3571)*pp)));
evalcond[1]=((((-1.0)*rxp1_2*x160))+(((-1.0)*rxp0_2*x159))+((r20*x157*x158))+((r21*x156*x158))+((cj4*rxp2_2))+(((0.07155)*r22*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((13.9762403913347)*py))+(((-1.0)*r11*sj5)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x161=((1.0)*sj4);
j0eval[0]=((((-1.0)*cj5*r11*x161))+(((-1.0)*r10*sj5*x161))+((cj4*r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x162=((13.9762403913347)*sj4);
j0eval[0]=(((cj4*r00*sj5))+(((-1.0)*rxp0_0*sj5*x162))+((r02*sj4))+((cj4*cj5*r01))+(((13.9762403913347)*cj4*rxp2_0))+(((-1.0)*cj5*rxp1_0*x162)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x163=((13.9762403913347)*py);
IkReal x164=((1.0)+(((-1.0)*(r12*r12))));
if((x164) < -0.00001)
continue;
IkReal x165=IKabs(IKsqrt(x164));
IkReal x171 = x164;
if(IKabs(x171)==0){
continue;
}
IkReal x166=pow(x171,-0.5);
CheckValue<IkReal> x172=IKPowWithIntegerCheck(x165,-1);
if(!x172.valid){
continue;
}
IkReal x167=x172.value;
IkReal x168=(x166*x167);
if((((1.0)+(((-195.335295476376)*(py*py)*(x167*x167))))) < -0.00001)
continue;
IkReal x169=IKsqrt(((1.0)+(((-195.335295476376)*(py*py)*(x167*x167)))));
IkReal x170=((1.0)*x166*x169);
CheckValue<IkReal> x173 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x173.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x174=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x174.valid){
continue;
}
if( ((x163*(x174.value))) < -1-IKFAST_SINCOS_THRESH || ((x163*(x174.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst32=((((-1.0)*(x173.value)))+(((-1.0)*(IKasin((x163*(x174.value)))))));
IkReal gconst33=(((r11*x163*x168))+(((-1.0)*r10*x170)));
IkReal gconst34=((((-1.0)*r11*x170))+(((-1.0)*r10*x163*x168)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x175=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x175.valid){
continue;
}
if( (((13.9762403913347)*py*(x175.value))) < -1-IKFAST_SINCOS_THRESH || (((13.9762403913347)*py*(x175.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((13.9762403913347)*py*(x175.value))))+j5+(x176.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x177=gconst33*gconst33;
IkReal x178=gconst34*gconst34;
IkReal x179=((0.5724)*gconst33);
IkReal x180=((0.07155)*gconst34);
IkReal x181=((0.07155)*gconst33);
IkReal x182=((0.5724)*gconst34);
IkReal x183=((0.02047761)*x178);
IkReal x184=((0.04095522)*gconst33*gconst34);
IkReal x185=((0.02047761)*x177);
CheckValue<IkReal> x192=IKPowWithIntegerCheck(((((-1.0)*r11*x181))+py+((r10*x180))),-1);
if(!x192.valid){
continue;
}
IkReal x186=x192.value;
IkReal x187=(px*x186);
CheckValue<IkReal> x193=IKPowWithIntegerCheck(((((-1.0)*r11*x181))+(((0.07155)*gconst34*r10))+py),-1);
if(!x193.valid){
continue;
}
IkReal x188=(r00*x180*(x193.value));
CheckValue<IkReal> x194=IKPowWithIntegerCheck(((((-0.07155)*gconst33*r11))+py+((r10*x180))),-1);
if(!x194.valid){
continue;
}
IkReal x189=(r01*x181*(x194.value));
IkReal x190=(x187+x188);
if((((((4.0)*(py*py)))+((py*r10*x182))+((x185*(r11*r11)))+((x183*(r00*r00)))+((x183*(r10*r10)))+(((-1.0)*py*r11*x179))+((x185*(r01*r01)))+((px*r00*x182))+(((4.0)*(px*px)))+(((-1.0)*px*r01*x179))+(((-1.0)*r00*r01*x184))+(((-1.0)*r10*r11*x184)))) < -0.00001)
continue;
IkReal x191=((0.5)*x186*(IKsqrt(((((4.0)*(py*py)))+((py*r10*x182))+((x185*(r11*r11)))+((x183*(r00*r00)))+((x183*(r10*r10)))+(((-1.0)*py*r11*x179))+((x185*(r01*r01)))+((px*r00*x182))+(((4.0)*(px*px)))+(((-1.0)*px*r01*x179))+(((-1.0)*r00*r01*x184))+(((-1.0)*r10*r11*x184))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x190))+x191+x189))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x189))+x191+x190))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2775=((13.9762403913347)*py);
IkReal x2776=((1.0)+(((-1.0)*(r12*r12))));
if((x2776) < -0.00001)
continue;
IkReal x2777=IKabs(IKsqrt(x2776));
IkReal x2783 = x2776;
if(IKabs(x2783)==0){
continue;
}
IkReal x2778=pow(x2783,-0.5);
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(x2777,-1);
if(!x2784.valid){
continue;
}
IkReal x2779=x2784.value;
IkReal x2780=(x2778*x2779);
if((((1.0)+(((-195.335295476376)*(py*py)*(x2779*x2779))))) < -0.00001)
continue;
IkReal x2781=IKsqrt(((1.0)+(((-195.335295476376)*(py*py)*(x2779*x2779)))));
IkReal x2782=((1.0)*x2778*x2781);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2786.valid){
continue;
}
if( ((x2775*(x2786.value))) < -1-IKFAST_SINCOS_THRESH || ((x2775*(x2786.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x2785.value)))+(IKasin((x2775*(x2786.value)))));
IkReal gconst36=(((r11*x2775*x2780))+((r10*x2782)));
IkReal gconst37=((((-1.0)*r10*x2775*x2780))+((r11*x2782)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2787=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2787.valid){
continue;
}
if( (((13.9762403913347)*py*(x2787.value))) < -1-IKFAST_SINCOS_THRESH || (((13.9762403913347)*py*(x2787.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((13.9762403913347)*py*(x2787.value))))))+j5+(x2788.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2789=gconst37*gconst37;
IkReal x2790=gconst36*gconst36;
IkReal x2791=(gconst37*r00);
IkReal x2792=(gconst36*r01);
IkReal x2793=((0.5724)*px);
IkReal x2794=(gconst36*r11);
IkReal x2795=((0.5724)*py);
IkReal x2796=(gconst37*r10);
IkReal x2797=((0.02047761)*x2790);
IkReal x2798=((0.02047761)*x2789);
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(((((-0.07155)*x2794))+(((0.07155)*x2796))+py),-1);
if(!x2806.valid){
continue;
}
IkReal x2799=x2806.value;
IkReal x2800=(px*x2799);
IkReal x2801=((0.07155)*x2799);
IkReal x2802=(x2791*x2801);
IkReal x2803=(x2792*x2801);
IkReal x2804=(x2802+x2800);
if((((((4.0)*(py*py)))+((x2798*(r10*r10)))+((x2795*x2796))+((x2797*(r01*r01)))+((x2791*x2793))+((x2797*(r11*r11)))+((x2798*(r00*r00)))+(((-0.04095522)*x2791*x2792))+(((4.0)*(px*px)))+(((-1.0)*x2792*x2793))+(((-1.0)*x2794*x2795))+(((-0.04095522)*x2794*x2796)))) < -0.00001)
continue;
IkReal x2805=((0.5)*x2799*(IKsqrt(((((4.0)*(py*py)))+((x2798*(r10*r10)))+((x2795*x2796))+((x2797*(r01*r01)))+((x2791*x2793))+((x2797*(r11*r11)))+((x2798*(r00*r00)))+(((-0.04095522)*x2791*x2792))+(((4.0)*(px*px)))+(((-1.0)*x2792*x2793))+(((-1.0)*x2794*x2795))+(((-0.04095522)*x2794*x2796))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2804))+x2803+x2805))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2803))+x2804+x2805))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2807.valid){
continue;
}
CheckValue<IkReal> x2808=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2808.valid){
continue;
}
if((((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2809.valid){
continue;
}
CheckValue<IkReal> x2810=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2810.valid){
continue;
}
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2813.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.07155)*r12*sj4*(x2807.value)))+(((0.5)*(x2808.value)*(IKsqrt(((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))))))+((cj4*rxp2_1*(x2809.value)))+(((0.07155)*cj4*cj5*r11*(x2810.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2811.value)))+(((0.07155)*cj4*r10*sj5*(x2812.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2813.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2814.valid){
continue;
}
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2816.valid){
continue;
}
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2817.valid){
continue;
}
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2818.valid){
continue;
}
if((((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(((((-1.0)*cj5*rxp1_0*sj4))+(((0.07155)*cj4*r00*sj5))+(((-1.0)*rxp0_0*sj4*sj5))+((cj4*rxp2_0))+(((0.07155)*cj4*cj5*r01))+(((0.07155)*r02*sj4))),-1);
if(!x2820.valid){
continue;
}
j0array[1]=((2.0)*(atan(((((0.07155)*r12*sj4*(x2814.value)))+((cj4*rxp2_1*(x2815.value)))+(((0.07155)*cj4*cj5*r11*(x2816.value)))+(((-1.0)*cj5*rxp1_1*sj4*(x2817.value)))+(((-0.5)*(x2818.value)*(IKsqrt(((((0.02047761)*(r12*r12)))+(((-0.5724)*cj4*r11*rxp1_1*sj4*(cj5*cj5)))+(((0.5724)*cj5*r02*rxp1_0*(cj4*cj4)))+(((0.04095522)*cj4*r10*r12*sj4*sj5))+(((-4.0)*(cj4*cj4)*(rxp0_0*rxp0_0)))+(((4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(rxp0_1*rxp0_1)))+(((0.04095522)*cj4*cj5*r11*r12*sj4))+(((0.02047761)*(cj4*cj4)*(r10*r10)))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.5724)*r00*rxp2_0*sj5*(cj4*cj4)))+(((0.5724)*cj4*r02*rxp2_0*sj4))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((0.5724)*r12*rxp0_1*sj5*(cj4*cj4)))+(((0.5724)*cj5*r11*rxp2_1*(cj4*cj4)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.5724)*r02*rxp0_0*sj5))+(((0.5724)*cj5*r12*rxp1_1*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_0*rxp2_0*sj4))+(((-4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.5724)*cj5*r01*rxp2_0*(cj4*cj4)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-8.0)*cj4*rxp0_1*rxp2_1*sj4*sj5))+(((-0.5724)*cj5*r12*rxp1_1))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((-0.5724)*cj4*cj5*r01*rxp0_0*sj4*sj5))+(((0.04095522)*cj4*cj5*r01*r02*sj4))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((0.5724)*cj4*r12*rxp2_1*sj4))+(((0.04095522)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp1_1*rxp2_1*sj4))+(((-0.5724)*cj5*r02*rxp1_0))+(((-0.5724)*cj4*r10*rxp0_1*sj4))+(((0.5724)*r02*rxp0_0*sj5*(cj4*cj4)))+(((0.02047761)*(cj4*cj4)*(r00*r00)))+(((-8.0)*cj4*rxp0_0*rxp2_0*sj4*sj5))+(((0.02047761)*(r02*r02)))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.5724)*r12*rxp0_1*sj5))+(((0.5724)*r10*rxp2_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r00*rxp0_0*sj4))+(((-0.02047761)*(cj4*cj4)*(r02*r02)))+(((-0.5724)*cj4*cj5*r10*rxp1_1*sj4*sj5))+(((-0.5724)*cj4*cj5*r00*rxp1_0*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((0.04095522)*cj5*r00*r01*sj5*(cj4*cj4)))+(((0.04095522)*cj4*r00*r02*sj4*sj5))+(((0.5724)*cj4*r10*rxp0_1*sj4*(cj5*cj5)))+(((-0.5724)*cj4*cj5*r11*rxp0_1*sj4*sj5))+(((-0.02047761)*(cj4*cj4)*(r12*r12)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((-0.5724)*cj4*r01*rxp1_0*sj4*(cj5*cj5)))+(((4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((0.5724)*cj4*r00*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp0_0*rxp0_0)))+(((0.02047761)*(cj4*cj4)*(cj5*cj5)*(r11*r11))))))))+(((0.07155)*cj4*r10*sj5*(x2819.value)))+(((-1.0)*rxp0_1*sj4*sj5*(x2820.value)))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2821=cj4*cj4;
IkReal x2822=cj5*cj5;
IkReal x2823=r10*r10;
IkReal x2824=r00*r00;
IkReal x2825=r11*r11;
IkReal x2826=r01*r01;
IkReal x2827=(r10*sj5);
IkReal x2828=((1.0)*sj4);
IkReal x2829=(cj5*r01);
IkReal x2830=(cj4*r02);
IkReal x2831=((4.0)*x2821);
IkReal x2832=((8.0)*cj5*r11);
IkReal x2833=(r00*sj4*sj5);
IkReal x2834=((4.0)*x2823);
IkReal x2835=((4.0)*x2824);
IkReal x2836=(cj4*r12*sj4);
IkReal x2837=((8.0)*r00*sj5);
IkReal x2838=(x2822*x2826);
IkReal x2839=(x2822*x2825);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(((((-1.0)*cj5*r11*x2828))+(((-1.0)*x2827*x2828))+((cj4*r12))),-1);
if(!x2847.valid){
continue;
}
IkReal x2840=x2847.value;
IkReal x2841=(sj4*x2840);
IkReal x2842=(x2829*x2841);
IkReal x2843=(x2833*x2840);
IkReal x2844=((1.0)*x2830*x2840);
IkReal x2845=(x2842+x2843);
if(((((x2829*x2837))+(((-1.0)*x2821*x2829*x2837))+(((-8.0)*x2827*x2836))+(((-8.0)*x2830*x2833))+((x2822*x2823*x2831))+((x2827*x2832))+(((4.0)*x2839))+(((4.0)*x2838))+(((-1.0)*x2822*x2835))+(((-1.0)*x2822*x2834))+(((-8.0)*sj4*x2829*x2830))+(((-1.0)*x2832*x2836))+(((-1.0)*x2821*x2827*x2832))+(((-1.0)*x2824*x2831))+x2835+x2834+(((-1.0)*x2831*x2839))+(((-1.0)*x2831*x2838))+(((-1.0)*x2823*x2831))+((x2822*x2824*x2831))+((x2831*(r02*r02)))+((x2831*(r12*r12))))) < -0.00001)
continue;
IkReal x2846=((0.5)*x2840*(IKsqrt((((x2829*x2837))+(((-1.0)*x2821*x2829*x2837))+(((-8.0)*x2827*x2836))+(((-8.0)*x2830*x2833))+((x2822*x2823*x2831))+((x2827*x2832))+(((4.0)*x2839))+(((4.0)*x2838))+(((-1.0)*x2822*x2835))+(((-1.0)*x2822*x2834))+(((-8.0)*sj4*x2829*x2830))+(((-1.0)*x2832*x2836))+(((-1.0)*x2821*x2827*x2832))+(((-1.0)*x2824*x2831))+x2835+x2834+(((-1.0)*x2831*x2839))+(((-1.0)*x2831*x2838))+(((-1.0)*x2823*x2831))+((x2822*x2824*x2831))+((x2831*(r02*r02)))+((x2831*(r12*r12)))))));
j0array[0]=((2.0)*(atan((x2846+x2845+(((-1.0)*x2844))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2846+x2844+(((-1.0)*x2845))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2848=cj5*cj5;
IkReal x2849=r11*r11;
IkReal x2850=r01*r01;
IkReal x2851=(cj5*r10);
IkReal x2852=((0.5724)*sj5);
IkReal x2853=((0.07155)*sj5);
IkReal x2854=(cj5*r00);
IkReal x2855=((0.04095522)*cj5*sj5);
IkReal x2856=((0.02047761)*x2848);
CheckValue<IkReal> x2862=IKPowWithIntegerCheck(((((-1.0)*r11*x2853))+py+(((0.07155)*x2851))),-1);
if(!x2862.valid){
continue;
}
IkReal x2857=x2862.value;
IkReal x2858=(px*x2857);
IkReal x2859=((0.07155)*x2854*x2857);
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(((((-0.07155)*r11*sj5))+py+(((0.07155)*x2851))),-1);
if(!x2863.valid){
continue;
}
IkReal x2860=(r01*x2853*(x2863.value));
if((((((0.5724)*py*x2851))+(((-1.0)*px*r01*x2852))+(((0.5724)*px*x2854))+(((-0.04095522)*r11*sj5*x2851))+(((4.0)*(py*py)))+(((-1.0)*x2850*x2856))+(((-1.0)*x2849*x2856))+(((-0.04095522)*r01*sj5*x2854))+(((0.02047761)*x2850))+(((0.02047761)*x2849))+(((4.0)*(px*px)))+(((-1.0)*py*r11*x2852))+((x2856*(r00*r00)))+((x2856*(r10*r10))))) < -0.00001)
continue;
IkReal x2861=((0.5)*x2857*(IKsqrt(((((0.5724)*py*x2851))+(((-1.0)*px*r01*x2852))+(((0.5724)*px*x2854))+(((-0.04095522)*r11*sj5*x2851))+(((4.0)*(py*py)))+(((-1.0)*x2850*x2856))+(((-1.0)*x2849*x2856))+(((-0.04095522)*r01*sj5*x2854))+(((0.02047761)*x2850))+(((0.02047761)*x2849))+(((4.0)*(px*px)))+(((-1.0)*py*r11*x2852))+((x2856*(r00*r00)))+((x2856*(r10*r10)))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2858))+x2860+x2861+(((-1.0)*x2859))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2860))+x2859+x2858+x2861))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x195=((1.0)*sj5);
IkReal x196=(r20*sj0);
IkReal x197=((1.0)*cj5);
IkReal x198=(r21*sj0);
IkReal x199=((((-1.0)*r11*sj4*x197))+(((-1.0)*r10*sj4*x195))+((cj4*r12)));
j3eval[0]=x199;
j3eval[1]=((IKabs(((((-1.0)*cj4*x195*x196))+(((-1.0)*cj4*x197*x198))+(((-1.0)*r22*sj0*sj4)))))+(IKabs(((((-1.0)*x196*x197))+((sj5*x198))))));
j3eval[2]=IKsign(x199);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x200=(cj0*r21);
IkReal x201=((1.0)*cj5);
IkReal x202=((1.0)*sj4);
IkReal x203=(cj0*r20);
IkReal x204=((((-1.0)*r01*sj4*x201))+(((-1.0)*r00*sj5*x202))+((cj4*r02)));
j3eval[0]=x204;
j3eval[1]=IKsign(x204);
j3eval[2]=((IKabs(((((-1.0)*cj4*x200*x201))+(((-1.0)*cj4*sj5*x203))+(((-1.0)*cj0*r22*x202)))))+(IKabs(((((-1.0)*x201*x203))+((sj5*x200))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x205=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j3eval[0]=x205;
j3eval[1]=IKsign(x205);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x206=((1.0)*r10);
IkReal x207=((1.0)*cj4);
IkReal x208=((((-1.0)*r22*x207))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x208;
j3eval[1]=IKsign(x208);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*cj5*x206)))))+(IKabs(((((-1.0)*cj4*sj5*x206))+(((-1.0)*cj5*r11*x207))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x209=((1.0)*sj5);
IkReal x210=((1.0)*cj5);
IkReal x211=((((-1.0)*r11*sj4*x210))+(((-1.0)*r10*sj4*x209))+((cj4*r12)));
j3eval[0]=x211;
j3eval[1]=IKsign(x211);
j3eval[2]=((IKabs(((((-1.0)*r20*x210))+((r21*sj5)))))+(IKabs(((((-1.0)*cj4*r20*x209))+(((-1.0)*cj4*r21*x210))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x212=cj5*cj5;
IkReal x213=cj4*cj4;
IkReal x214=r00*r00;
IkReal x215=r01*r01;
IkReal x216=r02*r02;
IkReal x217=(r00*sj5);
IkReal x218=((2.0)*cj5*r01);
IkReal x219=(cj4*r02*sj4);
IkReal x220=((1.0)*x213);
IkReal x221=(x212*x214);
IkReal x222=(x212*x215);
IkReal x223=((((-2.0)*x217*x219))+((x213*x216))+(((-1.0)*x214*x220))+((x213*x221))+(((-1.0)*x218*x219))+x222+(((-1.0)*x220*x222))+(((-1.0)*x215))+(((-1.0)*x216))+((x217*x218))+(((-1.0)*x213*x217*x218))+(((-1.0)*x221)));
j3eval[0]=x223;
j3eval[1]=IKsign(x223);
j3eval[2]=((IKabs((((cj4*x217))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x224=cj5*cj5;
IkReal x225=cj4*cj4;
IkReal x226=r00*r00;
IkReal x227=r01*r01;
IkReal x228=r02*r02;
IkReal x229=(r00*sj5);
IkReal x230=((2.0)*cj5*r01);
IkReal x231=(cj4*r02*sj4);
IkReal x232=((1.0)*x225);
IkReal x233=(x224*x226);
IkReal x234=(x224*x227);
CheckValue<IkReal> x235=IKPowWithIntegerCheck(IKsign(((((-1.0)*x225*x229*x230))+((x225*x228))+(((-1.0)*x230*x231))+((x229*x230))+(((-2.0)*x229*x231))+x234+((x225*x233))+(((-1.0)*x226*x232))+(((-1.0)*x233))+(((-1.0)*x232*x234))+(((-1.0)*x228))+(((-1.0)*x227)))),-1);
if(!x235.valid){
continue;
}
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x229)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x235.value)))+(x236.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x237=IKsin(j3);
IkReal x238=IKcos(j3);
IkReal x239=(cj4*r00);
IkReal x240=(sj5*x237);
IkReal x241=(sj4*x237);
IkReal x242=(sj5*x238);
IkReal x243=(cj4*cj5*x237);
IkReal x244=((1.0)*cj5*x238);
evalcond[0]=(((r22*x241))+((cj4*r20*x240))+((r21*x242))+((r21*x243))+(((-1.0)*r20*x244)));
evalcond[1]=((((-1.0)*r10*x244))+((r12*x241))+((cj4*r10*x240))+((r11*x242))+((r11*x243)));
evalcond[2]=(((cj5*r00*x237))+((x239*x242))+((cj4*cj5*r01*x238))+(((-1.0)*r01*x240))+((r02*sj4*x238)));
evalcond[3]=((1.0)+((r02*x241))+((x239*x240))+(((-1.0)*r00*x244))+((r01*x242))+((r01*x243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x245=((0.76043125175021)*sj4);
IkReal x246=((0.200364043685242)*sj5);
IkReal x247=((0.200364043685242)*cj5);
IkReal x248=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+(((-1.0)*r11*x246))+(((-1.0)*r12*x248))+((cj5*r11*x245))+((r10*sj5*x245))+((r10*x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x245))+((cj5*r21*x245))+(((-1.0)*r22*x248))+(((-1.0)*r21*x246))+((r20*x247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+(((-1.0)*r11*x246))+(((-1.0)*r12*x248))+((cj5*r11*x245))+((r10*sj5*x245))+((r10*x247))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x245))+((cj5*r21*x245))+(((-1.0)*r22*x248))+(((-1.0)*r21*x246))+((r20*x247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+(((-1.0)*r11*x246))+(((-1.0)*r12*x248))+((cj5*r11*x245))+((r10*sj5*x245))+((r10*x247))), ((((2.80033604032484)*pz))+((r20*sj5*x245))+((cj5*r21*x245))+(((-1.0)*r22*x248))+(((-1.0)*r21*x246))+((r20*x247))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x249=((1.0)*pz);
IkReal x250=((0.27155)*sj5);
IkReal x251=((0.07155)*cj5);
IkReal x252=(cj3*cj4);
IkReal x253=((0.27155)*sj4);
IkReal x254=((0.27155)*cj4);
IkReal x255=((0.07155)*sj5);
IkReal x256=(cj5*r21);
IkReal x257=(r10*x251);
IkReal x258=(r11*x255);
IkReal x259=((0.3571)*(IKsin(j1)));
IkReal x260=(r21*x255);
IkReal x261=((0.3571)*(IKcos(j1)));
IkReal x262=(r20*x251);
IkReal x263=((0.27155)*cj5*r11);
IkReal x264=((0.27155)*cj5*sj3);
IkReal x265=(x262+x249);
IkReal x266=(x258+x259);
IkReal x267=(x261+x260);
evalcond[0]=(x267+(((-1.0)*r20*sj4*x250))+((r22*x254))+(((-1.0)*x265))+(((-1.0)*x253*x256)));
evalcond[1]=(((r12*x254))+(((-1.0)*py))+x266+(((-1.0)*r10*sj4*x250))+(((-1.0)*cj5*r11*x253))+(((-1.0)*x257)));
evalcond[2]=((((-1.0)*r21*sj3*x250))+x257+py+((cj3*r22*x253))+(((0.27155)*x252*x256))+(((-1.0)*x266))+((r20*x250*x252))+((r20*x264)));
evalcond[3]=(((x252*x263))+x267+((cj3*r12*x253))+(((-1.0)*r11*sj3*x250))+((r10*x264))+(((-1.0)*x265))+((r10*x250*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x268=(cj1*cj4);
IkReal x269=((1.0)*r22);
IkReal x270=(cj4*sj1);
IkReal x271=(sj4*sj5);
IkReal x272=(cj1*cj5*sj4);
IkReal x273=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r12*x270))+((cj1*r20*x271))+((r21*x272))+((r10*sj1*x271))+(((-1.0)*x268*x269))+((r11*x273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r10*x271))+(((-1.0)*x269*x270))+((r20*sj1*x271))+((r21*x273))+(((-1.0)*r11*x272))+((r12*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x270))+((cj1*r20*x271))+((r21*x272))+((r10*sj1*x271))+(((-1.0)*x268*x269))+((r11*x273))))+IKsqr(((((-1.0)*cj1*r10*x271))+(((-1.0)*x269*x270))+((r20*sj1*x271))+((r21*x273))+(((-1.0)*r11*x272))+((r12*x268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x270))+((cj1*r20*x271))+((r21*x272))+((r10*sj1*x271))+(((-1.0)*x268*x269))+((r11*x273))), ((((-1.0)*cj1*r10*x271))+(((-1.0)*x269*x270))+((r20*sj1*x271))+((r21*x273))+(((-1.0)*r11*x272))+((r12*x268))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x274=IKcos(j2);
IkReal x275=IKsin(j2);
IkReal x276=((1.0)*cj4);
IkReal x277=((0.07155)*cj5);
IkReal x278=(cj5*sj4);
IkReal x279=(cj3*cj4);
IkReal x280=(r20*sj5);
IkReal x281=(r10*sj5);
IkReal x282=((0.07155)*sj5);
IkReal x283=(cj5*sj3);
IkReal x284=(cj3*sj4);
IkReal x285=(cj1*x274);
IkReal x286=((1.0)*sj3*sj5);
IkReal x287=(cj1*x275);
IkReal x288=(sj1*x274);
IkReal x289=(sj1*x275);
IkReal x290=((1.0)*x289);
evalcond[0]=((((-1.0)*x290))+(((-1.0)*r12*x276))+x285+((r11*x278))+((sj4*x281)));
evalcond[1]=(((r21*x278))+(((-1.0)*x288))+(((-1.0)*x287))+(((-1.0)*r22*x276))+((sj4*x280)));
evalcond[2]=((((0.3571)*cj1))+((r21*x282))+(((-0.27155)*x287))+(((-0.27155)*x288))+(((-1.0)*pz))+(((-1.0)*r20*x277)));
evalcond[3]=((((0.27155)*x285))+(((0.3571)*sj1))+(((-0.27155)*x289))+((r11*x282))+(((-1.0)*r10*x277))+(((-1.0)*py)));
evalcond[4]=(((x279*x281))+((r10*x283))+((r12*x284))+(((-1.0)*r11*x286))+x288+x287+((cj5*r11*x279)));
evalcond[5]=(((x279*x280))+(((-1.0)*r21*x286))+(((-1.0)*x290))+((r22*x284))+x285+((cj5*r21*x279))+((r20*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x291=((1.0)*sj5);
IkReal x292=((1.0)*cj5);
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x291))+(((-1.0)*r11*sj4*x292))+((cj4*r12)))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x292)))),IkReal(((((-1.0)*cj4*r20*x291))+(((-1.0)*cj4*r21*x292))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x293.value)))+(x294.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x295=IKsin(j3);
IkReal x296=IKcos(j3);
IkReal x297=(cj4*r00);
IkReal x298=(sj5*x295);
IkReal x299=(sj4*x295);
IkReal x300=(sj5*x296);
IkReal x301=(cj4*cj5*x295);
IkReal x302=((1.0)*cj5*x296);
evalcond[0]=(((cj4*r20*x298))+((r21*x300))+((r21*x301))+(((-1.0)*r20*x302))+((r22*x299)));
evalcond[1]=(((r12*x299))+((cj4*r10*x298))+((r11*x301))+((r11*x300))+(((-1.0)*r10*x302)));
evalcond[2]=(((r02*sj4*x296))+(((-1.0)*r01*x298))+((cj4*cj5*r01*x296))+((x297*x300))+((cj5*r00*x295)));
evalcond[3]=((1.0)+(((-1.0)*r00*x302))+((x297*x298))+((r02*x299))+((r01*x300))+((r01*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x303=((0.76043125175021)*sj4);
IkReal x304=((0.200364043685242)*sj5);
IkReal x305=((0.200364043685242)*cj5);
IkReal x306=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+((cj5*r11*x303))+((r10*sj5*x303))+((r10*x305))+(((-1.0)*r11*x304))+(((-1.0)*r12*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x306))+(((2.80033604032484)*pz))+(((-1.0)*r21*x304))+((cj5*r21*x303))+((r20*x305))+((r20*sj5*x303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+((cj5*r11*x303))+((r10*sj5*x303))+((r10*x305))+(((-1.0)*r11*x304))+(((-1.0)*r12*x306))))+IKsqr(((((-1.0)*r22*x306))+(((2.80033604032484)*pz))+(((-1.0)*r21*x304))+((cj5*r21*x303))+((r20*x305))+((r20*sj5*x303))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+((cj5*r11*x303))+((r10*sj5*x303))+((r10*x305))+(((-1.0)*r11*x304))+(((-1.0)*r12*x306))), ((((-1.0)*r22*x306))+(((2.80033604032484)*pz))+(((-1.0)*r21*x304))+((cj5*r21*x303))+((r20*x305))+((r20*sj5*x303))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x307=((1.0)*pz);
IkReal x308=((0.27155)*sj5);
IkReal x309=((0.07155)*cj5);
IkReal x310=(cj3*cj4);
IkReal x311=((0.27155)*sj4);
IkReal x312=((0.27155)*cj4);
IkReal x313=((0.07155)*sj5);
IkReal x314=(cj5*r21);
IkReal x315=(r10*x309);
IkReal x316=(r11*x313);
IkReal x317=((0.3571)*(IKsin(j1)));
IkReal x318=(r21*x313);
IkReal x319=((0.3571)*(IKcos(j1)));
IkReal x320=(r20*x309);
IkReal x321=((0.27155)*cj5*r11);
IkReal x322=((0.27155)*cj5*sj3);
IkReal x323=(x307+x320);
IkReal x324=(x317+x316);
IkReal x325=(x319+x318);
evalcond[0]=((((-1.0)*x323))+x325+(((-1.0)*r20*sj4*x308))+((r22*x312))+(((-1.0)*x311*x314)));
evalcond[1]=((((-1.0)*r10*sj4*x308))+x324+(((-1.0)*py))+(((-1.0)*cj5*r11*x311))+(((-1.0)*x315))+((r12*x312)));
evalcond[2]=((((-1.0)*r21*sj3*x308))+((r20*x322))+((r20*x308*x310))+((cj3*r22*x311))+(((-1.0)*x324))+x315+py+(((0.27155)*x310*x314)));
evalcond[3]=((((-1.0)*r11*sj3*x308))+((x310*x321))+((r10*x308*x310))+((cj3*r12*x311))+(((-1.0)*x323))+x325+((r10*x322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x326=(cj1*cj4);
IkReal x327=((1.0)*r22);
IkReal x328=(cj4*sj1);
IkReal x329=(sj4*sj5);
IkReal x330=(cj1*cj5*sj4);
IkReal x331=(cj5*sj1*sj4);
if( IKabs((((r11*x331))+((cj1*r20*x329))+(((-1.0)*x326*x327))+((r21*x330))+(((-1.0)*r12*x328))+((r10*sj1*x329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x329))+((r12*x326))+(((-1.0)*r11*x330))+((r21*x331))+(((-1.0)*x327*x328))+(((-1.0)*cj1*r10*x329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x331))+((cj1*r20*x329))+(((-1.0)*x326*x327))+((r21*x330))+(((-1.0)*r12*x328))+((r10*sj1*x329))))+IKsqr((((r20*sj1*x329))+((r12*x326))+(((-1.0)*r11*x330))+((r21*x331))+(((-1.0)*x327*x328))+(((-1.0)*cj1*r10*x329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x331))+((cj1*r20*x329))+(((-1.0)*x326*x327))+((r21*x330))+(((-1.0)*r12*x328))+((r10*sj1*x329))), (((r20*sj1*x329))+((r12*x326))+(((-1.0)*r11*x330))+((r21*x331))+(((-1.0)*x327*x328))+(((-1.0)*cj1*r10*x329))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x332=IKcos(j2);
IkReal x333=IKsin(j2);
IkReal x334=((1.0)*cj4);
IkReal x335=((0.07155)*cj5);
IkReal x336=(cj5*sj4);
IkReal x337=(cj3*cj4);
IkReal x338=(r20*sj5);
IkReal x339=(r10*sj5);
IkReal x340=((0.07155)*sj5);
IkReal x341=(cj5*sj3);
IkReal x342=(cj3*sj4);
IkReal x343=(cj1*x332);
IkReal x344=((1.0)*sj3*sj5);
IkReal x345=(cj1*x333);
IkReal x346=(sj1*x332);
IkReal x347=(sj1*x333);
IkReal x348=((1.0)*x347);
evalcond[0]=(((r11*x336))+x343+((sj4*x339))+(((-1.0)*r12*x334))+(((-1.0)*x348)));
evalcond[1]=(((r21*x336))+((sj4*x338))+(((-1.0)*r22*x334))+(((-1.0)*x345))+(((-1.0)*x346)));
evalcond[2]=(((r21*x340))+(((0.3571)*cj1))+(((-1.0)*r20*x335))+(((-1.0)*pz))+(((-0.27155)*x345))+(((-0.27155)*x346)));
evalcond[3]=((((0.3571)*sj1))+(((-1.0)*py))+((r11*x340))+(((-1.0)*r10*x335))+(((0.27155)*x343))+(((-0.27155)*x347)));
evalcond[4]=((((-1.0)*r11*x344))+((x337*x339))+x346+x345+((cj5*r11*x337))+((r10*x341))+((r12*x342)));
evalcond[5]=(((cj5*r21*x337))+((x337*x338))+((r22*x342))+x343+((r20*x341))+(((-1.0)*x348))+(((-1.0)*r21*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x349=((1.0)*cj5);
IkReal x350=((1.0)*cj4);
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x350))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x349)))),IkReal(((((-1.0)*cj4*r11*x349))+(((-1.0)*r10*sj5*x350))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x351.value)))+(x352.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x353=IKsin(j3);
IkReal x354=IKcos(j3);
IkReal x355=(cj4*r00);
IkReal x356=(sj5*x353);
IkReal x357=(sj4*x353);
IkReal x358=(sj5*x354);
IkReal x359=(cj4*cj5*x353);
IkReal x360=((1.0)*cj5*x354);
evalcond[0]=(((r21*x358))+((r21*x359))+(((-1.0)*r20*x360))+((cj4*r20*x356))+((r22*x357)));
evalcond[1]=(((r12*x357))+((r11*x358))+((r11*x359))+(((-1.0)*r10*x360))+((cj4*r10*x356)));
evalcond[2]=((((-1.0)*r01*x356))+((x355*x358))+((cj4*cj5*r01*x354))+((r02*sj4*x354))+((cj5*r00*x353)));
evalcond[3]=((1.0)+((r01*x359))+((r01*x358))+(((-1.0)*r00*x360))+((x355*x356))+((r02*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x361=((0.76043125175021)*sj4);
IkReal x362=((0.200364043685242)*sj5);
IkReal x363=((0.200364043685242)*cj5);
IkReal x364=((0.76043125175021)*cj4);
if( IKabs(((((2.80033604032484)*py))+(((-1.0)*r11*x362))+((cj5*r11*x361))+(((-1.0)*r12*x364))+((r10*sj5*x361))+((r10*x363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x363))+((r20*sj5*x361))+(((-1.0)*r21*x362))+(((2.80033604032484)*pz))+((cj5*r21*x361))+(((-1.0)*r22*x364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*py))+(((-1.0)*r11*x362))+((cj5*r11*x361))+(((-1.0)*r12*x364))+((r10*sj5*x361))+((r10*x363))))+IKsqr((((r20*x363))+((r20*sj5*x361))+(((-1.0)*r21*x362))+(((2.80033604032484)*pz))+((cj5*r21*x361))+(((-1.0)*r22*x364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*py))+(((-1.0)*r11*x362))+((cj5*r11*x361))+(((-1.0)*r12*x364))+((r10*sj5*x361))+((r10*x363))), (((r20*x363))+((r20*sj5*x361))+(((-1.0)*r21*x362))+(((2.80033604032484)*pz))+((cj5*r21*x361))+(((-1.0)*r22*x364))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x365=((1.0)*pz);
IkReal x366=((0.27155)*sj5);
IkReal x367=((0.07155)*cj5);
IkReal x368=(cj3*cj4);
IkReal x369=((0.27155)*sj4);
IkReal x370=((0.27155)*cj4);
IkReal x371=((0.07155)*sj5);
IkReal x372=(cj5*r21);
IkReal x373=(r10*x367);
IkReal x374=(r11*x371);
IkReal x375=((0.3571)*(IKsin(j1)));
IkReal x376=(r21*x371);
IkReal x377=((0.3571)*(IKcos(j1)));
IkReal x378=(r20*x367);
IkReal x379=((0.27155)*cj5*r11);
IkReal x380=((0.27155)*cj5*sj3);
IkReal x381=(x378+x365);
IkReal x382=(x375+x374);
IkReal x383=(x377+x376);
evalcond[0]=((((-1.0)*r20*sj4*x366))+x383+(((-1.0)*x381))+(((-1.0)*x369*x372))+((r22*x370)));
evalcond[1]=((((-1.0)*x373))+x382+(((-1.0)*py))+((r12*x370))+(((-1.0)*cj5*r11*x369))+(((-1.0)*r10*sj4*x366)));
evalcond[2]=((((-1.0)*r21*sj3*x366))+(((0.27155)*x368*x372))+x373+((r20*x380))+py+((r20*x366*x368))+(((-1.0)*x382))+((cj3*r22*x369)));
evalcond[3]=(((cj3*r12*x369))+x383+((r10*x380))+(((-1.0)*x381))+((x368*x379))+(((-1.0)*r11*sj3*x366))+((r10*x366*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x384=(cj1*cj4);
IkReal x385=((1.0)*r22);
IkReal x386=(cj4*sj1);
IkReal x387=(sj4*sj5);
IkReal x388=(cj1*cj5*sj4);
IkReal x389=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x387))+((r11*x389))+((r10*sj1*x387))+((r21*x388))+(((-1.0)*x384*x385))+(((-1.0)*r12*x386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x384))+((r21*x389))+(((-1.0)*cj1*r10*x387))+(((-1.0)*r11*x388))+(((-1.0)*x385*x386))+((r20*sj1*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x387))+((r11*x389))+((r10*sj1*x387))+((r21*x388))+(((-1.0)*x384*x385))+(((-1.0)*r12*x386))))+IKsqr((((r12*x384))+((r21*x389))+(((-1.0)*cj1*r10*x387))+(((-1.0)*r11*x388))+(((-1.0)*x385*x386))+((r20*sj1*x387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x387))+((r11*x389))+((r10*sj1*x387))+((r21*x388))+(((-1.0)*x384*x385))+(((-1.0)*r12*x386))), (((r12*x384))+((r21*x389))+(((-1.0)*cj1*r10*x387))+(((-1.0)*r11*x388))+(((-1.0)*x385*x386))+((r20*sj1*x387))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x390=IKcos(j2);
IkReal x391=IKsin(j2);
IkReal x392=((1.0)*cj4);
IkReal x393=((0.07155)*cj5);
IkReal x394=(cj5*sj4);
IkReal x395=(cj3*cj4);
IkReal x396=(r20*sj5);
IkReal x397=(r10*sj5);
IkReal x398=((0.07155)*sj5);
IkReal x399=(cj5*sj3);
IkReal x400=(cj3*sj4);
IkReal x401=(cj1*x390);
IkReal x402=((1.0)*sj3*sj5);
IkReal x403=(cj1*x391);
IkReal x404=(sj1*x390);
IkReal x405=(sj1*x391);
IkReal x406=((1.0)*x405);
evalcond[0]=((((-1.0)*r12*x392))+((r11*x394))+x401+(((-1.0)*x406))+((sj4*x397)));
evalcond[1]=(((r21*x394))+(((-1.0)*r22*x392))+(((-1.0)*x404))+(((-1.0)*x403))+((sj4*x396)));
evalcond[2]=((((-1.0)*r20*x393))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x404))+(((-0.27155)*x403))+((r21*x398)));
evalcond[3]=((((0.3571)*sj1))+(((-1.0)*py))+((r11*x398))+(((-1.0)*r10*x393))+(((0.27155)*x401))+(((-0.27155)*x405)));
evalcond[4]=(((r10*x399))+((r12*x400))+((x395*x397))+x403+x404+((cj5*r11*x395))+(((-1.0)*r11*x402)));
evalcond[5]=(((r20*x399))+((cj5*r21*x395))+((r22*x400))+((x395*x396))+(((-1.0)*r21*x402))+x401+(((-1.0)*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x407=((1.0)*r20);
IkReal x408=((1.0)*cj4);
IkReal x409=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x408)));
j3eval[0]=x409;
j3eval[1]=IKsign(x409);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x408))+(((-1.0)*cj4*sj5*x407))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x407))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x410=((1.0)*cj5);
IkReal x411=((1.0)*sj4);
IkReal x412=(((cj4*r22))+(((-1.0)*r21*sj4*x410))+(((-1.0)*r20*sj5*x411)));
j3eval[0]=x412;
j3eval[1]=IKsign(x412);
j3eval[2]=((IKabs(((((-1.0)*r10*x410))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r11*x410))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*r12*x411))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x413=cj4*cj4;
IkReal x414=r00*r00;
IkReal x415=cj5*cj5;
IkReal x416=r01*r01;
IkReal x417=r02*r02;
IkReal x418=(r00*sj5);
IkReal x419=((2.0)*cj5*r01);
IkReal x420=(cj4*r02*sj4);
IkReal x421=((1.0)*x415);
IkReal x422=(x413*x414);
IkReal x423=((((-1.0)*x418*x419))+(((-1.0)*x421*x422))+(((-1.0)*x416*x421))+((x414*x415))+(((-1.0)*x413*x417))+((x413*x415*x416))+((x419*x420))+((x413*x418*x419))+x416+x417+x422+(((2.0)*x418*x420)));
j3eval[0]=x423;
j3eval[1]=IKsign(x423);
j3eval[2]=((IKabs((((cj4*x418))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x424=cj4*cj4;
IkReal x425=r00*r00;
IkReal x426=cj5*cj5;
IkReal x427=r01*r01;
IkReal x428=r02*r02;
IkReal x429=(r00*sj5);
IkReal x430=((2.0)*cj5*r01);
IkReal x431=(cj4*r02*sj4);
IkReal x432=((1.0)*x426);
IkReal x433=(x424*x425);
CheckValue<IkReal> x434=IKPowWithIntegerCheck(IKsign(((((-1.0)*x424*x428))+((x425*x426))+(((-1.0)*x427*x432))+(((2.0)*x429*x431))+(((-1.0)*x432*x433))+(((-1.0)*x429*x430))+x428+x427+x433+((x424*x426*x427))+((x430*x431))+((x424*x429*x430)))),-1);
if(!x434.valid){
continue;
}
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal((((cj4*x429))+((r02*sj4))+((cj4*cj5*r01)))),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x434.value)))+(x435.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x436=IKsin(j3);
IkReal x437=IKcos(j3);
IkReal x438=(cj4*r00);
IkReal x439=(sj5*x436);
IkReal x440=(sj4*x436);
IkReal x441=(sj5*x437);
IkReal x442=(cj4*cj5*x436);
IkReal x443=((1.0)*cj5*x437);
evalcond[0]=(((cj4*r20*x439))+((r21*x442))+((r21*x441))+((r22*x440))+(((-1.0)*r20*x443)));
evalcond[1]=(((cj4*r10*x439))+((r11*x441))+((r11*x442))+((r12*x440))+(((-1.0)*r10*x443)));
evalcond[2]=((((-1.0)*r01*x439))+((r02*sj4*x437))+((cj4*cj5*r01*x437))+((cj5*r00*x436))+((x438*x441)));
evalcond[3]=((-1.0)+((r02*x440))+((r01*x442))+((r01*x441))+(((-1.0)*r00*x443))+((x438*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x444=((0.76043125175021)*sj4);
IkReal x445=((0.200364043685242)*sj5);
IkReal x446=((0.200364043685242)*cj5);
IkReal x447=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x444))+(((-1.0)*r10*sj5*x444))+((r11*x445))+((r12*x447))+(((-1.0)*r10*x446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x444))+(((-1.0)*r21*x445))+(((-1.0)*r22*x447))+((r20*x446))+((cj5*r21*x444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x444))+(((-1.0)*r10*sj5*x444))+((r11*x445))+((r12*x447))+(((-1.0)*r10*x446))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x444))+(((-1.0)*r21*x445))+(((-1.0)*r22*x447))+((r20*x446))+((cj5*r21*x444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+(((-1.0)*cj5*r11*x444))+(((-1.0)*r10*sj5*x444))+((r11*x445))+((r12*x447))+(((-1.0)*r10*x446))), ((((2.80033604032484)*pz))+((r20*sj5*x444))+(((-1.0)*r21*x445))+(((-1.0)*r22*x447))+((r20*x446))+((cj5*r21*x444))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x448=((0.27155)*sj5);
IkReal x449=((0.07155)*cj5);
IkReal x450=(cj3*cj4);
IkReal x451=((0.27155)*sj4);
IkReal x452=((0.27155)*cj4);
IkReal x453=((0.07155)*sj5);
IkReal x454=(cj5*r21);
IkReal x455=(r10*x449);
IkReal x456=((0.3571)*(IKsin(j1)));
IkReal x457=(r11*x453);
IkReal x458=(r20*x449);
IkReal x459=(r21*x453);
IkReal x460=((0.3571)*(IKcos(j1)));
IkReal x461=((0.27155)*cj5*r11);
IkReal x462=((0.27155)*cj5*sj3);
IkReal x463=(x459+x460);
IkReal x464=(x456+x455+py);
evalcond[0]=(((cj5*r11*x451))+((r10*sj4*x448))+(((-1.0)*x457))+(((-1.0)*r12*x452))+x464);
evalcond[1]=((((-1.0)*x458))+(((-1.0)*pz))+x463+(((-1.0)*x451*x454))+((r22*x452))+(((-1.0)*r20*sj4*x448)));
evalcond[2]=((((-1.0)*r20*x448*x450))+(((-1.0)*x457))+x464+((r21*sj3*x448))+(((-1.0)*r20*x462))+(((-0.27155)*x450*x454))+(((-1.0)*cj3*r22*x451)));
evalcond[3]=((((-1.0)*r11*sj3*x448))+(((-1.0)*x463))+((cj3*r12*x451))+x458+pz+((x450*x461))+((r10*x448*x450))+((r10*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x465=(cj4*sj1);
IkReal x466=(cj5*sj4);
IkReal x467=((1.0)*sj1);
IkReal x468=(sj4*sj5);
IkReal x469=((1.0)*cj1*cj4);
if( IKabs((((cj1*r20*x468))+(((-1.0)*r11*x466*x467))+(((-1.0)*r10*x467*x468))+((r12*x465))+(((-1.0)*r22*x469))+((cj1*r21*x466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x465))+((r20*sj1*x468))+((cj1*r10*x468))+((cj1*r11*x466))+(((-1.0)*r12*x469))+((r21*sj1*x466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x468))+(((-1.0)*r11*x466*x467))+(((-1.0)*r10*x467*x468))+((r12*x465))+(((-1.0)*r22*x469))+((cj1*r21*x466))))+IKsqr(((((-1.0)*r22*x465))+((r20*sj1*x468))+((cj1*r10*x468))+((cj1*r11*x466))+(((-1.0)*r12*x469))+((r21*sj1*x466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x468))+(((-1.0)*r11*x466*x467))+(((-1.0)*r10*x467*x468))+((r12*x465))+(((-1.0)*r22*x469))+((cj1*r21*x466))), ((((-1.0)*r22*x465))+((r20*sj1*x468))+((cj1*r10*x468))+((cj1*r11*x466))+(((-1.0)*r12*x469))+((r21*sj1*x466))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x470=IKcos(j2);
IkReal x471=IKsin(j2);
IkReal x472=((1.0)*cj4);
IkReal x473=((0.07155)*cj5);
IkReal x474=(cj5*sj4);
IkReal x475=(cj3*cj4);
IkReal x476=(r20*sj5);
IkReal x477=(r10*sj5);
IkReal x478=((0.07155)*sj5);
IkReal x479=(cj5*sj3);
IkReal x480=(cj3*sj4);
IkReal x481=(cj1*x470);
IkReal x482=((1.0)*sj3*sj5);
IkReal x483=(sj1*x470);
IkReal x484=((0.27155)*x471);
IkReal x485=(sj1*x471);
IkReal x486=((1.0)*x483);
IkReal x487=((1.0)*cj1*x471);
IkReal x488=(x487+x486);
evalcond[0]=(((sj4*x477))+(((-1.0)*r12*x472))+(((-1.0)*x481))+((r11*x474))+x485);
evalcond[1]=(((r21*x474))+(((-1.0)*x488))+((sj4*x476))+(((-1.0)*r22*x472)));
evalcond[2]=(((r21*x478))+(((-1.0)*cj1*x484))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x483))+(((-1.0)*r20*x473)));
evalcond[3]=(((sj1*x484))+((r11*x478))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-0.27155)*x481))+(((-1.0)*r10*x473)));
evalcond[4]=(((r20*x479))+(((-1.0)*x485))+((cj5*r21*x475))+((r22*x480))+x481+(((-1.0)*r21*x482))+((x475*x476)));
evalcond[5]=(((r10*x479))+(((-1.0)*x488))+((r12*x480))+((cj5*r11*x475))+((x475*x477))+(((-1.0)*r11*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x489=((1.0)*cj5);
IkReal x490=((1.0)*sj4);
CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x489)))),IkReal(((((-1.0)*cj4*r11*x489))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*r12*x490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x491.valid){
continue;
}
CheckValue<IkReal> x492=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x490))+(((-1.0)*r21*sj4*x489)))),-1);
if(!x492.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x491.value)+(((1.5707963267949)*(x492.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x493=IKsin(j3);
IkReal x494=IKcos(j3);
IkReal x495=(cj4*r00);
IkReal x496=(sj5*x493);
IkReal x497=(sj4*x493);
IkReal x498=(sj5*x494);
IkReal x499=(cj4*cj5*x493);
IkReal x500=((1.0)*cj5*x494);
evalcond[0]=((((-1.0)*r20*x500))+((r22*x497))+((cj4*r20*x496))+((r21*x498))+((r21*x499)));
evalcond[1]=(((cj4*r10*x496))+((r11*x499))+((r11*x498))+(((-1.0)*r10*x500))+((r12*x497)));
evalcond[2]=(((x495*x498))+((r02*sj4*x494))+(((-1.0)*r01*x496))+((cj4*cj5*r01*x494))+((cj5*r00*x493)));
evalcond[3]=((-1.0)+((r02*x497))+((x495*x496))+(((-1.0)*r00*x500))+((r01*x498))+((r01*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x501=((0.76043125175021)*sj4);
IkReal x502=((0.200364043685242)*sj5);
IkReal x503=((0.200364043685242)*cj5);
IkReal x504=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+(((-1.0)*r10*sj5*x501))+((r12*x504))+(((-1.0)*r10*x503))+((r11*x502))+(((-1.0)*cj5*r11*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x503))+((r20*sj5*x501))+(((2.80033604032484)*pz))+(((-1.0)*r22*x504))+((cj5*r21*x501))+(((-1.0)*r21*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+(((-1.0)*r10*sj5*x501))+((r12*x504))+(((-1.0)*r10*x503))+((r11*x502))+(((-1.0)*cj5*r11*x501))))+IKsqr((((r20*x503))+((r20*sj5*x501))+(((2.80033604032484)*pz))+(((-1.0)*r22*x504))+((cj5*r21*x501))+(((-1.0)*r21*x502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+(((-1.0)*r10*sj5*x501))+((r12*x504))+(((-1.0)*r10*x503))+((r11*x502))+(((-1.0)*cj5*r11*x501))), (((r20*x503))+((r20*sj5*x501))+(((2.80033604032484)*pz))+(((-1.0)*r22*x504))+((cj5*r21*x501))+(((-1.0)*r21*x502))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x505=((0.27155)*sj5);
IkReal x506=((0.07155)*cj5);
IkReal x507=(cj3*cj4);
IkReal x508=((0.27155)*sj4);
IkReal x509=((0.27155)*cj4);
IkReal x510=((0.07155)*sj5);
IkReal x511=(cj5*r21);
IkReal x512=(r10*x506);
IkReal x513=((0.3571)*(IKsin(j1)));
IkReal x514=(r11*x510);
IkReal x515=(r20*x506);
IkReal x516=(r21*x510);
IkReal x517=((0.3571)*(IKcos(j1)));
IkReal x518=((0.27155)*cj5*r11);
IkReal x519=((0.27155)*cj5*sj3);
IkReal x520=(x517+x516);
IkReal x521=(py+x513+x512);
evalcond[0]=(((cj5*r11*x508))+((r10*sj4*x505))+x521+(((-1.0)*x514))+(((-1.0)*r12*x509)));
evalcond[1]=((((-1.0)*r20*sj4*x505))+((r22*x509))+(((-1.0)*pz))+x520+(((-1.0)*x515))+(((-1.0)*x508*x511)));
evalcond[2]=(((r21*sj3*x505))+(((-1.0)*cj3*r22*x508))+(((-1.0)*r20*x505*x507))+(((-0.27155)*x507*x511))+(((-1.0)*r20*x519))+x521+(((-1.0)*x514)));
evalcond[3]=((((-1.0)*r11*sj3*x505))+((x507*x518))+((r10*x505*x507))+(((-1.0)*x520))+((r10*x519))+pz+x515+((cj3*r12*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x522=(cj4*sj1);
IkReal x523=(cj5*sj4);
IkReal x524=((1.0)*sj1);
IkReal x525=(sj4*sj5);
IkReal x526=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r11*x523*x524))+((cj1*r20*x525))+((cj1*r21*x523))+((r12*x522))+(((-1.0)*r10*x524*x525))+(((-1.0)*r22*x526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x525))+((cj1*r11*x523))+((r21*sj1*x523))+(((-1.0)*r22*x522))+(((-1.0)*r12*x526))+((cj1*r10*x525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x523*x524))+((cj1*r20*x525))+((cj1*r21*x523))+((r12*x522))+(((-1.0)*r10*x524*x525))+(((-1.0)*r22*x526))))+IKsqr((((r20*sj1*x525))+((cj1*r11*x523))+((r21*sj1*x523))+(((-1.0)*r22*x522))+(((-1.0)*r12*x526))+((cj1*r10*x525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x523*x524))+((cj1*r20*x525))+((cj1*r21*x523))+((r12*x522))+(((-1.0)*r10*x524*x525))+(((-1.0)*r22*x526))), (((r20*sj1*x525))+((cj1*r11*x523))+((r21*sj1*x523))+(((-1.0)*r22*x522))+(((-1.0)*r12*x526))+((cj1*r10*x525))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x527=IKcos(j2);
IkReal x528=IKsin(j2);
IkReal x529=((1.0)*cj4);
IkReal x530=((0.07155)*cj5);
IkReal x531=(cj5*sj4);
IkReal x532=(cj3*cj4);
IkReal x533=(r20*sj5);
IkReal x534=(r10*sj5);
IkReal x535=((0.07155)*sj5);
IkReal x536=(cj5*sj3);
IkReal x537=(cj3*sj4);
IkReal x538=(cj1*x527);
IkReal x539=((1.0)*sj3*sj5);
IkReal x540=(sj1*x527);
IkReal x541=((0.27155)*x528);
IkReal x542=(sj1*x528);
IkReal x543=((1.0)*x540);
IkReal x544=((1.0)*cj1*x528);
IkReal x545=(x544+x543);
evalcond[0]=((((-1.0)*x538))+((r11*x531))+x542+((sj4*x534))+(((-1.0)*r12*x529)));
evalcond[1]=((((-1.0)*x545))+((sj4*x533))+(((-1.0)*r22*x529))+((r21*x531)));
evalcond[2]=((((-0.27155)*x540))+(((-1.0)*cj1*x541))+(((0.3571)*cj1))+(((-1.0)*r20*x530))+(((-1.0)*pz))+((r21*x535)));
evalcond[3]=((((-0.27155)*x538))+((sj1*x541))+((r11*x535))+(((-1.0)*r10*x530))+(((-1.0)*py))+(((-0.3571)*sj1)));
evalcond[4]=(((r20*x536))+(((-1.0)*x542))+(((-1.0)*r21*x539))+((cj5*r21*x532))+((r22*x537))+x538+((x532*x533)));
evalcond[5]=(((r12*x537))+(((-1.0)*x545))+((r10*x536))+((cj5*r11*x532))+((x532*x534))+(((-1.0)*r11*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x546=((1.0)*r20);
IkReal x547=((1.0)*cj4);
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x546)))),IkReal(((((-1.0)*cj4*sj5*x546))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x547)))),-1);
if(!x549.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x548.value)+(((1.5707963267949)*(x549.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x550=IKsin(j3);
IkReal x551=IKcos(j3);
IkReal x552=(cj4*r00);
IkReal x553=(sj5*x550);
IkReal x554=(sj4*x550);
IkReal x555=(sj5*x551);
IkReal x556=(cj4*cj5*x550);
IkReal x557=((1.0)*cj5*x551);
evalcond[0]=((((-1.0)*r20*x557))+((r22*x554))+((cj4*r20*x553))+((r21*x556))+((r21*x555)));
evalcond[1]=(((cj4*r10*x553))+(((-1.0)*r10*x557))+((r12*x554))+((r11*x555))+((r11*x556)));
evalcond[2]=(((cj5*r00*x550))+((r02*sj4*x551))+((cj4*cj5*r01*x551))+((x552*x555))+(((-1.0)*r01*x553)));
evalcond[3]=((-1.0)+((r02*x554))+(((-1.0)*r00*x557))+((r01*x556))+((r01*x555))+((x552*x553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x558=((0.76043125175021)*sj4);
IkReal x559=((0.200364043685242)*sj5);
IkReal x560=((0.200364043685242)*cj5);
IkReal x561=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r11*x559))+(((-1.0)*r10*x560))+((r12*x561))+(((-1.0)*cj5*r11*x558))+(((-1.0)*r10*sj5*x558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+(((-1.0)*r21*x559))+((cj5*r21*x558))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r11*x559))+(((-1.0)*r10*x560))+((r12*x561))+(((-1.0)*cj5*r11*x558))+(((-1.0)*r10*sj5*x558))))+IKsqr(((((2.80033604032484)*pz))+(((-1.0)*r21*x559))+((cj5*r21*x558))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x558))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r11*x559))+(((-1.0)*r10*x560))+((r12*x561))+(((-1.0)*cj5*r11*x558))+(((-1.0)*r10*sj5*x558))), ((((2.80033604032484)*pz))+(((-1.0)*r21*x559))+((cj5*r21*x558))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x558))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x562=((0.27155)*sj5);
IkReal x563=((0.07155)*cj5);
IkReal x564=(cj3*cj4);
IkReal x565=((0.27155)*sj4);
IkReal x566=((0.27155)*cj4);
IkReal x567=((0.07155)*sj5);
IkReal x568=(cj5*r21);
IkReal x569=(r10*x563);
IkReal x570=((0.3571)*(IKsin(j1)));
IkReal x571=(r11*x567);
IkReal x572=(r20*x563);
IkReal x573=(r21*x567);
IkReal x574=((0.3571)*(IKcos(j1)));
IkReal x575=((0.27155)*cj5*r11);
IkReal x576=((0.27155)*cj5*sj3);
IkReal x577=(x574+x573);
IkReal x578=(py+x570+x569);
evalcond[0]=(((cj5*r11*x565))+((r10*sj4*x562))+(((-1.0)*x571))+x578+(((-1.0)*r12*x566)));
evalcond[1]=(((r22*x566))+(((-1.0)*r20*sj4*x562))+(((-1.0)*pz))+(((-1.0)*x572))+x577+(((-1.0)*x565*x568)));
evalcond[2]=((((-1.0)*cj3*r22*x565))+(((-1.0)*r20*x562*x564))+(((-1.0)*x571))+x578+(((-0.27155)*x564*x568))+(((-1.0)*r20*x576))+((r21*sj3*x562)));
evalcond[3]=((((-1.0)*r11*sj3*x562))+pz+(((-1.0)*x577))+((x564*x575))+x572+((r10*x576))+((cj3*r12*x565))+((r10*x562*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x579=(cj4*sj1);
IkReal x580=(cj5*sj4);
IkReal x581=((1.0)*sj1);
IkReal x582=(sj4*sj5);
IkReal x583=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x583))+((r12*x579))+((cj1*r20*x582))+((cj1*r21*x580))+(((-1.0)*r11*x580*x581))+(((-1.0)*r10*x581*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x579))+((r21*sj1*x580))+((cj1*r10*x582))+((cj1*r11*x580))+(((-1.0)*r12*x583))+((r20*sj1*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x583))+((r12*x579))+((cj1*r20*x582))+((cj1*r21*x580))+(((-1.0)*r11*x580*x581))+(((-1.0)*r10*x581*x582))))+IKsqr(((((-1.0)*r22*x579))+((r21*sj1*x580))+((cj1*r10*x582))+((cj1*r11*x580))+(((-1.0)*r12*x583))+((r20*sj1*x582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x583))+((r12*x579))+((cj1*r20*x582))+((cj1*r21*x580))+(((-1.0)*r11*x580*x581))+(((-1.0)*r10*x581*x582))), ((((-1.0)*r22*x579))+((r21*sj1*x580))+((cj1*r10*x582))+((cj1*r11*x580))+(((-1.0)*r12*x583))+((r20*sj1*x582))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x584=IKcos(j2);
IkReal x585=IKsin(j2);
IkReal x586=((1.0)*cj4);
IkReal x587=((0.07155)*cj5);
IkReal x588=(cj5*sj4);
IkReal x589=(cj3*cj4);
IkReal x590=(r20*sj5);
IkReal x591=(r10*sj5);
IkReal x592=((0.07155)*sj5);
IkReal x593=(cj5*sj3);
IkReal x594=(cj3*sj4);
IkReal x595=(cj1*x584);
IkReal x596=((1.0)*sj3*sj5);
IkReal x597=(sj1*x584);
IkReal x598=((0.27155)*x585);
IkReal x599=(sj1*x585);
IkReal x600=((1.0)*x597);
IkReal x601=((1.0)*cj1*x585);
IkReal x602=(x601+x600);
evalcond[0]=(((r11*x588))+(((-1.0)*x595))+((sj4*x591))+x599+(((-1.0)*r12*x586)));
evalcond[1]=((((-1.0)*r22*x586))+((sj4*x590))+(((-1.0)*x602))+((r21*x588)));
evalcond[2]=((((-0.27155)*x597))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x592))+(((-1.0)*cj1*x598))+(((-1.0)*r20*x587)));
evalcond[3]=((((-0.27155)*x595))+(((-1.0)*py))+(((-0.3571)*sj1))+((r11*x592))+((sj1*x598))+(((-1.0)*r10*x587)));
evalcond[4]=((((-1.0)*r21*x596))+((r22*x594))+(((-1.0)*x599))+((cj5*r21*x589))+x595+((r20*x593))+((x589*x590)));
evalcond[5]=(((cj5*r11*x589))+(((-1.0)*r11*x596))+((r12*x594))+(((-1.0)*x602))+((r10*x593))+((x589*x591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x603=((1.0)*cj4);
IkReal x604=(((cj5*r21*sj4))+(((-1.0)*r22*x603))+((r20*sj4*sj5)));
j3eval[0]=x604;
j3eval[1]=IKsign(x604);
j3eval[2]=((IKabs(((((-1.0)*cj5*r01*x603))+(((-1.0)*r00*sj5*x603))+(((-1.0)*r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x605=((1.0)*sj5);
IkReal x606=((1.0)*cj5);
IkReal x607=((((-1.0)*r00*sj4*x605))+(((-1.0)*r01*sj4*x606))+((cj4*r02)));
j3eval[0]=x607;
j3eval[1]=IKsign(x607);
j3eval[2]=((IKabs(((((-1.0)*r20*x606))+((r21*sj5)))))+(IKabs(((((-1.0)*cj4*r20*x605))+(((-1.0)*cj4*r21*x606))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x608=cj4*cj4;
IkReal x609=r11*r11;
IkReal x610=cj5*cj5;
IkReal x611=r10*r10;
IkReal x612=r12*r12;
IkReal x613=(cj5*r11);
IkReal x614=((1.0)*x608);
IkReal x615=((2.0)*r10*sj5);
IkReal x616=(cj4*r12*sj4);
IkReal x617=(x610*x611);
IkReal x618=(x609*x610);
IkReal x619=((((-1.0)*x612*x614))+(((-1.0)*x614*x617))+((x608*x611))+((x608*x618))+((x608*x613*x615))+(((2.0)*x613*x616))+(((-1.0)*x618))+x609+x617+x612+((x615*x616))+(((-1.0)*x613*x615)));
j3eval[0]=x619;
j3eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((r12*sj4))+((cj4*r10*sj5))+((cj4*x613))))));
j3eval[2]=IKsign(x619);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x620=cj4*cj4;
IkReal x621=r11*r11;
IkReal x622=cj5*cj5;
IkReal x623=r10*r10;
IkReal x624=r12*r12;
IkReal x625=(cj5*r11);
IkReal x626=((2.0)*r10*sj5);
IkReal x627=(cj4*r12*sj4);
IkReal x628=((1.0)*x620);
IkReal x629=(x622*x623);
IkReal x630=(x621*x622);
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign(((((-1.0)*x628*x629))+(((2.0)*x625*x627))+(((-1.0)*x624*x628))+(((-1.0)*x625*x626))+x624+x621+x629+(((-1.0)*x630))+((x620*x625*x626))+((x620*x630))+((x626*x627))+((x620*x623)))),-1);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal((((cj4*x625))+((r12*sj4))+((cj4*r10*sj5)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x631.value)))+(x632.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x633=IKsin(j3);
IkReal x634=IKcos(j3);
IkReal x635=(cj4*r10);
IkReal x636=(cj4*r11);
IkReal x637=(cj5*x633);
IkReal x638=(sj5*x633);
IkReal x639=(sj4*x633);
IkReal x640=(sj5*x634);
IkReal x641=((1.0)*cj5*x634);
evalcond[0]=(((cj4*r21*x637))+((cj4*r20*x638))+((r22*x639))+((r21*x640))+(((-1.0)*r20*x641)));
evalcond[1]=(((r02*x639))+(((-1.0)*r00*x641))+((cj4*r00*x638))+((cj4*r01*x637))+((r01*x640)));
evalcond[2]=(((x635*x640))+(((-1.0)*r11*x638))+((r10*x637))+((r12*sj4*x634))+((cj5*x634*x636)));
evalcond[3]=((-1.0)+((x635*x638))+((x636*x637))+(((-1.0)*r10*x641))+((r12*x639))+((r11*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x642=((0.76043125175021)*sj4);
IkReal x643=((0.76043125175021)*cj4);
IkReal x644=((0.200364043685242)*sj5);
IkReal x645=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+(((-1.0)*r01*x644))+((r00*sj5*x642))+(((-1.0)*r02*x643))+((cj5*r01*x642))+((r00*x645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x645))+(((2.80033604032484)*pz))+((cj5*r21*x642))+(((-1.0)*r22*x643))+(((-1.0)*r21*x644))+((r20*sj5*x642)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+(((-1.0)*r01*x644))+((r00*sj5*x642))+(((-1.0)*r02*x643))+((cj5*r01*x642))+((r00*x645))))+IKsqr((((r20*x645))+(((2.80033604032484)*pz))+((cj5*r21*x642))+(((-1.0)*r22*x643))+(((-1.0)*r21*x644))+((r20*sj5*x642))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+(((-1.0)*r01*x644))+((r00*sj5*x642))+(((-1.0)*r02*x643))+((cj5*r01*x642))+((r00*x645))), (((r20*x645))+(((2.80033604032484)*pz))+((cj5*r21*x642))+(((-1.0)*r22*x643))+(((-1.0)*r21*x644))+((r20*sj5*x642))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x646=((1.0)*pz);
IkReal x647=((0.27155)*sj4);
IkReal x648=(r00*sj5);
IkReal x649=((0.07155)*sj5);
IkReal x650=((0.27155)*cj4);
IkReal x651=(cj5*r20);
IkReal x652=(cj3*cj5);
IkReal x653=((0.27155)*sj3);
IkReal x654=(r20*sj5);
IkReal x655=(cj5*r00);
IkReal x656=((0.07155)*x655);
IkReal x657=(r01*x649);
IkReal x658=((0.3571)*(IKsin(j1)));
IkReal x659=(r21*x649);
IkReal x660=((0.3571)*(IKcos(j1)));
IkReal x661=((0.07155)*x651);
IkReal x662=(sj5*x653);
IkReal x663=(x646+x661);
IkReal x664=(x657+x658);
IkReal x665=(x659+x660);
evalcond[0]=((((-1.0)*x647*x654))+((r22*x650))+(((-1.0)*x663))+x665+(((-1.0)*cj5*r21*x647)));
evalcond[1]=((((-1.0)*cj5*r01*x647))+(((-1.0)*x647*x648))+((r02*x650))+(((-1.0)*x656))+(((-1.0)*px))+x664);
evalcond[2]=((((-1.0)*r21*x662))+((cj3*x650*x654))+((r21*x650*x652))+((cj3*r22*x647))+((x651*x653))+(((-1.0)*x664))+px+x656);
evalcond[3]=(((cj3*r02*x647))+(((-1.0)*r01*x662))+((x653*x655))+(((-1.0)*x663))+((cj3*x648*x650))+x665+((r01*x650*x652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x666=(cj5*sj4);
IkReal x667=(cj4*r02);
IkReal x668=((1.0)*cj1);
IkReal x669=(sj4*sj5);
IkReal x670=((1.0)*cj4*r22);
IkReal x671=(sj1*x669);
if( IKabs((((r00*x671))+((r01*sj1*x666))+((cj1*r20*x669))+(((-1.0)*cj4*r22*x668))+((cj1*r21*x666))+(((-1.0)*sj1*x667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x666))+(((-1.0)*r00*x668*x669))+((r20*x671))+(((-1.0)*r01*x666*x668))+(((-1.0)*sj1*x670))+((cj1*x667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x671))+((r01*sj1*x666))+((cj1*r20*x669))+(((-1.0)*cj4*r22*x668))+((cj1*r21*x666))+(((-1.0)*sj1*x667))))+IKsqr((((r21*sj1*x666))+(((-1.0)*r00*x668*x669))+((r20*x671))+(((-1.0)*r01*x666*x668))+(((-1.0)*sj1*x670))+((cj1*x667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x671))+((r01*sj1*x666))+((cj1*r20*x669))+(((-1.0)*cj4*r22*x668))+((cj1*r21*x666))+(((-1.0)*sj1*x667))), (((r21*sj1*x666))+(((-1.0)*r00*x668*x669))+((r20*x671))+(((-1.0)*r01*x666*x668))+(((-1.0)*sj1*x670))+((cj1*x667))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x672=IKcos(j2);
IkReal x673=IKsin(j2);
IkReal x674=(cj3*sj4);
IkReal x675=((1.0)*cj4);
IkReal x676=(r00*sj5);
IkReal x677=(cj3*cj4);
IkReal x678=(cj5*sj4);
IkReal x679=((0.07155)*sj5);
IkReal x680=(cj5*r20);
IkReal x681=(cj5*r00);
IkReal x682=(r20*sj5);
IkReal x683=(cj1*x672);
IkReal x684=(sj1*x672);
IkReal x685=(cj1*x673);
IkReal x686=((1.0)*sj3*sj5);
IkReal x687=(sj1*x673);
IkReal x688=((1.0)*x687);
evalcond[0]=((((-1.0)*r02*x675))+((r01*x678))+(((-1.0)*x688))+x683+((sj4*x676)));
evalcond[1]=(((r21*x678))+(((-1.0)*r22*x675))+(((-1.0)*x685))+(((-1.0)*x684))+((sj4*x682)));
evalcond[2]=(((r21*x679))+(((-0.27155)*x685))+(((-0.27155)*x684))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x680)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x687))+((r01*x679))+(((-1.0)*px))+(((0.27155)*x683))+(((-0.07155)*x681)));
evalcond[4]=(((r02*x674))+((x676*x677))+((sj3*x681))+(((-1.0)*r01*x686))+x685+x684+((cj5*r01*x677)));
evalcond[5]=((((-1.0)*x688))+((r22*x674))+((sj3*x680))+((x677*x682))+(((-1.0)*r21*x686))+x683+((cj5*r21*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x689=((1.0)*sj5);
IkReal x690=((1.0)*cj5);
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x689))+(((-1.0)*r01*sj4*x690))+((cj4*r02)))),-1);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x690)))),IkReal(((((-1.0)*cj4*r21*x690))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x691.value)))+(x692.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x693=IKsin(j3);
IkReal x694=IKcos(j3);
IkReal x695=(cj4*r10);
IkReal x696=(cj4*r11);
IkReal x697=(cj5*x693);
IkReal x698=(sj5*x693);
IkReal x699=(sj4*x693);
IkReal x700=(sj5*x694);
IkReal x701=((1.0)*cj5*x694);
evalcond[0]=(((cj4*r21*x697))+((cj4*r20*x698))+((r22*x699))+(((-1.0)*r20*x701))+((r21*x700)));
evalcond[1]=(((r01*x700))+((r02*x699))+(((-1.0)*r00*x701))+((cj4*r00*x698))+((cj4*r01*x697)));
evalcond[2]=((((-1.0)*r11*x698))+((cj5*x694*x696))+((r12*sj4*x694))+((x695*x700))+((r10*x697)));
evalcond[3]=((-1.0)+((x695*x698))+((x696*x697))+((r12*x699))+(((-1.0)*r10*x701))+((r11*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x702=((0.76043125175021)*sj4);
IkReal x703=((0.76043125175021)*cj4);
IkReal x704=((0.200364043685242)*sj5);
IkReal x705=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r02*x703))+(((2.80033604032484)*px))+((r00*x705))+((r00*sj5*x702))+(((-1.0)*r01*x704))+((cj5*r01*x702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x702))+((cj5*r21*x702))+(((2.80033604032484)*pz))+((r20*x705))+(((-1.0)*r21*x704))+(((-1.0)*r22*x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x703))+(((2.80033604032484)*px))+((r00*x705))+((r00*sj5*x702))+(((-1.0)*r01*x704))+((cj5*r01*x702))))+IKsqr((((r20*sj5*x702))+((cj5*r21*x702))+(((2.80033604032484)*pz))+((r20*x705))+(((-1.0)*r21*x704))+(((-1.0)*r22*x703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x703))+(((2.80033604032484)*px))+((r00*x705))+((r00*sj5*x702))+(((-1.0)*r01*x704))+((cj5*r01*x702))), (((r20*sj5*x702))+((cj5*r21*x702))+(((2.80033604032484)*pz))+((r20*x705))+(((-1.0)*r21*x704))+(((-1.0)*r22*x703))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x706=((1.0)*pz);
IkReal x707=((0.27155)*sj4);
IkReal x708=(r00*sj5);
IkReal x709=((0.07155)*sj5);
IkReal x710=((0.27155)*cj4);
IkReal x711=(cj5*r20);
IkReal x712=(cj3*cj5);
IkReal x713=((0.27155)*sj3);
IkReal x714=(r20*sj5);
IkReal x715=(cj5*r00);
IkReal x716=((0.07155)*x715);
IkReal x717=(r01*x709);
IkReal x718=((0.3571)*(IKsin(j1)));
IkReal x719=(r21*x709);
IkReal x720=((0.3571)*(IKcos(j1)));
IkReal x721=((0.07155)*x711);
IkReal x722=(sj5*x713);
IkReal x723=(x706+x721);
IkReal x724=(x718+x717);
IkReal x725=(x719+x720);
evalcond[0]=(((r22*x710))+(((-1.0)*x707*x714))+(((-1.0)*cj5*r21*x707))+(((-1.0)*x723))+x725);
evalcond[1]=((((-1.0)*x707*x708))+(((-1.0)*px))+(((-1.0)*x716))+x724+(((-1.0)*cj5*r01*x707))+((r02*x710)));
evalcond[2]=(((r21*x710*x712))+((x711*x713))+((cj3*r22*x707))+(((-1.0)*x724))+((cj3*x710*x714))+px+(((-1.0)*r21*x722))+x716);
evalcond[3]=(((r01*x710*x712))+(((-1.0)*x723))+((cj3*r02*x707))+((cj3*x708*x710))+x725+(((-1.0)*r01*x722))+((x713*x715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x726=(cj5*sj4);
IkReal x727=(cj4*r02);
IkReal x728=((1.0)*cj1);
IkReal x729=(sj4*sj5);
IkReal x730=((1.0)*cj4*r22);
IkReal x731=(sj1*x729);
if( IKabs(((((-1.0)*cj4*r22*x728))+((r00*x731))+((cj1*r20*x729))+(((-1.0)*sj1*x727))+((cj1*r21*x726))+((r01*sj1*x726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x727))+((r21*sj1*x726))+((r20*x731))+(((-1.0)*r01*x726*x728))+(((-1.0)*sj1*x730))+(((-1.0)*r00*x728*x729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x728))+((r00*x731))+((cj1*r20*x729))+(((-1.0)*sj1*x727))+((cj1*r21*x726))+((r01*sj1*x726))))+IKsqr((((cj1*x727))+((r21*sj1*x726))+((r20*x731))+(((-1.0)*r01*x726*x728))+(((-1.0)*sj1*x730))+(((-1.0)*r00*x728*x729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x728))+((r00*x731))+((cj1*r20*x729))+(((-1.0)*sj1*x727))+((cj1*r21*x726))+((r01*sj1*x726))), (((cj1*x727))+((r21*sj1*x726))+((r20*x731))+(((-1.0)*r01*x726*x728))+(((-1.0)*sj1*x730))+(((-1.0)*r00*x728*x729))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x732=IKcos(j2);
IkReal x733=IKsin(j2);
IkReal x734=(cj3*sj4);
IkReal x735=((1.0)*cj4);
IkReal x736=(r00*sj5);
IkReal x737=(cj3*cj4);
IkReal x738=(cj5*sj4);
IkReal x739=((0.07155)*sj5);
IkReal x740=(cj5*r20);
IkReal x741=(cj5*r00);
IkReal x742=(r20*sj5);
IkReal x743=(cj1*x732);
IkReal x744=(sj1*x732);
IkReal x745=(cj1*x733);
IkReal x746=((1.0)*sj3*sj5);
IkReal x747=(sj1*x733);
IkReal x748=((1.0)*x747);
evalcond[0]=((((-1.0)*r02*x735))+((r01*x738))+x743+((sj4*x736))+(((-1.0)*x748)));
evalcond[1]=(((sj4*x742))+(((-1.0)*x744))+(((-1.0)*x745))+((r21*x738))+(((-1.0)*r22*x735)));
evalcond[2]=((((-0.27155)*x745))+(((-0.27155)*x744))+(((0.3571)*cj1))+(((-0.07155)*x740))+(((-1.0)*pz))+((r21*x739)));
evalcond[3]=((((-0.27155)*x747))+(((0.3571)*sj1))+(((0.27155)*x743))+(((-0.07155)*x741))+((r01*x739))+(((-1.0)*px)));
evalcond[4]=(((x736*x737))+((sj3*x741))+(((-1.0)*r01*x746))+((cj5*r01*x737))+((r02*x734))+x744+x745);
evalcond[5]=((((-1.0)*r21*x746))+((sj3*x740))+((x737*x742))+x743+((r22*x734))+(((-1.0)*x748))+((cj5*r21*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x749=((1.0)*cj4);
CheckValue<IkReal> x750=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*r22*x749))+((r20*sj4*sj5)))),-1);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x749))+(((-1.0)*cj5*r01*x749))+(((-1.0)*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x750.value)))+(x751.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x752=IKsin(j3);
IkReal x753=IKcos(j3);
IkReal x754=(cj4*r10);
IkReal x755=(cj4*r11);
IkReal x756=(cj5*x752);
IkReal x757=(sj5*x752);
IkReal x758=(sj4*x752);
IkReal x759=(sj5*x753);
IkReal x760=((1.0)*cj5*x753);
evalcond[0]=(((cj4*r21*x756))+((cj4*r20*x757))+((r22*x758))+(((-1.0)*r20*x760))+((r21*x759)));
evalcond[1]=((((-1.0)*r00*x760))+((cj4*r00*x757))+((r02*x758))+((cj4*r01*x756))+((r01*x759)));
evalcond[2]=((((-1.0)*r11*x757))+((r10*x756))+((cj5*x753*x755))+((r12*sj4*x753))+((x754*x759)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x760))+((r12*x758))+((r11*x759))+((x755*x756))+((x754*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x761=((0.76043125175021)*sj4);
IkReal x762=((0.76043125175021)*cj4);
IkReal x763=((0.200364043685242)*sj5);
IkReal x764=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r01*x763))+((r00*sj5*x761))+(((2.80033604032484)*px))+(((-1.0)*r02*x762))+((cj5*r01*x761))+((r00*x764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x761))+(((2.80033604032484)*pz))+((r20*x764))+((r20*sj5*x761))+(((-1.0)*r21*x763))+(((-1.0)*r22*x762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x763))+((r00*sj5*x761))+(((2.80033604032484)*px))+(((-1.0)*r02*x762))+((cj5*r01*x761))+((r00*x764))))+IKsqr((((cj5*r21*x761))+(((2.80033604032484)*pz))+((r20*x764))+((r20*sj5*x761))+(((-1.0)*r21*x763))+(((-1.0)*r22*x762))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x763))+((r00*sj5*x761))+(((2.80033604032484)*px))+(((-1.0)*r02*x762))+((cj5*r01*x761))+((r00*x764))), (((cj5*r21*x761))+(((2.80033604032484)*pz))+((r20*x764))+((r20*sj5*x761))+(((-1.0)*r21*x763))+(((-1.0)*r22*x762))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x765=((1.0)*pz);
IkReal x766=((0.27155)*sj4);
IkReal x767=(r00*sj5);
IkReal x768=((0.07155)*sj5);
IkReal x769=((0.27155)*cj4);
IkReal x770=(cj5*r20);
IkReal x771=(cj3*cj5);
IkReal x772=((0.27155)*sj3);
IkReal x773=(r20*sj5);
IkReal x774=(cj5*r00);
IkReal x775=((0.07155)*x774);
IkReal x776=(r01*x768);
IkReal x777=((0.3571)*(IKsin(j1)));
IkReal x778=(r21*x768);
IkReal x779=((0.3571)*(IKcos(j1)));
IkReal x780=((0.07155)*x770);
IkReal x781=(sj5*x772);
IkReal x782=(x765+x780);
IkReal x783=(x777+x776);
IkReal x784=(x779+x778);
evalcond[0]=((((-1.0)*x782))+(((-1.0)*x766*x773))+((r22*x769))+x784+(((-1.0)*cj5*r21*x766)));
evalcond[1]=((((-1.0)*x766*x767))+(((-1.0)*px))+(((-1.0)*cj5*r01*x766))+((r02*x769))+x783+(((-1.0)*x775)));
evalcond[2]=(((x770*x772))+(((-1.0)*x783))+((cj3*r22*x766))+(((-1.0)*r21*x781))+px+x775+((cj3*x769*x773))+((r21*x769*x771)));
evalcond[3]=(((cj3*x767*x769))+(((-1.0)*r01*x781))+(((-1.0)*x782))+((x772*x774))+((r01*x769*x771))+((cj3*r02*x766))+x784);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x785=(cj5*sj4);
IkReal x786=(cj4*r02);
IkReal x787=((1.0)*cj1);
IkReal x788=(sj4*sj5);
IkReal x789=((1.0)*cj4*r22);
IkReal x790=(sj1*x788);
if( IKabs((((r00*x790))+((cj1*r20*x788))+(((-1.0)*cj4*r22*x787))+((cj1*r21*x785))+((r01*sj1*x785))+(((-1.0)*sj1*x786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x790))+((cj1*x786))+(((-1.0)*r00*x787*x788))+(((-1.0)*r01*x785*x787))+((r21*sj1*x785))+(((-1.0)*sj1*x789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x790))+((cj1*r20*x788))+(((-1.0)*cj4*r22*x787))+((cj1*r21*x785))+((r01*sj1*x785))+(((-1.0)*sj1*x786))))+IKsqr((((r20*x790))+((cj1*x786))+(((-1.0)*r00*x787*x788))+(((-1.0)*r01*x785*x787))+((r21*sj1*x785))+(((-1.0)*sj1*x789))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x790))+((cj1*r20*x788))+(((-1.0)*cj4*r22*x787))+((cj1*r21*x785))+((r01*sj1*x785))+(((-1.0)*sj1*x786))), (((r20*x790))+((cj1*x786))+(((-1.0)*r00*x787*x788))+(((-1.0)*r01*x785*x787))+((r21*sj1*x785))+(((-1.0)*sj1*x789))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x791=IKcos(j2);
IkReal x792=IKsin(j2);
IkReal x793=(cj3*sj4);
IkReal x794=((1.0)*cj4);
IkReal x795=(r00*sj5);
IkReal x796=(cj3*cj4);
IkReal x797=(cj5*sj4);
IkReal x798=((0.07155)*sj5);
IkReal x799=(cj5*r20);
IkReal x800=(cj5*r00);
IkReal x801=(r20*sj5);
IkReal x802=(cj1*x791);
IkReal x803=(sj1*x791);
IkReal x804=(cj1*x792);
IkReal x805=((1.0)*sj3*sj5);
IkReal x806=(sj1*x792);
IkReal x807=((1.0)*x806);
evalcond[0]=(((r01*x797))+((sj4*x795))+x802+(((-1.0)*x807))+(((-1.0)*r02*x794)));
evalcond[1]=((((-1.0)*x803))+(((-1.0)*x804))+((r21*x797))+((sj4*x801))+(((-1.0)*r22*x794)));
evalcond[2]=((((-0.27155)*x803))+(((-0.27155)*x804))+(((0.3571)*cj1))+(((-0.07155)*x799))+((r21*x798))+(((-1.0)*pz)));
evalcond[3]=(((r01*x798))+(((0.3571)*sj1))+(((-0.07155)*x800))+(((-0.27155)*x806))+(((-1.0)*px))+(((0.27155)*x802)));
evalcond[4]=(((sj3*x800))+(((-1.0)*r01*x805))+((r02*x793))+x804+x803+((cj5*r01*x796))+((x795*x796)));
evalcond[5]=((((-1.0)*r21*x805))+((r22*x793))+x802+(((-1.0)*x807))+((cj5*r21*x796))+((sj3*x799))+((x796*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x808=((1.0)*r20);
IkReal x809=((1.0)*cj4);
IkReal x810=(((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x809)));
j3eval[0]=x810;
j3eval[1]=IKsign(x810);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x808))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x809)))))+(IKabs(((((-1.0)*cj5*x808))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x811=((1.0)*sj4);
IkReal x812=((1.0)*r00);
IkReal x813=(((cj4*r22))+(((-1.0)*r20*sj5*x811))+(((-1.0)*cj5*r21*x811)));
j3eval[0]=x813;
j3eval[1]=IKsign(x813);
j3eval[2]=((IKabs((((r01*sj5))+(((-1.0)*cj5*x812)))))+(IKabs(((((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x811))+(((-1.0)*cj4*sj5*x812))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x814=cj4*cj4;
IkReal x815=cj5*cj5;
IkReal x816=r10*r10;
IkReal x817=r11*r11;
IkReal x818=r12*r12;
IkReal x819=(cj5*r10);
IkReal x820=((2.0)*sj5);
IkReal x821=(cj4*r10);
IkReal x822=(r12*sj4);
IkReal x823=((1.0)*x814);
IkReal x824=(cj4*cj5*r11);
IkReal x825=(x815*x817);
IkReal x826=(x815*x816);
IkReal x827=((((-1.0)*x816*x823))+(((-1.0)*x820*x821*x822))+((r11*x819*x820))+(((-1.0)*r11*x814*x819*x820))+(((-1.0)*x823*x825))+((x814*x826))+((x814*x818))+(((-1.0)*x817))+(((-1.0)*x818))+(((-1.0)*x826))+(((-2.0)*x822*x824))+x825);
j3eval[0]=x827;
j3eval[1]=((IKabs((((r11*sj5))+(((-1.0)*x819)))))+(IKabs((((sj5*x821))+x822+x824))));
j3eval[2]=IKsign(x827);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x828=cj4*cj4;
IkReal x829=cj5*cj5;
IkReal x830=r10*r10;
IkReal x831=r11*r11;
IkReal x832=r12*r12;
IkReal x833=(cj5*r10);
IkReal x834=((2.0)*sj5);
IkReal x835=(cj5*r11);
IkReal x836=((1.0)*x828);
IkReal x837=(cj4*r12*sj4);
IkReal x838=(x829*x831);
IkReal x839=(x829*x830);
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal((((cj4*x835))+((r12*sj4))+((cj4*r10*sj5)))),IkReal((((r11*sj5))+(((-1.0)*x833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x828*x833*x834))+((r11*x833*x834))+(((-1.0)*x836*x838))+(((-1.0)*x830*x836))+(((-2.0)*x835*x837))+(((-1.0)*x831))+(((-1.0)*x832))+(((-1.0)*x839))+x838+(((-1.0)*r10*x834*x837))+((x828*x832))+((x828*x839)))),-1);
if(!x841.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x840.value)+(((1.5707963267949)*(x841.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x842=IKsin(j3);
IkReal x843=IKcos(j3);
IkReal x844=(cj4*r10);
IkReal x845=(cj4*r11);
IkReal x846=(cj5*x842);
IkReal x847=(sj5*x842);
IkReal x848=(sj4*x842);
IkReal x849=(sj5*x843);
IkReal x850=((1.0)*cj5*x843);
evalcond[0]=(((r22*x848))+((r21*x849))+(((-1.0)*r20*x850))+((cj4*r21*x846))+((cj4*r20*x847)));
evalcond[1]=(((cj4*r01*x846))+(((-1.0)*r00*x850))+((r02*x848))+((r01*x849))+((cj4*r00*x847)));
evalcond[2]=(((r10*x846))+((r12*sj4*x843))+(((-1.0)*r11*x847))+((x844*x849))+((cj5*x843*x845)));
evalcond[3]=((1.0)+((r12*x848))+((x845*x846))+(((-1.0)*r10*x850))+((r11*x849))+((x844*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x851=((0.76043125175021)*sj4);
IkReal x852=((0.76043125175021)*cj4);
IkReal x853=((0.200364043685242)*sj5);
IkReal x854=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*r00*x854))+(((-1.0)*cj5*r01*x851))+(((-1.0)*r00*sj5*x851))+((r02*x852))+((r01*x853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x852))+((cj5*r21*x851))+(((2.80033604032484)*pz))+((r20*sj5*x851))+(((-1.0)*r21*x853))+((r20*x854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*r00*x854))+(((-1.0)*cj5*r01*x851))+(((-1.0)*r00*sj5*x851))+((r02*x852))+((r01*x853))))+IKsqr(((((-1.0)*r22*x852))+((cj5*r21*x851))+(((2.80033604032484)*pz))+((r20*sj5*x851))+(((-1.0)*r21*x853))+((r20*x854))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*r00*x854))+(((-1.0)*cj5*r01*x851))+(((-1.0)*r00*sj5*x851))+((r02*x852))+((r01*x853))), ((((-1.0)*r22*x852))+((cj5*r21*x851))+(((2.80033604032484)*pz))+((r20*sj5*x851))+(((-1.0)*r21*x853))+((r20*x854))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x855=((0.27155)*sj4);
IkReal x856=(r00*sj5);
IkReal x857=((0.07155)*sj5);
IkReal x858=((0.27155)*cj4);
IkReal x859=(cj5*r20);
IkReal x860=(cj3*cj5);
IkReal x861=((0.27155)*sj3);
IkReal x862=(r20*sj5);
IkReal x863=(cj5*r00);
IkReal x864=((0.07155)*x863);
IkReal x865=((0.3571)*(IKsin(j1)));
IkReal x866=(r01*x857);
IkReal x867=((0.07155)*x859);
IkReal x868=(r21*x857);
IkReal x869=((0.3571)*(IKcos(j1)));
IkReal x870=(sj5*x861);
IkReal x871=(x869+x868);
IkReal x872=(px+x865+x864);
evalcond[0]=((((-1.0)*x866))+((cj5*r01*x855))+((x855*x856))+(((-1.0)*r02*x858))+x872);
evalcond[1]=((((-1.0)*x867))+(((-1.0)*cj5*r21*x855))+(((-1.0)*pz))+((r22*x858))+x871+(((-1.0)*x855*x862)));
evalcond[2]=((((-1.0)*x866))+(((-1.0)*cj3*x858*x862))+((r21*x870))+(((-1.0)*r21*x858*x860))+(((-1.0)*cj3*r22*x855))+(((-1.0)*x859*x861))+x872);
evalcond[3]=(((cj3*x856*x858))+(((-1.0)*r01*x870))+((r01*x858*x860))+pz+((x861*x863))+x867+((cj3*r02*x855))+(((-1.0)*x871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x873=(cj4*r02);
IkReal x874=(cj5*sj4);
IkReal x875=((1.0)*sj1);
IkReal x876=(sj4*sj5);
IkReal x877=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x876))+(((-1.0)*r00*x875*x876))+((cj1*r21*x874))+(((-1.0)*r01*x874*x875))+((sj1*x873))+(((-1.0)*cj1*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r00*x876))+(((-1.0)*cj4*r22*x875))+((cj1*r01*x874))+(((-1.0)*cj1*x873))+((r20*sj1*x876))+((r21*sj1*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x876))+(((-1.0)*r00*x875*x876))+((cj1*r21*x874))+(((-1.0)*r01*x874*x875))+((sj1*x873))+(((-1.0)*cj1*x877))))+IKsqr((((cj1*r00*x876))+(((-1.0)*cj4*r22*x875))+((cj1*r01*x874))+(((-1.0)*cj1*x873))+((r20*sj1*x876))+((r21*sj1*x874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x876))+(((-1.0)*r00*x875*x876))+((cj1*r21*x874))+(((-1.0)*r01*x874*x875))+((sj1*x873))+(((-1.0)*cj1*x877))), (((cj1*r00*x876))+(((-1.0)*cj4*r22*x875))+((cj1*r01*x874))+(((-1.0)*cj1*x873))+((r20*sj1*x876))+((r21*sj1*x874))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x878=IKcos(j2);
IkReal x879=IKsin(j2);
IkReal x880=(cj3*sj4);
IkReal x881=((1.0)*cj4);
IkReal x882=(cj5*sj4);
IkReal x883=((0.07155)*sj5);
IkReal x884=(cj5*r20);
IkReal x885=(sj4*sj5);
IkReal x886=(cj5*r00);
IkReal x887=(cj1*x878);
IkReal x888=(cj3*cj4*sj5);
IkReal x889=(sj1*x878);
IkReal x890=((0.27155)*x879);
IkReal x891=((1.0)*sj3*sj5);
IkReal x892=(sj1*x879);
IkReal x893=(cj3*cj4*cj5);
IkReal x894=((1.0)*x889);
IkReal x895=((1.0)*cj1*x879);
IkReal x896=(x894+x895);
evalcond[0]=(((r00*x885))+((r01*x882))+(((-1.0)*x887))+x892+(((-1.0)*r02*x881)));
evalcond[1]=(((r20*x885))+(((-1.0)*x896))+(((-1.0)*r22*x881))+((r21*x882)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x889))+(((-0.07155)*x884))+((r21*x883))+(((-1.0)*cj1*x890)));
evalcond[3]=(((sj1*x890))+((r01*x883))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x887))+(((-0.07155)*x886)));
evalcond[4]=(((r20*x888))+(((-1.0)*x892))+((sj3*x884))+((r21*x893))+x887+((r22*x880))+(((-1.0)*r21*x891)));
evalcond[5]=(((r02*x880))+((r00*x888))+((r01*x893))+(((-1.0)*x896))+((sj3*x886))+(((-1.0)*r01*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x897=((1.0)*sj4);
IkReal x898=((1.0)*r00);
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x898)))),IkReal(((((-1.0)*cj4*sj5*x898))+(((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
CheckValue<IkReal> x900=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x897))+(((-1.0)*cj5*r21*x897)))),-1);
if(!x900.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x899.value)+(((1.5707963267949)*(x900.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x901=IKsin(j3);
IkReal x902=IKcos(j3);
IkReal x903=(cj4*r10);
IkReal x904=(cj4*r11);
IkReal x905=(cj5*x901);
IkReal x906=(sj5*x901);
IkReal x907=(sj4*x901);
IkReal x908=(sj5*x902);
IkReal x909=((1.0)*cj5*x902);
evalcond[0]=(((r21*x908))+(((-1.0)*r20*x909))+((r22*x907))+((cj4*r20*x906))+((cj4*r21*x905)));
evalcond[1]=(((cj4*r00*x906))+((r01*x908))+((r02*x907))+(((-1.0)*r00*x909))+((cj4*r01*x905)));
evalcond[2]=(((x903*x908))+(((-1.0)*r11*x906))+((r12*sj4*x902))+((r10*x905))+((cj5*x902*x904)));
evalcond[3]=((1.0)+((x903*x906))+((r11*x908))+((r12*x907))+(((-1.0)*r10*x909))+((x904*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x910=((0.76043125175021)*sj4);
IkReal x911=((0.76043125175021)*cj4);
IkReal x912=((0.200364043685242)*sj5);
IkReal x913=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x910))+((r02*x911))+(((-1.0)*r00*x913))+(((-1.0)*r00*sj5*x910))+((r01*x912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x911))+(((2.80033604032484)*pz))+(((-1.0)*r21*x912))+((r20*x913))+((r20*sj5*x910))+((cj5*r21*x910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x910))+((r02*x911))+(((-1.0)*r00*x913))+(((-1.0)*r00*sj5*x910))+((r01*x912))))+IKsqr(((((-1.0)*r22*x911))+(((2.80033604032484)*pz))+(((-1.0)*r21*x912))+((r20*x913))+((r20*sj5*x910))+((cj5*r21*x910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*cj5*r01*x910))+((r02*x911))+(((-1.0)*r00*x913))+(((-1.0)*r00*sj5*x910))+((r01*x912))), ((((-1.0)*r22*x911))+(((2.80033604032484)*pz))+(((-1.0)*r21*x912))+((r20*x913))+((r20*sj5*x910))+((cj5*r21*x910))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x914=((0.27155)*sj4);
IkReal x915=(r00*sj5);
IkReal x916=((0.07155)*sj5);
IkReal x917=((0.27155)*cj4);
IkReal x918=(cj5*r20);
IkReal x919=(cj3*cj5);
IkReal x920=((0.27155)*sj3);
IkReal x921=(r20*sj5);
IkReal x922=(cj5*r00);
IkReal x923=((0.07155)*x922);
IkReal x924=((0.3571)*(IKsin(j1)));
IkReal x925=(r01*x916);
IkReal x926=((0.07155)*x918);
IkReal x927=(r21*x916);
IkReal x928=((0.3571)*(IKcos(j1)));
IkReal x929=(sj5*x920);
IkReal x930=(x928+x927);
IkReal x931=(px+x924+x923);
evalcond[0]=((((-1.0)*x925))+((x914*x915))+(((-1.0)*r02*x917))+((cj5*r01*x914))+x931);
evalcond[1]=((((-1.0)*x926))+(((-1.0)*x914*x921))+(((-1.0)*cj5*r21*x914))+(((-1.0)*pz))+((r22*x917))+x930);
evalcond[2]=((((-1.0)*x925))+((r21*x929))+(((-1.0)*cj3*r22*x914))+(((-1.0)*r21*x917*x919))+(((-1.0)*x918*x920))+(((-1.0)*cj3*x917*x921))+x931);
evalcond[3]=(((r01*x917*x919))+((x920*x922))+pz+(((-1.0)*r01*x929))+((cj3*r02*x914))+x926+((cj3*x915*x917))+(((-1.0)*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x932=(cj4*r02);
IkReal x933=(cj5*sj4);
IkReal x934=((1.0)*sj1);
IkReal x935=(sj4*sj5);
IkReal x936=((1.0)*cj4*r22);
if( IKabs((((sj1*x932))+(((-1.0)*r01*x933*x934))+((cj1*r20*x935))+(((-1.0)*cj1*x936))+((cj1*r21*x933))+(((-1.0)*r00*x934*x935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x932))+(((-1.0)*cj4*r22*x934))+((r20*sj1*x935))+((cj1*r00*x935))+((cj1*r01*x933))+((r21*sj1*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x932))+(((-1.0)*r01*x933*x934))+((cj1*r20*x935))+(((-1.0)*cj1*x936))+((cj1*r21*x933))+(((-1.0)*r00*x934*x935))))+IKsqr(((((-1.0)*cj1*x932))+(((-1.0)*cj4*r22*x934))+((r20*sj1*x935))+((cj1*r00*x935))+((cj1*r01*x933))+((r21*sj1*x933))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x932))+(((-1.0)*r01*x933*x934))+((cj1*r20*x935))+(((-1.0)*cj1*x936))+((cj1*r21*x933))+(((-1.0)*r00*x934*x935))), ((((-1.0)*cj1*x932))+(((-1.0)*cj4*r22*x934))+((r20*sj1*x935))+((cj1*r00*x935))+((cj1*r01*x933))+((r21*sj1*x933))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x937=IKcos(j2);
IkReal x938=IKsin(j2);
IkReal x939=(cj3*sj4);
IkReal x940=((1.0)*cj4);
IkReal x941=(cj5*sj4);
IkReal x942=((0.07155)*sj5);
IkReal x943=(cj5*r20);
IkReal x944=(sj4*sj5);
IkReal x945=(cj5*r00);
IkReal x946=(cj1*x937);
IkReal x947=(cj3*cj4*sj5);
IkReal x948=(sj1*x937);
IkReal x949=((0.27155)*x938);
IkReal x950=((1.0)*sj3*sj5);
IkReal x951=(sj1*x938);
IkReal x952=(cj3*cj4*cj5);
IkReal x953=((1.0)*x948);
IkReal x954=((1.0)*cj1*x938);
IkReal x955=(x954+x953);
evalcond[0]=((((-1.0)*r02*x940))+(((-1.0)*x946))+((r01*x941))+((r00*x944))+x951);
evalcond[1]=(((r21*x941))+(((-1.0)*r22*x940))+(((-1.0)*x955))+((r20*x944)));
evalcond[2]=(((r21*x942))+(((-1.0)*cj1*x949))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x943))+(((-0.27155)*x948)));
evalcond[3]=(((sj1*x949))+(((-1.0)*px))+((r01*x942))+(((-0.3571)*sj1))+(((-0.07155)*x945))+(((-0.27155)*x946)));
evalcond[4]=((((-1.0)*r21*x950))+((r22*x939))+((sj3*x943))+(((-1.0)*x951))+((r21*x952))+x946+((r20*x947)));
evalcond[5]=(((sj3*x945))+(((-1.0)*r01*x950))+((r01*x952))+((r00*x947))+(((-1.0)*x955))+((r02*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x956=((1.0)*r20);
IkReal x957=((1.0)*cj4);
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x957)))),-1);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x956)))),IkReal(((((-1.0)*cj4*sj5*x956))+(((-1.0)*r22*sj4))+(((-1.0)*cj5*r21*x957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x958.value)))+(x959.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x960=IKsin(j3);
IkReal x961=IKcos(j3);
IkReal x962=(cj4*r10);
IkReal x963=(cj4*r11);
IkReal x964=(cj5*x960);
IkReal x965=(sj5*x960);
IkReal x966=(sj4*x960);
IkReal x967=(sj5*x961);
IkReal x968=((1.0)*cj5*x961);
evalcond[0]=((((-1.0)*r20*x968))+((r21*x967))+((cj4*r20*x965))+((cj4*r21*x964))+((r22*x966)));
evalcond[1]=((((-1.0)*r00*x968))+((r01*x967))+((cj4*r01*x964))+((r02*x966))+((cj4*r00*x965)));
evalcond[2]=(((x962*x967))+(((-1.0)*r11*x965))+((cj5*x961*x963))+((r10*x964))+((r12*sj4*x961)));
evalcond[3]=((1.0)+(((-1.0)*r10*x968))+((x962*x965))+((r11*x967))+((x963*x964))+((r12*x966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x969=((0.76043125175021)*sj4);
IkReal x970=((0.76043125175021)*cj4);
IkReal x971=((0.200364043685242)*sj5);
IkReal x972=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x969))+(((-1.0)*r00*x972))+(((-1.0)*cj5*r01*x969))+((r01*x971))+((r02*x970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((cj5*r21*x969))+((r20*sj5*x969))+((r20*x972))+(((-1.0)*r22*x970))+(((-1.0)*r21*x971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x969))+(((-1.0)*r00*x972))+(((-1.0)*cj5*r01*x969))+((r01*x971))+((r02*x970))))+IKsqr(((((2.80033604032484)*pz))+((cj5*r21*x969))+((r20*sj5*x969))+((r20*x972))+(((-1.0)*r22*x970))+(((-1.0)*r21*x971))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x969))+(((-1.0)*r00*x972))+(((-1.0)*cj5*r01*x969))+((r01*x971))+((r02*x970))), ((((2.80033604032484)*pz))+((cj5*r21*x969))+((r20*sj5*x969))+((r20*x972))+(((-1.0)*r22*x970))+(((-1.0)*r21*x971))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x973=((0.27155)*sj4);
IkReal x974=(r00*sj5);
IkReal x975=((0.07155)*sj5);
IkReal x976=((0.27155)*cj4);
IkReal x977=(cj5*r20);
IkReal x978=(cj3*cj5);
IkReal x979=((0.27155)*sj3);
IkReal x980=(r20*sj5);
IkReal x981=(cj5*r00);
IkReal x982=((0.07155)*x981);
IkReal x983=((0.3571)*(IKsin(j1)));
IkReal x984=(r01*x975);
IkReal x985=((0.07155)*x977);
IkReal x986=(r21*x975);
IkReal x987=((0.3571)*(IKcos(j1)));
IkReal x988=(sj5*x979);
IkReal x989=(x986+x987);
IkReal x990=(px+x982+x983);
evalcond[0]=((((-1.0)*x984))+((cj5*r01*x973))+((x973*x974))+(((-1.0)*r02*x976))+x990);
evalcond[1]=((((-1.0)*x985))+((r22*x976))+(((-1.0)*pz))+(((-1.0)*cj5*r21*x973))+x989+(((-1.0)*x973*x980)));
evalcond[2]=((((-1.0)*x984))+(((-1.0)*r21*x976*x978))+(((-1.0)*cj3*x976*x980))+(((-1.0)*cj3*r22*x973))+((r21*x988))+(((-1.0)*x977*x979))+x990);
evalcond[3]=((((-1.0)*x989))+((cj3*r02*x973))+(((-1.0)*r01*x988))+((x979*x981))+pz+x985+((cj3*x974*x976))+((r01*x976*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x991=(cj4*r02);
IkReal x992=(cj5*sj4);
IkReal x993=((1.0)*sj1);
IkReal x994=(sj4*sj5);
IkReal x995=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x994))+((cj1*r21*x992))+(((-1.0)*r01*x992*x993))+((sj1*x991))+(((-1.0)*cj1*x995))+(((-1.0)*r00*x993*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x992))+((cj1*r00*x994))+((cj1*r01*x992))+((r20*sj1*x994))+(((-1.0)*cj4*r22*x993))+(((-1.0)*cj1*x991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x994))+((cj1*r21*x992))+(((-1.0)*r01*x992*x993))+((sj1*x991))+(((-1.0)*cj1*x995))+(((-1.0)*r00*x993*x994))))+IKsqr((((r21*sj1*x992))+((cj1*r00*x994))+((cj1*r01*x992))+((r20*sj1*x994))+(((-1.0)*cj4*r22*x993))+(((-1.0)*cj1*x991))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x994))+((cj1*r21*x992))+(((-1.0)*r01*x992*x993))+((sj1*x991))+(((-1.0)*cj1*x995))+(((-1.0)*r00*x993*x994))), (((r21*sj1*x992))+((cj1*r00*x994))+((cj1*r01*x992))+((r20*sj1*x994))+(((-1.0)*cj4*r22*x993))+(((-1.0)*cj1*x991))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x996=IKcos(j2);
IkReal x997=IKsin(j2);
IkReal x998=(cj3*sj4);
IkReal x999=((1.0)*cj4);
IkReal x1000=(cj5*sj4);
IkReal x1001=((0.07155)*sj5);
IkReal x1002=(cj5*r20);
IkReal x1003=(sj4*sj5);
IkReal x1004=(cj5*r00);
IkReal x1005=(cj1*x996);
IkReal x1006=(cj3*cj4*sj5);
IkReal x1007=(sj1*x996);
IkReal x1008=((0.27155)*x997);
IkReal x1009=((1.0)*sj3*sj5);
IkReal x1010=(sj1*x997);
IkReal x1011=(cj3*cj4*cj5);
IkReal x1012=((1.0)*x1007);
IkReal x1013=((1.0)*cj1*x997);
IkReal x1014=(x1012+x1013);
evalcond[0]=(((r01*x1000))+(((-1.0)*x1005))+x1010+(((-1.0)*r02*x999))+((r00*x1003)));
evalcond[1]=((((-1.0)*r22*x999))+(((-1.0)*x1014))+((r21*x1000))+((r20*x1003)));
evalcond[2]=((((-0.27155)*x1007))+(((-0.07155)*x1002))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1001))+(((-1.0)*cj1*x1008)));
evalcond[3]=(((r01*x1001))+(((-0.27155)*x1005))+(((-0.07155)*x1004))+((sj1*x1008))+(((-1.0)*px))+(((-0.3571)*sj1)));
evalcond[4]=(x1005+((r21*x1011))+(((-1.0)*r21*x1009))+((sj3*x1002))+((r20*x1006))+((r22*x998))+(((-1.0)*x1010)));
evalcond[5]=((((-1.0)*x1014))+((r02*x998))+((sj3*x1004))+((r01*x1011))+(((-1.0)*r01*x1009))+((r00*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1015=((1.0)*sj0);
IkReal x1016=(cj0*sj5);
IkReal x1017=((1.0)*cj4);
IkReal x1018=((1.0)*cj0*cj5);
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*r00*x1018))+((r01*x1016))+(((-1.0)*cj5*r10*x1015)))),IkReal(((((-1.0)*cj4*cj5*r11*x1015))+(((-1.0)*r12*sj4*x1015))+(((-1.0)*cj4*r10*sj5*x1015))+(((-1.0)*cj0*r02*sj4))+(((-1.0)*r00*x1016*x1017))+(((-1.0)*cj0*cj5*r01*x1017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x1017))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1020.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1019.value)+(((1.5707963267949)*(x1020.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1021=IKsin(j3);
IkReal x1022=IKcos(j3);
IkReal x1023=(sj4*x1021);
IkReal x1024=(sj5*x1022);
IkReal x1025=(cj4*cj5*x1021);
IkReal x1026=(cj4*sj5*x1021);
IkReal x1027=((1.0)*cj5*x1022);
evalcond[0]=(((r20*x1026))+((r21*x1024))+((r21*x1025))+((r22*x1023))+(((-1.0)*r20*x1027)));
evalcond[1]=(((r01*x1025))+((r01*x1024))+sj0+(((-1.0)*r00*x1027))+((r02*x1023))+((r00*x1026)));
evalcond[2]=(((r12*x1023))+((r11*x1025))+((r11*x1024))+(((-1.0)*r10*x1027))+(((-1.0)*cj0))+((r10*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1028=((0.76043125175021)*sj4);
IkReal x1029=((0.200364043685242)*sj5);
IkReal x1030=((0.200364043685242)*cj5);
IkReal x1031=((0.76043125175021)*cj4);
if( IKabs((((r10*x1030))+(((-1.0)*r11*x1029))+(((2.80033604032484)*py))+((r10*sj5*x1028))+((cj5*r11*x1028))+(((-1.0)*r12*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x1028))+(((-1.0)*r21*x1029))+((r20*x1030))+((cj5*r21*x1028))+(((-1.0)*r22*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1030))+(((-1.0)*r11*x1029))+(((2.80033604032484)*py))+((r10*sj5*x1028))+((cj5*r11*x1028))+(((-1.0)*r12*x1031))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x1028))+(((-1.0)*r21*x1029))+((r20*x1030))+((cj5*r21*x1028))+(((-1.0)*r22*x1031))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1030))+(((-1.0)*r11*x1029))+(((2.80033604032484)*py))+((r10*sj5*x1028))+((cj5*r11*x1028))+(((-1.0)*r12*x1031))), ((((2.80033604032484)*pz))+((r20*sj5*x1028))+(((-1.0)*r21*x1029))+((r20*x1030))+((cj5*r21*x1028))+(((-1.0)*r22*x1031))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1032=((1.0)*pz);
IkReal x1033=((0.27155)*sj5);
IkReal x1034=((0.07155)*cj5);
IkReal x1035=(cj3*cj4);
IkReal x1036=((0.27155)*sj4);
IkReal x1037=((0.27155)*cj4);
IkReal x1038=((0.07155)*sj5);
IkReal x1039=(cj5*r21);
IkReal x1040=(r10*x1034);
IkReal x1041=(r11*x1038);
IkReal x1042=((0.3571)*(IKsin(j1)));
IkReal x1043=(r21*x1038);
IkReal x1044=((0.3571)*(IKcos(j1)));
IkReal x1045=(r20*x1034);
IkReal x1046=((0.27155)*cj5*r11);
IkReal x1047=((0.27155)*cj5*sj3);
IkReal x1048=(x1045+x1032);
IkReal x1049=(x1042+x1041);
IkReal x1050=(x1043+x1044);
evalcond[0]=(((r22*x1037))+x1050+(((-1.0)*x1036*x1039))+(((-1.0)*r20*sj4*x1033))+(((-1.0)*x1048)));
evalcond[1]=(x1049+(((-1.0)*cj5*r11*x1036))+(((-1.0)*py))+(((-1.0)*r10*sj4*x1033))+((r12*x1037))+(((-1.0)*x1040)));
evalcond[2]=(x1040+(((0.27155)*x1035*x1039))+((cj3*r22*x1036))+((r20*x1047))+((r20*x1033*x1035))+py+(((-1.0)*r21*sj3*x1033))+(((-1.0)*x1049)));
evalcond[3]=(x1050+((x1035*x1046))+(((-1.0)*r11*sj3*x1033))+((cj3*r12*x1036))+((r10*x1047))+((r10*x1033*x1035))+(((-1.0)*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1051=(cj1*cj4);
IkReal x1052=((1.0)*r22);
IkReal x1053=(cj4*sj1);
IkReal x1054=(sj4*sj5);
IkReal x1055=(cj1*cj5*sj4);
IkReal x1056=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r12*x1053))+((r11*x1056))+((cj1*r20*x1054))+((r10*sj1*x1054))+((r21*x1055))+(((-1.0)*x1051*x1052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1051))+(((-1.0)*x1052*x1053))+(((-1.0)*r11*x1055))+(((-1.0)*cj1*r10*x1054))+((r20*sj1*x1054))+((r21*x1056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1053))+((r11*x1056))+((cj1*r20*x1054))+((r10*sj1*x1054))+((r21*x1055))+(((-1.0)*x1051*x1052))))+IKsqr((((r12*x1051))+(((-1.0)*x1052*x1053))+(((-1.0)*r11*x1055))+(((-1.0)*cj1*r10*x1054))+((r20*sj1*x1054))+((r21*x1056))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r12*x1053))+((r11*x1056))+((cj1*r20*x1054))+((r10*sj1*x1054))+((r21*x1055))+(((-1.0)*x1051*x1052))), (((r12*x1051))+(((-1.0)*x1052*x1053))+(((-1.0)*r11*x1055))+(((-1.0)*cj1*r10*x1054))+((r20*sj1*x1054))+((r21*x1056))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1057=IKcos(j2);
IkReal x1058=IKsin(j2);
IkReal x1059=((1.0)*cj4);
IkReal x1060=((0.07155)*cj5);
IkReal x1061=(cj5*sj4);
IkReal x1062=(cj3*cj4);
IkReal x1063=(r20*sj5);
IkReal x1064=(r10*sj5);
IkReal x1065=((0.07155)*sj5);
IkReal x1066=(cj5*sj3);
IkReal x1067=(cj3*sj4);
IkReal x1068=(cj1*x1057);
IkReal x1069=((1.0)*sj3*sj5);
IkReal x1070=(cj1*x1058);
IkReal x1071=(sj1*x1057);
IkReal x1072=(sj1*x1058);
IkReal x1073=((1.0)*x1072);
evalcond[0]=(x1068+(((-1.0)*r12*x1059))+((sj4*x1064))+(((-1.0)*x1073))+((r11*x1061)));
evalcond[1]=((((-1.0)*r22*x1059))+(((-1.0)*x1070))+(((-1.0)*x1071))+((r21*x1061))+((sj4*x1063)));
evalcond[2]=((((-1.0)*r20*x1060))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1065))+(((-0.27155)*x1070))+(((-0.27155)*x1071)));
evalcond[3]=((((0.27155)*x1068))+(((0.3571)*sj1))+(((-1.0)*r10*x1060))+(((-1.0)*py))+(((-0.27155)*x1072))+((r11*x1065)));
evalcond[4]=(((r12*x1067))+x1070+x1071+(((-1.0)*r11*x1069))+((cj5*r11*x1062))+((x1062*x1064))+((r10*x1066)));
evalcond[5]=(((cj5*r21*x1062))+(((-1.0)*r21*x1069))+x1068+((r20*x1066))+((x1062*x1063))+((r22*x1067))+(((-1.0)*x1073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1074=((0.76043125175021)*sj4);
IkReal x1075=((0.200364043685242)*sj5);
IkReal x1076=((0.200364043685242)*cj5);
IkReal x1077=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r12*x1077))+(((-1.0)*r10*x1076))+(((-1.0)*cj5*r11*x1074))+(((-1.0)*r10*sj5*x1074))+((r11*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1074))+(((-1.0)*r21*x1075))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*sj5*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r12*x1077))+(((-1.0)*r10*x1076))+(((-1.0)*cj5*r11*x1074))+(((-1.0)*r10*sj5*x1074))+((r11*x1075))))+IKsqr((((cj5*r21*x1074))+(((-1.0)*r21*x1075))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*sj5*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r12*x1077))+(((-1.0)*r10*x1076))+(((-1.0)*cj5*r11*x1074))+(((-1.0)*r10*sj5*x1074))+((r11*x1075))), (((cj5*r21*x1074))+(((-1.0)*r21*x1075))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*sj5*x1074))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1078=((0.27155)*sj5);
IkReal x1079=((0.07155)*cj5);
IkReal x1080=(cj3*cj4);
IkReal x1081=((0.27155)*sj4);
IkReal x1082=((0.27155)*cj4);
IkReal x1083=((0.07155)*sj5);
IkReal x1084=(cj5*r21);
IkReal x1085=(r10*x1079);
IkReal x1086=((0.3571)*(IKsin(j1)));
IkReal x1087=(r11*x1083);
IkReal x1088=(r20*x1079);
IkReal x1089=(r21*x1083);
IkReal x1090=((0.3571)*(IKcos(j1)));
IkReal x1091=((0.27155)*cj5*r11);
IkReal x1092=((0.27155)*cj5*sj3);
IkReal x1093=(x1090+x1089);
IkReal x1094=(x1086+x1085+py);
evalcond[0]=(x1094+((cj5*r11*x1081))+((r10*sj4*x1078))+(((-1.0)*x1087))+(((-1.0)*r12*x1082)));
evalcond[1]=(x1093+(((-1.0)*x1081*x1084))+(((-1.0)*pz))+((r22*x1082))+(((-1.0)*x1088))+(((-1.0)*r20*sj4*x1078)));
evalcond[2]=(x1094+(((-1.0)*cj3*r22*x1081))+(((-0.27155)*x1080*x1084))+(((-1.0)*r20*x1078*x1080))+(((-1.0)*x1087))+(((-1.0)*r20*x1092))+((r21*sj3*x1078)));
evalcond[3]=(x1088+((x1080*x1091))+((r10*x1092))+(((-1.0)*x1093))+((cj3*r12*x1081))+pz+((r10*x1078*x1080))+(((-1.0)*r11*sj3*x1078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1095=(cj4*sj1);
IkReal x1096=(cj5*sj4);
IkReal x1097=((1.0)*sj1);
IkReal x1098=(sj4*sj5);
IkReal x1099=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r11*x1096*x1097))+((cj1*r21*x1096))+(((-1.0)*r10*x1097*x1098))+((r12*x1095))+((cj1*r20*x1098))+(((-1.0)*r22*x1099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1096))+((r21*sj1*x1096))+(((-1.0)*r12*x1099))+((cj1*r10*x1098))+((r20*sj1*x1098))+(((-1.0)*r22*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1096*x1097))+((cj1*r21*x1096))+(((-1.0)*r10*x1097*x1098))+((r12*x1095))+((cj1*r20*x1098))+(((-1.0)*r22*x1099))))+IKsqr((((cj1*r11*x1096))+((r21*sj1*x1096))+(((-1.0)*r12*x1099))+((cj1*r10*x1098))+((r20*sj1*x1098))+(((-1.0)*r22*x1095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1096*x1097))+((cj1*r21*x1096))+(((-1.0)*r10*x1097*x1098))+((r12*x1095))+((cj1*r20*x1098))+(((-1.0)*r22*x1099))), (((cj1*r11*x1096))+((r21*sj1*x1096))+(((-1.0)*r12*x1099))+((cj1*r10*x1098))+((r20*sj1*x1098))+(((-1.0)*r22*x1095))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1100=IKcos(j2);
IkReal x1101=IKsin(j2);
IkReal x1102=((1.0)*cj4);
IkReal x1103=((0.07155)*cj5);
IkReal x1104=(cj5*sj4);
IkReal x1105=(cj3*cj4);
IkReal x1106=(r20*sj5);
IkReal x1107=(r10*sj5);
IkReal x1108=((0.07155)*sj5);
IkReal x1109=(cj5*sj3);
IkReal x1110=(cj3*sj4);
IkReal x1111=(cj1*x1100);
IkReal x1112=((1.0)*sj3*sj5);
IkReal x1113=(sj1*x1100);
IkReal x1114=((0.27155)*x1101);
IkReal x1115=(sj1*x1101);
IkReal x1116=((1.0)*x1113);
IkReal x1117=((1.0)*cj1*x1101);
IkReal x1118=(x1117+x1116);
evalcond[0]=((((-1.0)*r12*x1102))+x1115+(((-1.0)*x1111))+((sj4*x1107))+((r11*x1104)));
evalcond[1]=((((-1.0)*r22*x1102))+((sj4*x1106))+((r21*x1104))+(((-1.0)*x1118)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x1113))+(((-1.0)*cj1*x1114))+(((-1.0)*r20*x1103))+(((-1.0)*pz))+((r21*x1108)));
evalcond[3]=((((-0.27155)*x1111))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x1114))+((r11*x1108))+(((-1.0)*r10*x1103)));
evalcond[4]=(x1111+((r20*x1109))+((cj5*r21*x1105))+((x1105*x1106))+(((-1.0)*r21*x1112))+(((-1.0)*x1115))+((r22*x1110)));
evalcond[5]=((((-1.0)*r11*x1112))+((x1105*x1107))+((cj5*r11*x1105))+((r12*x1110))+(((-1.0)*x1118))+((r10*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1119=((0.76043125175021)*sj4);
IkReal x1120=((0.76043125175021)*cj4);
IkReal x1121=((0.200364043685242)*sj5);
IkReal x1122=((0.200364043685242)*cj5);
if( IKabs((((r00*x1122))+((r00*sj5*x1119))+(((2.80033604032484)*px))+((cj5*r01*x1119))+(((-1.0)*r02*x1120))+(((-1.0)*r01*x1121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1119))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1120))+((r20*sj5*x1119))+(((-1.0)*r21*x1121))+((r20*x1122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1122))+((r00*sj5*x1119))+(((2.80033604032484)*px))+((cj5*r01*x1119))+(((-1.0)*r02*x1120))+(((-1.0)*r01*x1121))))+IKsqr((((cj5*r21*x1119))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1120))+((r20*sj5*x1119))+(((-1.0)*r21*x1121))+((r20*x1122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x1122))+((r00*sj5*x1119))+(((2.80033604032484)*px))+((cj5*r01*x1119))+(((-1.0)*r02*x1120))+(((-1.0)*r01*x1121))), (((cj5*r21*x1119))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1120))+((r20*sj5*x1119))+(((-1.0)*r21*x1121))+((r20*x1122))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1123=((1.0)*pz);
IkReal x1124=((0.27155)*sj4);
IkReal x1125=(r00*sj5);
IkReal x1126=((0.07155)*sj5);
IkReal x1127=((0.27155)*cj4);
IkReal x1128=(cj5*r20);
IkReal x1129=(cj3*cj5);
IkReal x1130=((0.27155)*sj3);
IkReal x1131=(r20*sj5);
IkReal x1132=(cj5*r00);
IkReal x1133=((0.07155)*x1132);
IkReal x1134=(r01*x1126);
IkReal x1135=((0.3571)*(IKsin(j1)));
IkReal x1136=(r21*x1126);
IkReal x1137=((0.3571)*(IKcos(j1)));
IkReal x1138=((0.07155)*x1128);
IkReal x1139=(sj5*x1130);
IkReal x1140=(x1123+x1138);
IkReal x1141=(x1135+x1134);
IkReal x1142=(x1137+x1136);
evalcond[0]=((((-1.0)*cj5*r21*x1124))+x1142+(((-1.0)*x1140))+((r22*x1127))+(((-1.0)*x1124*x1131)));
evalcond[1]=(x1141+(((-1.0)*px))+(((-1.0)*x1133))+(((-1.0)*cj5*r01*x1124))+(((-1.0)*x1124*x1125))+((r02*x1127)));
evalcond[2]=(((r21*x1127*x1129))+x1133+(((-1.0)*x1141))+px+((x1128*x1130))+(((-1.0)*r21*x1139))+((cj3*x1127*x1131))+((cj3*r22*x1124)));
evalcond[3]=(x1142+((x1130*x1132))+((cj3*x1125*x1127))+(((-1.0)*x1140))+((cj3*r02*x1124))+((r01*x1127*x1129))+(((-1.0)*r01*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1143=(cj5*sj4);
IkReal x1144=(cj4*r02);
IkReal x1145=((1.0)*cj1);
IkReal x1146=(sj4*sj5);
IkReal x1147=((1.0)*cj4*r22);
IkReal x1148=(sj1*x1146);
if( IKabs((((cj1*r20*x1146))+(((-1.0)*cj4*r22*x1145))+(((-1.0)*sj1*x1144))+((cj1*r21*x1143))+((r01*sj1*x1143))+((r00*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1145*x1146))+((cj1*x1144))+((r21*sj1*x1143))+((r20*x1148))+(((-1.0)*sj1*x1147))+(((-1.0)*r01*x1143*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1146))+(((-1.0)*cj4*r22*x1145))+(((-1.0)*sj1*x1144))+((cj1*r21*x1143))+((r01*sj1*x1143))+((r00*x1148))))+IKsqr(((((-1.0)*r00*x1145*x1146))+((cj1*x1144))+((r21*sj1*x1143))+((r20*x1148))+(((-1.0)*sj1*x1147))+(((-1.0)*r01*x1143*x1145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1146))+(((-1.0)*cj4*r22*x1145))+(((-1.0)*sj1*x1144))+((cj1*r21*x1143))+((r01*sj1*x1143))+((r00*x1148))), ((((-1.0)*r00*x1145*x1146))+((cj1*x1144))+((r21*sj1*x1143))+((r20*x1148))+(((-1.0)*sj1*x1147))+(((-1.0)*r01*x1143*x1145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1149=IKcos(j2);
IkReal x1150=IKsin(j2);
IkReal x1151=(cj3*sj4);
IkReal x1152=((1.0)*cj4);
IkReal x1153=(r00*sj5);
IkReal x1154=(cj3*cj4);
IkReal x1155=(cj5*sj4);
IkReal x1156=((0.07155)*sj5);
IkReal x1157=(cj5*r20);
IkReal x1158=(cj5*r00);
IkReal x1159=(r20*sj5);
IkReal x1160=(cj1*x1149);
IkReal x1161=(sj1*x1149);
IkReal x1162=(cj1*x1150);
IkReal x1163=((1.0)*sj3*sj5);
IkReal x1164=(sj1*x1150);
IkReal x1165=((1.0)*x1164);
evalcond[0]=(x1160+(((-1.0)*r02*x1152))+(((-1.0)*x1165))+((sj4*x1153))+((r01*x1155)));
evalcond[1]=((((-1.0)*r22*x1152))+((r21*x1155))+(((-1.0)*x1162))+(((-1.0)*x1161))+((sj4*x1159)));
evalcond[2]=((((-0.27155)*x1162))+(((-0.27155)*x1161))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1156))+(((-0.07155)*x1157)));
evalcond[3]=((((-0.27155)*x1164))+(((0.3571)*sj1))+(((-1.0)*px))+(((0.27155)*x1160))+(((-0.07155)*x1158))+((r01*x1156)));
evalcond[4]=(x1161+x1162+((cj5*r01*x1154))+((r02*x1151))+((sj3*x1158))+((x1153*x1154))+(((-1.0)*r01*x1163)));
evalcond[5]=(x1160+(((-1.0)*r21*x1163))+((r22*x1151))+((sj3*x1157))+((cj5*r21*x1154))+(((-1.0)*x1165))+((x1154*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1166=((0.76043125175021)*sj4);
IkReal x1167=((0.76043125175021)*cj4);
IkReal x1168=((0.200364043685242)*sj5);
IkReal x1169=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+((r02*x1167))+((r01*x1168))+(((-1.0)*cj5*r01*x1166))+(((-1.0)*r00*x1169))+(((-1.0)*r00*sj5*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1168))+((r20*x1169))+(((2.80033604032484)*pz))+((r20*sj5*x1166))+((cj5*r21*x1166))+(((-1.0)*r22*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+((r02*x1167))+((r01*x1168))+(((-1.0)*cj5*r01*x1166))+(((-1.0)*r00*x1169))+(((-1.0)*r00*sj5*x1166))))+IKsqr(((((-1.0)*r21*x1168))+((r20*x1169))+(((2.80033604032484)*pz))+((r20*sj5*x1166))+((cj5*r21*x1166))+(((-1.0)*r22*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+((r02*x1167))+((r01*x1168))+(((-1.0)*cj5*r01*x1166))+(((-1.0)*r00*x1169))+(((-1.0)*r00*sj5*x1166))), ((((-1.0)*r21*x1168))+((r20*x1169))+(((2.80033604032484)*pz))+((r20*sj5*x1166))+((cj5*r21*x1166))+(((-1.0)*r22*x1167))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1170=((0.27155)*sj4);
IkReal x1171=(r00*sj5);
IkReal x1172=((0.07155)*sj5);
IkReal x1173=((0.27155)*cj4);
IkReal x1174=(cj5*r20);
IkReal x1175=(cj3*cj5);
IkReal x1176=((0.27155)*sj3);
IkReal x1177=(r20*sj5);
IkReal x1178=(cj5*r00);
IkReal x1179=((0.07155)*x1178);
IkReal x1180=((0.3571)*(IKsin(j1)));
IkReal x1181=(r01*x1172);
IkReal x1182=((0.07155)*x1174);
IkReal x1183=(r21*x1172);
IkReal x1184=((0.3571)*(IKcos(j1)));
IkReal x1185=(sj5*x1176);
IkReal x1186=(x1184+x1183);
IkReal x1187=(x1180+x1179+px);
evalcond[0]=((((-1.0)*r02*x1173))+x1187+(((-1.0)*x1181))+((x1170*x1171))+((cj5*r01*x1170)));
evalcond[1]=(x1186+(((-1.0)*cj5*r21*x1170))+(((-1.0)*pz))+(((-1.0)*x1182))+(((-1.0)*x1170*x1177))+((r22*x1173)));
evalcond[2]=(x1187+(((-1.0)*x1181))+(((-1.0)*r21*x1173*x1175))+(((-1.0)*cj3*x1173*x1177))+((r21*x1185))+(((-1.0)*cj3*r22*x1170))+(((-1.0)*x1174*x1176)));
evalcond[3]=((((-1.0)*r01*x1185))+x1182+((cj3*r02*x1170))+((x1176*x1178))+(((-1.0)*x1186))+((cj3*x1171*x1173))+pz+((r01*x1173*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1188=(cj4*r02);
IkReal x1189=(cj5*sj4);
IkReal x1190=((1.0)*sj1);
IkReal x1191=(sj4*sj5);
IkReal x1192=((1.0)*cj4*r22);
if( IKabs((((sj1*x1188))+(((-1.0)*r00*x1190*x1191))+((cj1*r20*x1191))+(((-1.0)*r01*x1189*x1190))+(((-1.0)*cj1*x1192))+((cj1*r21*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1189))+(((-1.0)*cj4*r22*x1190))+(((-1.0)*cj1*x1188))+((r20*sj1*x1191))+((cj1*r00*x1191))+((cj1*r01*x1189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1188))+(((-1.0)*r00*x1190*x1191))+((cj1*r20*x1191))+(((-1.0)*r01*x1189*x1190))+(((-1.0)*cj1*x1192))+((cj1*r21*x1189))))+IKsqr((((r21*sj1*x1189))+(((-1.0)*cj4*r22*x1190))+(((-1.0)*cj1*x1188))+((r20*sj1*x1191))+((cj1*r00*x1191))+((cj1*r01*x1189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1188))+(((-1.0)*r00*x1190*x1191))+((cj1*r20*x1191))+(((-1.0)*r01*x1189*x1190))+(((-1.0)*cj1*x1192))+((cj1*r21*x1189))), (((r21*sj1*x1189))+(((-1.0)*cj4*r22*x1190))+(((-1.0)*cj1*x1188))+((r20*sj1*x1191))+((cj1*r00*x1191))+((cj1*r01*x1189))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1193=IKcos(j2);
IkReal x1194=IKsin(j2);
IkReal x1195=(cj3*sj4);
IkReal x1196=((1.0)*cj4);
IkReal x1197=(cj5*sj4);
IkReal x1198=((0.07155)*sj5);
IkReal x1199=(cj5*r20);
IkReal x1200=(sj4*sj5);
IkReal x1201=(cj5*r00);
IkReal x1202=(cj1*x1193);
IkReal x1203=(cj3*cj4*sj5);
IkReal x1204=(sj1*x1193);
IkReal x1205=((0.27155)*x1194);
IkReal x1206=((1.0)*sj3*sj5);
IkReal x1207=(sj1*x1194);
IkReal x1208=(cj3*cj4*cj5);
IkReal x1209=((1.0)*x1204);
IkReal x1210=((1.0)*cj1*x1194);
IkReal x1211=(x1209+x1210);
evalcond[0]=(x1207+((r01*x1197))+(((-1.0)*x1202))+((r00*x1200))+(((-1.0)*r02*x1196)));
evalcond[1]=((((-1.0)*r22*x1196))+((r20*x1200))+((r21*x1197))+(((-1.0)*x1211)));
evalcond[2]=((((-0.07155)*x1199))+(((0.3571)*cj1))+(((-1.0)*cj1*x1205))+(((-1.0)*pz))+((r21*x1198))+(((-0.27155)*x1204)));
evalcond[3]=(((r01*x1198))+(((-1.0)*px))+(((-0.3571)*sj1))+((sj1*x1205))+(((-0.07155)*x1201))+(((-0.27155)*x1202)));
evalcond[4]=(x1202+((r22*x1195))+((r21*x1208))+((r20*x1203))+(((-1.0)*x1207))+((sj3*x1199))+(((-1.0)*r21*x1206)));
evalcond[5]=((((-1.0)*r01*x1206))+((sj3*x1201))+((r02*x1195))+((r01*x1208))+((r00*x1203))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1212=((0.27155)*cj0);
IkReal x1213=(sj4*sj5);
IkReal x1214=((0.07155)*cj0);
IkReal x1215=(cj5*sj4);
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(cj0,-2);
if(!x1216.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1216.value)*(((((-1.0)*r00*x1212*x1213))+(((-1.0)*cj5*r00*x1214))+((r01*sj5*x1214))+((cj4*r02*x1212))+(((-1.0)*r01*x1212*x1215))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1215))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r20*x1213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1216.value)*(((((-1.0)*r00*x1212*x1213))+(((-1.0)*cj5*r00*x1214))+((r01*sj5*x1214))+((cj4*r02*x1212))+(((-1.0)*r01*x1212*x1215))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1215))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r20*x1213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1216.value)*(((((-1.0)*r00*x1212*x1213))+(((-1.0)*cj5*r00*x1214))+((r01*sj5*x1214))+((cj4*r02*x1212))+(((-1.0)*r01*x1212*x1215))+(((-1.0)*cj0*px))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1215))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r20*x1213))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1217=IKsin(j1);
IkReal x1218=IKcos(j1);
IkReal x1219=((0.07155)*cj5);
IkReal x1220=(r00*sj0);
IkReal x1221=(cj3*cj4);
IkReal x1222=(cj0*sj5);
IkReal x1223=((0.07155)*r11);
IkReal x1224=(cj5*sj3);
IkReal x1225=((0.27155)*sj4);
IkReal x1226=(cj3*r22);
IkReal x1227=(cj5*r11);
IkReal x1228=((0.27155)*r20);
IkReal x1229=((1.0)*sj0);
IkReal x1230=(sj0*sj5);
IkReal x1231=((0.27155)*sj5);
IkReal x1232=((1.0)*pz);
IkReal x1233=((0.07155)*r21);
IkReal x1234=(cj5*r01);
IkReal x1235=((0.27155)*cj4);
IkReal x1236=(cj5*r21);
IkReal x1237=((1.0)*cj0);
IkReal x1238=(sj0*x1228);
IkReal x1239=((0.3571)*x1218);
IkReal x1240=((0.07155)*r01*sj5);
IkReal x1241=((0.3571)*x1217);
IkReal x1242=((0.27155)*r21*sj3);
IkReal x1243=(cj0*x1241);
IkReal x1244=(sj0*x1243);
evalcond[0]=(x1239+(((-1.0)*x1225*x1236))+(((-1.0)*x1232))+(((-1.0)*r20*sj5*x1225))+((sj5*x1233))+((r22*x1235))+(((-1.0)*r20*x1219)));
evalcond[1]=((((-1.0)*r10*sj0*x1219))+(((-1.0)*r10*x1225*x1230))+(((-1.0)*sj0*x1225*x1227))+((x1223*x1230))+(((-1.0)*py*x1229))+((x1241*(sj0*sj0)))+((r12*sj0*x1235)));
evalcond[2]=(((cj0*r02*x1235))+(((-1.0)*px*x1237))+(((0.07155)*r01*x1222))+(((-1.0)*cj0*r00*x1219))+(((-1.0)*cj0*x1225*x1234))+((cj0*x1243))+(((-1.0)*r00*x1222*x1225)));
evalcond[3]=(((x1221*x1228*x1230))+((sj0*x1225*x1226))+((r10*x1219))+((x1224*x1238))+(((-1.0)*sj0*x1241))+(((-1.0)*x1230*x1242))+py+(((0.27155)*sj0*x1221*x1236))+(((-1.0)*sj5*x1223)));
evalcond[4]=(((r00*x1219))+(((-1.0)*x1243))+(((-1.0)*x1240))+px+((x1221*x1222*x1228))+(((-1.0)*x1222*x1242))+((cj0*x1225*x1226))+((cj0*x1224*x1228))+(((0.27155)*cj0*x1221*x1236)));
evalcond[5]=((((-1.0)*r20*sj0*x1219))+((sj0*x1239))+(((0.27155)*r10*x1224))+((cj3*r12*x1225))+(((-1.0)*pz*x1229))+(((-1.0)*r11*sj3*x1231))+((x1230*x1233))+(((0.27155)*x1221*x1227))+((r10*x1221*x1231)));
evalcond[6]=((((0.27155)*r00*x1224))+((r00*x1221*x1231))+((cj3*r02*x1225))+(((-1.0)*cj0*r20*x1219))+(((-1.0)*cj0*x1232))+(((-1.0)*r01*sj3*x1231))+((cj0*x1239))+((x1222*x1233))+(((0.27155)*x1221*x1234)));
evalcond[7]=(x1244+(((-1.0)*px*x1229))+(((0.07155)*r01*x1230))+((cj0*r12*x1235))+(((-1.0)*cj0*x1225*x1227))+(((-1.0)*r10*x1222*x1225))+(((-1.0)*x1219*x1220)));
evalcond[8]=(((r02*sj0*x1235))+x1244+(((-1.0)*sj0*x1225*x1234))+(((-1.0)*py*x1237))+((x1222*x1223))+(((-1.0)*cj0*r10*x1219))+(((-1.0)*sj5*x1220*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1245=(cj5*sj4);
IkReal x1246=(cj4*r02);
IkReal x1247=((1.0)*cj1);
IkReal x1248=(sj4*sj5);
IkReal x1249=((1.0)*cj4*r22);
IkReal x1250=(sj1*x1248);
if( IKabs((((r01*sj1*x1245))+((cj1*r20*x1248))+(((-1.0)*cj4*r22*x1247))+((r00*x1250))+((cj1*r21*x1245))+(((-1.0)*sj1*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1249))+((cj1*x1246))+(((-1.0)*r01*x1245*x1247))+(((-1.0)*r00*x1247*x1248))+((r21*sj1*x1245))+((r20*x1250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x1245))+((cj1*r20*x1248))+(((-1.0)*cj4*r22*x1247))+((r00*x1250))+((cj1*r21*x1245))+(((-1.0)*sj1*x1246))))+IKsqr(((((-1.0)*sj1*x1249))+((cj1*x1246))+(((-1.0)*r01*x1245*x1247))+(((-1.0)*r00*x1247*x1248))+((r21*sj1*x1245))+((r20*x1250))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x1245))+((cj1*r20*x1248))+(((-1.0)*cj4*r22*x1247))+((r00*x1250))+((cj1*r21*x1245))+(((-1.0)*sj1*x1246))), ((((-1.0)*sj1*x1249))+((cj1*x1246))+(((-1.0)*r01*x1245*x1247))+(((-1.0)*r00*x1247*x1248))+((r21*sj1*x1245))+((r20*x1250))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1251=IKcos(j2);
IkReal x1252=IKsin(j2);
IkReal x1253=(cj3*sj4);
IkReal x1254=((1.0)*cj4);
IkReal x1255=(r00*sj5);
IkReal x1256=(cj3*cj4);
IkReal x1257=(cj5*sj4);
IkReal x1258=((0.07155)*sj5);
IkReal x1259=(cj5*r20);
IkReal x1260=(cj5*r00);
IkReal x1261=(r20*sj5);
IkReal x1262=(cj1*x1251);
IkReal x1263=(sj1*x1251);
IkReal x1264=(cj1*x1252);
IkReal x1265=((1.0)*sj3*sj5);
IkReal x1266=(sj1*x1252);
IkReal x1267=((1.0)*x1266);
evalcond[0]=(x1262+((sj4*x1255))+(((-1.0)*r02*x1254))+((r01*x1257))+(((-1.0)*x1267)));
evalcond[1]=((((-1.0)*r22*x1254))+((r21*x1257))+((sj4*x1261))+(((-1.0)*x1264))+(((-1.0)*x1263)));
evalcond[2]=((((-0.27155)*x1263))+(((-0.27155)*x1264))+((r21*x1258))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x1259)));
evalcond[3]=((((-0.27155)*x1266))+(((0.3571)*sj1))+(((0.27155)*x1262))+(((-1.0)*px))+((r01*x1258))+(((-0.07155)*x1260)));
evalcond[4]=(x1263+x1264+((r02*x1253))+(((-1.0)*r01*x1265))+((cj5*r01*x1256))+((x1255*x1256))+((sj3*x1260)));
evalcond[5]=(x1262+(((-1.0)*r21*x1265))+((r22*x1253))+((cj5*r21*x1256))+((x1256*x1261))+((sj3*x1259))+(((-1.0)*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1268=(cj4*r02);
IkReal x1269=(cj5*sj4);
IkReal x1270=((1.0)*sj1);
IkReal x1271=(sj4*sj5);
IkReal x1272=((1.0)*cj4*r22);
if( IKabs((((sj1*x1268))+(((-1.0)*cj1*x1272))+(((-1.0)*r00*x1270*x1271))+((cj1*r20*x1271))+((cj1*r21*x1269))+(((-1.0)*r01*x1269*x1270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1270))+((r20*sj1*x1271))+((r21*sj1*x1269))+(((-1.0)*cj1*x1268))+((cj1*r00*x1271))+((cj1*r01*x1269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1268))+(((-1.0)*cj1*x1272))+(((-1.0)*r00*x1270*x1271))+((cj1*r20*x1271))+((cj1*r21*x1269))+(((-1.0)*r01*x1269*x1270))))+IKsqr(((((-1.0)*cj4*r22*x1270))+((r20*sj1*x1271))+((r21*sj1*x1269))+(((-1.0)*cj1*x1268))+((cj1*r00*x1271))+((cj1*r01*x1269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1268))+(((-1.0)*cj1*x1272))+(((-1.0)*r00*x1270*x1271))+((cj1*r20*x1271))+((cj1*r21*x1269))+(((-1.0)*r01*x1269*x1270))), ((((-1.0)*cj4*r22*x1270))+((r20*sj1*x1271))+((r21*sj1*x1269))+(((-1.0)*cj1*x1268))+((cj1*r00*x1271))+((cj1*r01*x1269))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j2);
IkReal x1274=IKsin(j2);
IkReal x1275=(cj3*sj4);
IkReal x1276=((1.0)*cj4);
IkReal x1277=(cj5*sj4);
IkReal x1278=((0.07155)*sj5);
IkReal x1279=(cj5*r20);
IkReal x1280=(sj4*sj5);
IkReal x1281=(cj5*r00);
IkReal x1282=(cj1*x1273);
IkReal x1283=(cj3*cj4*sj5);
IkReal x1284=(sj1*x1273);
IkReal x1285=((0.27155)*x1274);
IkReal x1286=((1.0)*sj3*sj5);
IkReal x1287=(sj1*x1274);
IkReal x1288=(cj3*cj4*cj5);
IkReal x1289=((1.0)*x1284);
IkReal x1290=((1.0)*cj1*x1274);
IkReal x1291=(x1289+x1290);
evalcond[0]=((((-1.0)*x1282))+x1287+((r00*x1280))+(((-1.0)*r02*x1276))+((r01*x1277)));
evalcond[1]=(((r21*x1277))+(((-1.0)*x1291))+(((-1.0)*r22*x1276))+((r20*x1280)));
evalcond[2]=(((r21*x1278))+(((0.3571)*cj1))+(((-1.0)*cj1*x1285))+(((-0.27155)*x1284))+(((-1.0)*pz))+(((-0.07155)*x1279)));
evalcond[3]=((((-0.27155)*x1282))+(((-1.0)*px))+(((-0.3571)*sj1))+((sj1*x1285))+((r01*x1278))+(((-0.07155)*x1281)));
evalcond[4]=(((sj3*x1279))+(((-1.0)*x1287))+x1282+((r22*x1275))+((r20*x1283))+((r21*x1288))+(((-1.0)*r21*x1286)));
evalcond[5]=((((-1.0)*x1291))+((r02*x1275))+((r01*x1288))+(((-1.0)*r01*x1286))+((r00*x1283))+((sj3*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1292=(cj1*cj4);
IkReal x1293=((1.0)*r22);
IkReal x1294=(cj4*sj1);
IkReal x1295=(sj4*sj5);
IkReal x1296=(cj1*cj5*sj4);
IkReal x1297=(cj5*sj1*sj4);
if( IKabs((((r21*x1296))+((cj1*r20*x1295))+((r10*sj1*x1295))+(((-1.0)*x1292*x1293))+((r11*x1297))+(((-1.0)*r12*x1294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1297))+(((-1.0)*cj1*r10*x1295))+((r12*x1292))+(((-1.0)*x1293*x1294))+((r20*sj1*x1295))+(((-1.0)*r11*x1296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1296))+((cj1*r20*x1295))+((r10*sj1*x1295))+(((-1.0)*x1292*x1293))+((r11*x1297))+(((-1.0)*r12*x1294))))+IKsqr((((r21*x1297))+(((-1.0)*cj1*r10*x1295))+((r12*x1292))+(((-1.0)*x1293*x1294))+((r20*sj1*x1295))+(((-1.0)*r11*x1296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x1296))+((cj1*r20*x1295))+((r10*sj1*x1295))+(((-1.0)*x1292*x1293))+((r11*x1297))+(((-1.0)*r12*x1294))), (((r21*x1297))+(((-1.0)*cj1*r10*x1295))+((r12*x1292))+(((-1.0)*x1293*x1294))+((r20*sj1*x1295))+(((-1.0)*r11*x1296))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1298=IKcos(j2);
IkReal x1299=IKsin(j2);
IkReal x1300=((1.0)*cj4);
IkReal x1301=((0.07155)*cj5);
IkReal x1302=(cj5*sj4);
IkReal x1303=(cj3*cj4);
IkReal x1304=(r20*sj5);
IkReal x1305=(r10*sj5);
IkReal x1306=((0.07155)*sj5);
IkReal x1307=(cj5*sj3);
IkReal x1308=(cj3*sj4);
IkReal x1309=(cj1*x1298);
IkReal x1310=((1.0)*sj3*sj5);
IkReal x1311=(cj1*x1299);
IkReal x1312=(sj1*x1298);
IkReal x1313=(sj1*x1299);
IkReal x1314=((1.0)*x1313);
evalcond[0]=(x1309+(((-1.0)*x1314))+((r11*x1302))+(((-1.0)*r12*x1300))+((sj4*x1305)));
evalcond[1]=((((-1.0)*r22*x1300))+(((-1.0)*x1312))+(((-1.0)*x1311))+((r21*x1302))+((sj4*x1304)));
evalcond[2]=((((-0.27155)*x1312))+(((-0.27155)*x1311))+(((0.3571)*cj1))+((r21*x1306))+(((-1.0)*r20*x1301))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+(((0.27155)*x1309))+(((-0.27155)*x1313))+(((-1.0)*py))+(((-1.0)*r10*x1301))+((r11*x1306)));
evalcond[4]=(x1312+x1311+((cj5*r11*x1303))+((r10*x1307))+((r12*x1308))+((x1303*x1305))+(((-1.0)*r11*x1310)));
evalcond[5]=(x1309+(((-1.0)*x1314))+((cj5*r21*x1303))+((x1303*x1304))+(((-1.0)*r21*x1310))+((r22*x1308))+((r20*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1315=(cj4*sj1);
IkReal x1316=(cj5*sj4);
IkReal x1317=((1.0)*sj1);
IkReal x1318=(sj4*sj5);
IkReal x1319=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x1319))+(((-1.0)*r11*x1316*x1317))+((r12*x1315))+((cj1*r20*x1318))+(((-1.0)*r10*x1317*x1318))+((cj1*r21*x1316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1318))+((r21*sj1*x1316))+(((-1.0)*r22*x1315))+(((-1.0)*r12*x1319))+((cj1*r10*x1318))+((cj1*r11*x1316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1319))+(((-1.0)*r11*x1316*x1317))+((r12*x1315))+((cj1*r20*x1318))+(((-1.0)*r10*x1317*x1318))+((cj1*r21*x1316))))+IKsqr((((r20*sj1*x1318))+((r21*sj1*x1316))+(((-1.0)*r22*x1315))+(((-1.0)*r12*x1319))+((cj1*r10*x1318))+((cj1*r11*x1316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1319))+(((-1.0)*r11*x1316*x1317))+((r12*x1315))+((cj1*r20*x1318))+(((-1.0)*r10*x1317*x1318))+((cj1*r21*x1316))), (((r20*sj1*x1318))+((r21*sj1*x1316))+(((-1.0)*r22*x1315))+(((-1.0)*r12*x1319))+((cj1*r10*x1318))+((cj1*r11*x1316))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1320=IKcos(j2);
IkReal x1321=IKsin(j2);
IkReal x1322=((1.0)*cj4);
IkReal x1323=((0.07155)*cj5);
IkReal x1324=(cj5*sj4);
IkReal x1325=(cj3*cj4);
IkReal x1326=(r20*sj5);
IkReal x1327=(r10*sj5);
IkReal x1328=((0.07155)*sj5);
IkReal x1329=(cj5*sj3);
IkReal x1330=(cj3*sj4);
IkReal x1331=(cj1*x1320);
IkReal x1332=((1.0)*sj3*sj5);
IkReal x1333=(sj1*x1320);
IkReal x1334=((0.27155)*x1321);
IkReal x1335=(sj1*x1321);
IkReal x1336=((1.0)*x1333);
IkReal x1337=((1.0)*cj1*x1321);
IkReal x1338=(x1337+x1336);
evalcond[0]=(x1335+(((-1.0)*x1331))+((r11*x1324))+(((-1.0)*r12*x1322))+((sj4*x1327)));
evalcond[1]=((((-1.0)*r22*x1322))+((sj4*x1326))+((r21*x1324))+(((-1.0)*x1338)));
evalcond[2]=((((-1.0)*cj1*x1334))+(((0.3571)*cj1))+(((-0.27155)*x1333))+(((-1.0)*pz))+((r21*x1328))+(((-1.0)*r20*x1323)));
evalcond[3]=(((r11*x1328))+(((-0.27155)*x1331))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x1334))+(((-1.0)*r10*x1323)));
evalcond[4]=(x1331+(((-1.0)*x1335))+((cj5*r21*x1325))+((r22*x1330))+((x1325*x1326))+((r20*x1329))+(((-1.0)*r21*x1332)));
evalcond[5]=(((r12*x1330))+((cj5*r11*x1325))+((r10*x1329))+((x1325*x1327))+(((-1.0)*x1338))+(((-1.0)*r11*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1339=(cj4*r12);
IkReal x1340=(cj5*sj4);
IkReal x1341=(r21*sj0);
IkReal x1342=((1.0)*cj1);
IkReal x1343=(r10*sj4*sj5);
IkReal x1344=(r20*sj0*sj4*sj5);
IkReal x1345=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1346.valid){
continue;
}
CheckValue<IkReal> x1347 = IKatan2WithCheck(IkReal((((sj1*x1343))+((cj1*x1344))+(((-1.0)*sj1*x1339))+(((-1.0)*cj4*r22*sj0*x1342))+((r11*sj1*x1340))+((cj1*x1340*x1341)))),IkReal((((sj1*x1340*x1341))+((sj1*x1344))+(((-1.0)*r11*x1340*x1342))+(((-1.0)*sj1*x1345))+((cj1*x1339))+(((-1.0)*x1342*x1343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1347.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1346.value)))+(x1347.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1348=IKcos(j2);
IkReal x1349=IKsin(j2);
IkReal x1350=(cj5*r21);
IkReal x1351=(cj3*cj4);
IkReal x1352=(r11*sj5);
IkReal x1353=((1.0)*sj3);
IkReal x1354=((1.0)*cj4);
IkReal x1355=((0.27155)*cj0);
IkReal x1356=((0.07155)*cj5);
IkReal x1357=(cj5*sj4);
IkReal x1358=((0.07155)*sj5);
IkReal x1359=((0.27155)*sj0);
IkReal x1360=((1.0)*sj1);
IkReal x1361=(r20*sj5);
IkReal x1362=(r10*sj5);
IkReal x1363=(cj3*sj4);
IkReal x1364=(cj5*sj3);
IkReal x1365=(r00*sj5);
IkReal x1366=((0.3571)*sj1);
IkReal x1367=(cj1*x1348);
IkReal x1368=(sj0*x1349);
IkReal x1369=(sj1*x1348);
IkReal x1370=(cj0*x1349);
IkReal x1371=(cj1*x1349);
IkReal x1372=(sj1*x1349);
evalcond[0]=(((sj4*x1350))+(((-1.0)*x1371))+((sj4*x1361))+(((-1.0)*r22*x1354))+(((-1.0)*x1348*x1360)));
evalcond[1]=((((-1.0)*r02*x1354))+((sj4*x1365))+((cj0*x1367))+(((-1.0)*x1360*x1370))+((r01*x1357)));
evalcond[2]=((((-1.0)*r12*x1354))+((sj0*x1367))+((sj4*x1362))+((r11*x1357))+(((-1.0)*x1360*x1368)));
evalcond[3]=((((-1.0)*r20*x1356))+(((0.3571)*cj1))+(((-0.27155)*x1371))+(((-1.0)*pz))+(((-0.27155)*x1369))+((r21*x1358)));
evalcond[4]=(((x1355*x1367))+(((-1.0)*px))+(((-1.0)*x1355*x1372))+(((-1.0)*r00*x1356))+((cj0*x1366))+((r01*x1358)));
evalcond[5]=((((-1.0)*r10*x1356))+((sj0*x1366))+((x1359*x1367))+(((-1.0)*py))+(((-1.0)*x1359*x1372))+(((0.07155)*x1352)));
evalcond[6]=(x1367+((r22*x1363))+((r20*x1364))+(((-1.0)*r21*sj5*x1353))+((x1350*x1351))+(((-1.0)*x1349*x1360))+((x1351*x1361)));
evalcond[7]=(((cj5*r01*x1351))+((r02*x1363))+((cj1*x1370))+(((-1.0)*r01*sj5*x1353))+((cj0*x1369))+((x1351*x1365))+((r00*x1364)));
evalcond[8]=(((cj5*r11*x1351))+(((-1.0)*x1352*x1353))+((r10*x1364))+((sj0*x1369))+((cj1*x1368))+((r12*x1363))+((x1351*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1373=((1.0)*cj4);
IkReal x1374=(cj0*cj1);
IkReal x1375=(sj4*sj5);
IkReal x1376=(cj5*sj4);
IkReal x1377=((1.0)*cj1);
IkReal x1378=(cj0*sj1);
IkReal x1379=(sj1*x1376);
CheckValue<IkReal> x1380 = IKatan2WithCheck(IkReal((((r20*x1374*x1375))+(((-1.0)*r02*sj1*x1373))+(((-1.0)*r22*x1373*x1374))+((r21*x1374*x1376))+((r00*sj1*x1375))+((r01*x1379)))),IkReal((((r20*x1375*x1378))+(((-1.0)*r01*x1376*x1377))+((cj1*cj4*r02))+(((-1.0)*r22*x1373*x1378))+((r21*x1376*x1378))+(((-1.0)*r00*x1375*x1377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1381.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1380.value)+(((1.5707963267949)*(x1381.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1382=IKcos(j2);
IkReal x1383=IKsin(j2);
IkReal x1384=(cj5*r21);
IkReal x1385=(cj3*cj4);
IkReal x1386=(r11*sj5);
IkReal x1387=((1.0)*sj3);
IkReal x1388=((1.0)*cj4);
IkReal x1389=((0.27155)*cj0);
IkReal x1390=((0.07155)*cj5);
IkReal x1391=(cj5*sj4);
IkReal x1392=((0.07155)*sj5);
IkReal x1393=((0.27155)*sj0);
IkReal x1394=((1.0)*sj1);
IkReal x1395=(r20*sj5);
IkReal x1396=(r10*sj5);
IkReal x1397=(cj3*sj4);
IkReal x1398=(cj5*sj3);
IkReal x1399=(r00*sj5);
IkReal x1400=((0.3571)*sj1);
IkReal x1401=(cj1*x1382);
IkReal x1402=(sj0*x1383);
IkReal x1403=(sj1*x1382);
IkReal x1404=(cj0*x1383);
IkReal x1405=(cj1*x1383);
IkReal x1406=(sj1*x1383);
evalcond[0]=((((-1.0)*x1405))+((sj4*x1384))+((sj4*x1395))+(((-1.0)*x1382*x1394))+(((-1.0)*r22*x1388)));
evalcond[1]=((((-1.0)*r02*x1388))+((sj4*x1399))+((cj0*x1401))+((r01*x1391))+(((-1.0)*x1394*x1404)));
evalcond[2]=((((-1.0)*r12*x1388))+((sj4*x1396))+((sj0*x1401))+((r11*x1391))+(((-1.0)*x1394*x1402)));
evalcond[3]=((((-1.0)*r20*x1390))+((r21*x1392))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1405))+(((-0.27155)*x1403)));
evalcond[4]=((((-1.0)*x1389*x1406))+((x1389*x1401))+((cj0*x1400))+(((-1.0)*px))+(((-1.0)*r00*x1390))+((r01*x1392)));
evalcond[5]=(((x1393*x1401))+(((-1.0)*r10*x1390))+(((-1.0)*py))+(((-1.0)*x1393*x1406))+((sj0*x1400))+(((0.07155)*x1386)));
evalcond[6]=((((-1.0)*x1383*x1394))+((r20*x1398))+(((-1.0)*r21*sj5*x1387))+x1401+((x1385*x1395))+((x1384*x1385))+((r22*x1397)));
evalcond[7]=(((cj5*r01*x1385))+((cj0*x1403))+((x1385*x1399))+((r00*x1398))+((cj1*x1404))+((r02*x1397))+(((-1.0)*r01*sj5*x1387)));
evalcond[8]=(((r10*x1398))+((sj0*x1403))+((cj5*r11*x1385))+((x1385*x1396))+(((-1.0)*x1386*x1387))+((r12*x1397))+((cj1*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1407=((0.07155)*sj0);
IkReal x1408=((0.27155)*sj0);
IkReal x1409=(sj4*sj5);
IkReal x1410=(cj5*sj4);
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(sj0,-2);
if(!x1411.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1411.value)*(((((-1.0)*r10*x1408*x1409))+(((-1.0)*cj5*r10*x1407))+((r11*sj5*x1407))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1408*x1410))+((cj4*r12*x1408)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1409))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r21*x1410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1411.value)*(((((-1.0)*r10*x1408*x1409))+(((-1.0)*cj5*r10*x1407))+((r11*sj5*x1407))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1408*x1410))+((cj4*r12*x1408))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1409))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r21*x1410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1411.value)*(((((-1.0)*r10*x1408*x1409))+(((-1.0)*cj5*r10*x1407))+((r11*sj5*x1407))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1408*x1410))+((cj4*r12*x1408))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1409))+(((-0.76043125175021)*cj4*r22))+(((0.76043125175021)*r21*x1410))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1412=IKsin(j1);
IkReal x1413=IKcos(j1);
IkReal x1414=((0.07155)*cj5);
IkReal x1415=(r00*sj0);
IkReal x1416=(cj3*cj4);
IkReal x1417=(cj0*sj5);
IkReal x1418=((0.07155)*r11);
IkReal x1419=(cj5*sj3);
IkReal x1420=((0.27155)*sj4);
IkReal x1421=(cj3*r22);
IkReal x1422=(cj5*r11);
IkReal x1423=((0.27155)*r20);
IkReal x1424=((1.0)*sj0);
IkReal x1425=(sj0*sj5);
IkReal x1426=((0.27155)*sj5);
IkReal x1427=((1.0)*pz);
IkReal x1428=((0.07155)*r21);
IkReal x1429=(cj5*r01);
IkReal x1430=((0.27155)*cj4);
IkReal x1431=(cj5*r21);
IkReal x1432=((1.0)*cj0);
IkReal x1433=(sj0*x1423);
IkReal x1434=((0.3571)*x1413);
IkReal x1435=((0.07155)*r01*sj5);
IkReal x1436=((0.3571)*x1412);
IkReal x1437=((0.27155)*r21*sj3);
IkReal x1438=(cj0*x1436);
IkReal x1439=(sj0*x1438);
evalcond[0]=((((-1.0)*x1420*x1431))+(((-1.0)*r20*sj5*x1420))+x1434+(((-1.0)*r20*x1414))+((sj5*x1428))+((r22*x1430))+(((-1.0)*x1427)));
evalcond[1]=(((r12*sj0*x1430))+(((-1.0)*py*x1424))+((x1436*(sj0*sj0)))+(((-1.0)*sj0*x1420*x1422))+((x1418*x1425))+(((-1.0)*r10*sj0*x1414))+(((-1.0)*r10*x1420*x1425)));
evalcond[2]=((((-1.0)*cj0*r00*x1414))+((cj0*x1438))+(((-1.0)*cj0*x1420*x1429))+(((-1.0)*px*x1432))+((cj0*r02*x1430))+(((0.07155)*r01*x1417))+(((-1.0)*r00*x1417*x1420)));
evalcond[3]=((((0.27155)*sj0*x1416*x1431))+(((-1.0)*sj0*x1436))+((x1419*x1433))+((sj0*x1420*x1421))+((x1416*x1423*x1425))+py+(((-1.0)*x1425*x1437))+((r10*x1414))+(((-1.0)*sj5*x1418)));
evalcond[4]=((((-1.0)*x1435))+(((-1.0)*x1438))+((r00*x1414))+(((0.27155)*cj0*x1416*x1431))+px+((cj0*x1419*x1423))+(((-1.0)*x1417*x1437))+((x1416*x1417*x1423))+((cj0*x1420*x1421)));
evalcond[5]=(((x1425*x1428))+(((-1.0)*r20*sj0*x1414))+(((-1.0)*pz*x1424))+((sj0*x1434))+((cj3*r12*x1420))+(((0.27155)*x1416*x1422))+(((0.27155)*r10*x1419))+((r10*x1416*x1426))+(((-1.0)*r11*sj3*x1426)));
evalcond[6]=((((-1.0)*cj0*x1427))+(((0.27155)*r00*x1419))+((cj0*x1434))+(((-1.0)*r01*sj3*x1426))+(((-1.0)*cj0*r20*x1414))+((cj3*r02*x1420))+(((0.27155)*x1416*x1429))+((x1417*x1428))+((r00*x1416*x1426)));
evalcond[7]=((((-1.0)*px*x1424))+(((-1.0)*x1414*x1415))+(((-1.0)*cj0*x1420*x1422))+(((-1.0)*r10*x1417*x1420))+((cj0*r12*x1430))+x1439+(((0.07155)*r01*x1425)));
evalcond[8]=(((x1417*x1418))+(((-1.0)*cj0*r10*x1414))+(((-1.0)*sj5*x1415*x1420))+x1439+(((-1.0)*sj0*x1420*x1429))+(((-1.0)*py*x1432))+((r02*sj0*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1440=(cj5*sj4);
IkReal x1441=(cj4*r02);
IkReal x1442=((1.0)*cj1);
IkReal x1443=(sj4*sj5);
IkReal x1444=((1.0)*cj4*r22);
IkReal x1445=(sj1*x1443);
if( IKabs((((r01*sj1*x1440))+((cj1*r21*x1440))+(((-1.0)*cj4*r22*x1442))+((cj1*r20*x1443))+(((-1.0)*sj1*x1441))+((r00*x1445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1441))+((r21*sj1*x1440))+(((-1.0)*sj1*x1444))+(((-1.0)*r01*x1440*x1442))+((r20*x1445))+(((-1.0)*r00*x1442*x1443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x1440))+((cj1*r21*x1440))+(((-1.0)*cj4*r22*x1442))+((cj1*r20*x1443))+(((-1.0)*sj1*x1441))+((r00*x1445))))+IKsqr((((cj1*x1441))+((r21*sj1*x1440))+(((-1.0)*sj1*x1444))+(((-1.0)*r01*x1440*x1442))+((r20*x1445))+(((-1.0)*r00*x1442*x1443))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x1440))+((cj1*r21*x1440))+(((-1.0)*cj4*r22*x1442))+((cj1*r20*x1443))+(((-1.0)*sj1*x1441))+((r00*x1445))), (((cj1*x1441))+((r21*sj1*x1440))+(((-1.0)*sj1*x1444))+(((-1.0)*r01*x1440*x1442))+((r20*x1445))+(((-1.0)*r00*x1442*x1443))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1446=IKcos(j2);
IkReal x1447=IKsin(j2);
IkReal x1448=(cj3*sj4);
IkReal x1449=((1.0)*cj4);
IkReal x1450=(r00*sj5);
IkReal x1451=(cj3*cj4);
IkReal x1452=(cj5*sj4);
IkReal x1453=((0.07155)*sj5);
IkReal x1454=(cj5*r20);
IkReal x1455=(cj5*r00);
IkReal x1456=(r20*sj5);
IkReal x1457=(cj1*x1446);
IkReal x1458=(sj1*x1446);
IkReal x1459=(cj1*x1447);
IkReal x1460=((1.0)*sj3*sj5);
IkReal x1461=(sj1*x1447);
IkReal x1462=((1.0)*x1461);
evalcond[0]=((((-1.0)*x1462))+((r01*x1452))+x1457+((sj4*x1450))+(((-1.0)*r02*x1449)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1458))+(((-1.0)*x1459))+((r21*x1452))+((sj4*x1456)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x1458))+(((-0.27155)*x1459))+(((-1.0)*pz))+((r21*x1453))+(((-0.07155)*x1454)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x1461))+(((-1.0)*px))+((r01*x1453))+(((0.27155)*x1457))+(((-0.07155)*x1455)));
evalcond[4]=(((cj5*r01*x1451))+((x1450*x1451))+((sj3*x1455))+((r02*x1448))+(((-1.0)*r01*x1460))+x1458+x1459);
evalcond[5]=(((r22*x1448))+(((-1.0)*x1462))+((sj3*x1454))+(((-1.0)*r21*x1460))+x1457+((cj5*r21*x1451))+((x1451*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1463=(cj4*r02);
IkReal x1464=(cj5*sj4);
IkReal x1465=((1.0)*sj1);
IkReal x1466=(sj4*sj5);
IkReal x1467=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r00*x1465*x1466))+(((-1.0)*cj1*x1467))+((cj1*r21*x1464))+((cj1*r20*x1466))+(((-1.0)*r01*x1464*x1465))+((sj1*x1463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1465))+((r21*sj1*x1464))+((cj1*r01*x1464))+((cj1*r00*x1466))+(((-1.0)*cj1*x1463))+((r20*sj1*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1465*x1466))+(((-1.0)*cj1*x1467))+((cj1*r21*x1464))+((cj1*r20*x1466))+(((-1.0)*r01*x1464*x1465))+((sj1*x1463))))+IKsqr(((((-1.0)*cj4*r22*x1465))+((r21*sj1*x1464))+((cj1*r01*x1464))+((cj1*r00*x1466))+(((-1.0)*cj1*x1463))+((r20*sj1*x1466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1465*x1466))+(((-1.0)*cj1*x1467))+((cj1*r21*x1464))+((cj1*r20*x1466))+(((-1.0)*r01*x1464*x1465))+((sj1*x1463))), ((((-1.0)*cj4*r22*x1465))+((r21*sj1*x1464))+((cj1*r01*x1464))+((cj1*r00*x1466))+(((-1.0)*cj1*x1463))+((r20*sj1*x1466))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1468=IKcos(j2);
IkReal x1469=IKsin(j2);
IkReal x1470=(cj3*sj4);
IkReal x1471=((1.0)*cj4);
IkReal x1472=(cj5*sj4);
IkReal x1473=((0.07155)*sj5);
IkReal x1474=(cj5*r20);
IkReal x1475=(sj4*sj5);
IkReal x1476=(cj5*r00);
IkReal x1477=(cj1*x1468);
IkReal x1478=(cj3*cj4*sj5);
IkReal x1479=(sj1*x1468);
IkReal x1480=((0.27155)*x1469);
IkReal x1481=((1.0)*sj3*sj5);
IkReal x1482=(sj1*x1469);
IkReal x1483=(cj3*cj4*cj5);
IkReal x1484=((1.0)*x1479);
IkReal x1485=((1.0)*cj1*x1469);
IkReal x1486=(x1485+x1484);
evalcond[0]=((((-1.0)*x1477))+x1482+(((-1.0)*r02*x1471))+((r01*x1472))+((r00*x1475)));
evalcond[1]=((((-1.0)*r22*x1471))+(((-1.0)*x1486))+((r21*x1472))+((r20*x1475)));
evalcond[2]=((((-0.07155)*x1474))+((r21*x1473))+(((0.3571)*cj1))+(((-1.0)*cj1*x1480))+(((-1.0)*pz))+(((-0.27155)*x1479)));
evalcond[3]=((((-0.07155)*x1476))+((sj1*x1480))+(((-1.0)*px))+(((-0.3571)*sj1))+((r01*x1473))+(((-0.27155)*x1477)));
evalcond[4]=((((-1.0)*r21*x1481))+((r22*x1470))+((r21*x1483))+(((-1.0)*x1482))+x1477+((r20*x1478))+((sj3*x1474)));
evalcond[5]=((((-1.0)*r01*x1481))+(((-1.0)*x1486))+((r01*x1483))+((r02*x1470))+((sj3*x1476))+((r00*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1487=(cj1*cj4);
IkReal x1488=((1.0)*r22);
IkReal x1489=(cj4*sj1);
IkReal x1490=(sj4*sj5);
IkReal x1491=(cj1*cj5*sj4);
IkReal x1492=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x1487*x1488))+((cj1*r20*x1490))+((r21*x1491))+((r11*x1492))+((r10*sj1*x1490))+(((-1.0)*r12*x1489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1491))+((r12*x1487))+((r21*x1492))+(((-1.0)*cj1*r10*x1490))+(((-1.0)*x1488*x1489))+((r20*sj1*x1490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1487*x1488))+((cj1*r20*x1490))+((r21*x1491))+((r11*x1492))+((r10*sj1*x1490))+(((-1.0)*r12*x1489))))+IKsqr(((((-1.0)*r11*x1491))+((r12*x1487))+((r21*x1492))+(((-1.0)*cj1*r10*x1490))+(((-1.0)*x1488*x1489))+((r20*sj1*x1490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1487*x1488))+((cj1*r20*x1490))+((r21*x1491))+((r11*x1492))+((r10*sj1*x1490))+(((-1.0)*r12*x1489))), ((((-1.0)*r11*x1491))+((r12*x1487))+((r21*x1492))+(((-1.0)*cj1*r10*x1490))+(((-1.0)*x1488*x1489))+((r20*sj1*x1490))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1493=IKcos(j2);
IkReal x1494=IKsin(j2);
IkReal x1495=((1.0)*cj4);
IkReal x1496=((0.07155)*cj5);
IkReal x1497=(cj5*sj4);
IkReal x1498=(cj3*cj4);
IkReal x1499=(r20*sj5);
IkReal x1500=(r10*sj5);
IkReal x1501=((0.07155)*sj5);
IkReal x1502=(cj5*sj3);
IkReal x1503=(cj3*sj4);
IkReal x1504=(cj1*x1493);
IkReal x1505=((1.0)*sj3*sj5);
IkReal x1506=(cj1*x1494);
IkReal x1507=(sj1*x1493);
IkReal x1508=(sj1*x1494);
IkReal x1509=((1.0)*x1508);
evalcond[0]=((((-1.0)*x1509))+(((-1.0)*r12*x1495))+((r11*x1497))+x1504+((sj4*x1500)));
evalcond[1]=((((-1.0)*x1506))+(((-1.0)*x1507))+((r21*x1497))+((sj4*x1499))+(((-1.0)*r22*x1495)));
evalcond[2]=((((-1.0)*r20*x1496))+(((0.3571)*cj1))+(((-0.27155)*x1507))+(((-0.27155)*x1506))+(((-1.0)*pz))+((r21*x1501)));
evalcond[3]=(((r11*x1501))+(((0.3571)*sj1))+(((-0.27155)*x1508))+(((-1.0)*py))+(((0.27155)*x1504))+(((-1.0)*r10*x1496)));
evalcond[4]=(((cj5*r11*x1498))+((x1498*x1500))+((r12*x1503))+((r10*x1502))+x1506+x1507+(((-1.0)*r11*x1505)));
evalcond[5]=(((x1498*x1499))+(((-1.0)*x1509))+((cj5*r21*x1498))+((r20*x1502))+x1504+((r22*x1503))+(((-1.0)*r21*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1510=(cj4*sj1);
IkReal x1511=(cj5*sj4);
IkReal x1512=((1.0)*sj1);
IkReal x1513=(sj4*sj5);
IkReal x1514=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x1514))+((r12*x1510))+((cj1*r20*x1513))+((cj1*r21*x1511))+(((-1.0)*r11*x1511*x1512))+(((-1.0)*r10*x1512*x1513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1510))+((r21*sj1*x1511))+((r20*sj1*x1513))+((cj1*r10*x1513))+((cj1*r11*x1511))+(((-1.0)*r12*x1514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1514))+((r12*x1510))+((cj1*r20*x1513))+((cj1*r21*x1511))+(((-1.0)*r11*x1511*x1512))+(((-1.0)*r10*x1512*x1513))))+IKsqr(((((-1.0)*r22*x1510))+((r21*sj1*x1511))+((r20*sj1*x1513))+((cj1*r10*x1513))+((cj1*r11*x1511))+(((-1.0)*r12*x1514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1514))+((r12*x1510))+((cj1*r20*x1513))+((cj1*r21*x1511))+(((-1.0)*r11*x1511*x1512))+(((-1.0)*r10*x1512*x1513))), ((((-1.0)*r22*x1510))+((r21*sj1*x1511))+((r20*sj1*x1513))+((cj1*r10*x1513))+((cj1*r11*x1511))+(((-1.0)*r12*x1514))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1515=IKcos(j2);
IkReal x1516=IKsin(j2);
IkReal x1517=((1.0)*cj4);
IkReal x1518=((0.07155)*cj5);
IkReal x1519=(cj5*sj4);
IkReal x1520=(cj3*cj4);
IkReal x1521=(r20*sj5);
IkReal x1522=(r10*sj5);
IkReal x1523=((0.07155)*sj5);
IkReal x1524=(cj5*sj3);
IkReal x1525=(cj3*sj4);
IkReal x1526=(cj1*x1515);
IkReal x1527=((1.0)*sj3*sj5);
IkReal x1528=(sj1*x1515);
IkReal x1529=((0.27155)*x1516);
IkReal x1530=(sj1*x1516);
IkReal x1531=((1.0)*x1528);
IkReal x1532=((1.0)*cj1*x1516);
IkReal x1533=(x1532+x1531);
evalcond[0]=(((r11*x1519))+x1530+((sj4*x1522))+(((-1.0)*x1526))+(((-1.0)*r12*x1517)));
evalcond[1]=((((-1.0)*r22*x1517))+(((-1.0)*x1533))+((r21*x1519))+((sj4*x1521)));
evalcond[2]=((((-1.0)*r20*x1518))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1523))+(((-0.27155)*x1528))+(((-1.0)*cj1*x1529)));
evalcond[3]=(((r11*x1523))+((sj1*x1529))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-0.27155)*x1526))+(((-1.0)*r10*x1518)));
evalcond[4]=((((-1.0)*x1530))+((cj5*r21*x1520))+((r20*x1524))+((x1520*x1521))+x1526+((r22*x1525))+(((-1.0)*r21*x1527)));
evalcond[5]=(((r10*x1524))+(((-1.0)*r11*x1527))+((r12*x1525))+(((-1.0)*x1533))+((x1520*x1522))+((cj5*r11*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1534=(cj4*r12);
IkReal x1535=(cj5*sj4);
IkReal x1536=(r21*sj0);
IkReal x1537=((1.0)*cj1);
IkReal x1538=(r10*sj4*sj5);
IkReal x1539=(r20*sj0*sj4*sj5);
IkReal x1540=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1534))+((cj1*x1539))+((sj1*x1538))+((r11*sj1*x1535))+((cj1*x1535*x1536))+(((-1.0)*cj4*r22*sj0*x1537)))),IkReal(((((-1.0)*x1537*x1538))+((cj1*x1534))+((sj1*x1539))+(((-1.0)*r11*x1535*x1537))+((sj1*x1535*x1536))+(((-1.0)*sj1*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1541.value)))+(x1542.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1543=IKcos(j2);
IkReal x1544=IKsin(j2);
IkReal x1545=(cj5*r21);
IkReal x1546=(cj3*cj4);
IkReal x1547=(r11*sj5);
IkReal x1548=((1.0)*sj3);
IkReal x1549=((1.0)*cj4);
IkReal x1550=((0.27155)*cj0);
IkReal x1551=((0.07155)*cj5);
IkReal x1552=(cj5*sj4);
IkReal x1553=((0.07155)*sj5);
IkReal x1554=((0.27155)*sj0);
IkReal x1555=((1.0)*sj1);
IkReal x1556=(r20*sj5);
IkReal x1557=(r10*sj5);
IkReal x1558=(cj3*sj4);
IkReal x1559=(cj5*sj3);
IkReal x1560=(r00*sj5);
IkReal x1561=((0.3571)*sj1);
IkReal x1562=(cj1*x1543);
IkReal x1563=(sj0*x1544);
IkReal x1564=(sj1*x1543);
IkReal x1565=(cj0*x1544);
IkReal x1566=(cj1*x1544);
IkReal x1567=(sj1*x1544);
evalcond[0]=(((sj4*x1556))+(((-1.0)*x1543*x1555))+(((-1.0)*r22*x1549))+((sj4*x1545))+(((-1.0)*x1566)));
evalcond[1]=(((r01*x1552))+(((-1.0)*r02*x1549))+(((-1.0)*x1555*x1565))+((sj4*x1560))+((cj0*x1562)));
evalcond[2]=(((sj4*x1557))+(((-1.0)*x1555*x1563))+((r11*x1552))+((sj0*x1562))+(((-1.0)*r12*x1549)));
evalcond[3]=((((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1566))+(((-0.27155)*x1564))+(((-1.0)*r20*x1551))+((r21*x1553)));
evalcond[4]=(((r01*x1553))+((x1550*x1562))+(((-1.0)*px))+(((-1.0)*x1550*x1567))+((cj0*x1561))+(((-1.0)*r00*x1551)));
evalcond[5]=(((x1554*x1562))+(((-1.0)*py))+((sj0*x1561))+(((0.07155)*x1547))+(((-1.0)*x1554*x1567))+(((-1.0)*r10*x1551)));
evalcond[6]=(((r22*x1558))+x1562+(((-1.0)*x1544*x1555))+((x1546*x1556))+((x1545*x1546))+((r20*x1559))+(((-1.0)*r21*sj5*x1548)));
evalcond[7]=(((r00*x1559))+(((-1.0)*r01*sj5*x1548))+((cj1*x1565))+((x1546*x1560))+((r02*x1558))+((cj0*x1564))+((cj5*r01*x1546)));
evalcond[8]=(((cj1*x1563))+((cj5*r11*x1546))+((sj0*x1564))+((r12*x1558))+(((-1.0)*x1547*x1548))+((x1546*x1557))+((r10*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1568=((1.0)*cj4);
IkReal x1569=(cj0*cj1);
IkReal x1570=(sj4*sj5);
IkReal x1571=(cj5*sj4);
IkReal x1572=((1.0)*cj1);
IkReal x1573=(cj0*sj1);
IkReal x1574=(sj1*x1571);
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((((r21*x1569*x1571))+((r00*sj1*x1570))+(((-1.0)*r02*sj1*x1568))+(((-1.0)*r22*x1568*x1569))+((r01*x1574))+((r20*x1569*x1570)))),IkReal((((cj1*cj4*r02))+(((-1.0)*r00*x1570*x1572))+((r20*x1570*x1573))+(((-1.0)*r22*x1568*x1573))+((r21*x1571*x1573))+(((-1.0)*r01*x1571*x1572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1575.value)))+(x1576.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1577=IKcos(j2);
IkReal x1578=IKsin(j2);
IkReal x1579=(cj5*r21);
IkReal x1580=(cj3*cj4);
IkReal x1581=(r11*sj5);
IkReal x1582=((1.0)*sj3);
IkReal x1583=((1.0)*cj4);
IkReal x1584=((0.27155)*cj0);
IkReal x1585=((0.07155)*cj5);
IkReal x1586=(cj5*sj4);
IkReal x1587=((0.07155)*sj5);
IkReal x1588=((0.27155)*sj0);
IkReal x1589=((1.0)*sj1);
IkReal x1590=(r20*sj5);
IkReal x1591=(r10*sj5);
IkReal x1592=(cj3*sj4);
IkReal x1593=(cj5*sj3);
IkReal x1594=(r00*sj5);
IkReal x1595=((0.3571)*sj1);
IkReal x1596=(cj1*x1577);
IkReal x1597=(sj0*x1578);
IkReal x1598=(sj1*x1577);
IkReal x1599=(cj0*x1578);
IkReal x1600=(cj1*x1578);
IkReal x1601=(sj1*x1578);
evalcond[0]=((((-1.0)*x1600))+(((-1.0)*x1577*x1589))+((sj4*x1579))+((sj4*x1590))+(((-1.0)*r22*x1583)));
evalcond[1]=(((r01*x1586))+(((-1.0)*r02*x1583))+((sj4*x1594))+(((-1.0)*x1589*x1599))+((cj0*x1596)));
evalcond[2]=(((r11*x1586))+((sj4*x1591))+(((-1.0)*x1589*x1597))+((sj0*x1596))+(((-1.0)*r12*x1583)));
evalcond[3]=((((0.3571)*cj1))+(((-0.27155)*x1598))+(((-1.0)*pz))+(((-1.0)*r20*x1585))+((r21*x1587))+(((-0.27155)*x1600)));
evalcond[4]=(((r01*x1587))+((x1584*x1596))+(((-1.0)*r00*x1585))+(((-1.0)*px))+((cj0*x1595))+(((-1.0)*x1584*x1601)));
evalcond[5]=((((-1.0)*x1588*x1601))+((x1588*x1596))+(((-1.0)*py))+(((0.07155)*x1581))+((sj0*x1595))+(((-1.0)*r10*x1585)));
evalcond[6]=((((-1.0)*x1578*x1589))+((r20*x1593))+(((-1.0)*r21*sj5*x1582))+((x1580*x1590))+x1596+((r22*x1592))+((x1579*x1580)));
evalcond[7]=(((r00*x1593))+((cj1*x1599))+((cj5*r01*x1580))+(((-1.0)*r01*sj5*x1582))+((x1580*x1594))+((r02*x1592))+((cj0*x1598)));
evalcond[8]=(((cj1*x1597))+((cj5*r11*x1580))+((r12*x1592))+((x1580*x1591))+((sj0*x1598))+(((-1.0)*x1581*x1582))+((r10*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1602=(cj0*r21);
IkReal x1603=((1.0)*cj5);
IkReal x1604=((1.0)*sj4);
IkReal x1605=(cj0*r20);
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x1604))+(((-1.0)*r01*sj4*x1603))+((cj4*r02)))),-1);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((((sj5*x1602))+(((-1.0)*x1603*x1605)))),IkReal(((((-1.0)*cj4*x1602*x1603))+(((-1.0)*cj0*r22*x1604))+(((-1.0)*cj4*sj5*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1606.value)))+(x1607.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1608=IKsin(j3);
IkReal x1609=IKcos(j3);
IkReal x1610=(sj4*x1608);
IkReal x1611=(sj5*x1609);
IkReal x1612=(cj4*cj5*x1608);
IkReal x1613=(cj4*sj5*x1608);
IkReal x1614=((1.0)*cj5*x1609);
evalcond[0]=(((r20*x1613))+(((-1.0)*r20*x1614))+((r21*x1611))+((r21*x1612))+((r22*x1610)));
evalcond[1]=(sj0+((r01*x1612))+((r01*x1611))+((r00*x1613))+(((-1.0)*r00*x1614))+((r02*x1610)));
evalcond[2]=(((r12*x1610))+((r11*x1612))+((r11*x1611))+(((-1.0)*r10*x1614))+((r10*x1613))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1615=((0.76043125175021)*sj4);
IkReal x1616=((0.200364043685242)*sj5);
IkReal x1617=((0.200364043685242)*cj5);
IkReal x1618=((0.76043125175021)*cj4);
if( IKabs(((((-1.0)*r11*x1616))+(((-1.0)*r12*x1618))+(((2.80033604032484)*py))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r10*x1617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1617))+(((-1.0)*r21*x1616))+((r20*sj5*x1615))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1618))+((cj5*r21*x1615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1616))+(((-1.0)*r12*x1618))+(((2.80033604032484)*py))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r10*x1617))))+IKsqr((((r20*x1617))+(((-1.0)*r21*x1616))+((r20*sj5*x1615))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1618))+((cj5*r21*x1615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x1616))+(((-1.0)*r12*x1618))+(((2.80033604032484)*py))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r10*x1617))), (((r20*x1617))+(((-1.0)*r21*x1616))+((r20*sj5*x1615))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1618))+((cj5*r21*x1615))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1619=((1.0)*pz);
IkReal x1620=((0.27155)*sj5);
IkReal x1621=((0.07155)*cj5);
IkReal x1622=(cj3*cj4);
IkReal x1623=((0.27155)*sj4);
IkReal x1624=((0.27155)*cj4);
IkReal x1625=((0.07155)*sj5);
IkReal x1626=(cj5*r21);
IkReal x1627=(r10*x1621);
IkReal x1628=(r11*x1625);
IkReal x1629=((0.3571)*(IKsin(j1)));
IkReal x1630=(r21*x1625);
IkReal x1631=((0.3571)*(IKcos(j1)));
IkReal x1632=(r20*x1621);
IkReal x1633=((0.27155)*cj5*r11);
IkReal x1634=((0.27155)*cj5*sj3);
IkReal x1635=(x1619+x1632);
IkReal x1636=(x1629+x1628);
IkReal x1637=(x1630+x1631);
evalcond[0]=(x1637+(((-1.0)*r20*sj4*x1620))+(((-1.0)*x1635))+(((-1.0)*x1623*x1626))+((r22*x1624)));
evalcond[1]=((((-1.0)*r10*sj4*x1620))+x1636+(((-1.0)*x1627))+((r12*x1624))+(((-1.0)*py))+(((-1.0)*cj5*r11*x1623)));
evalcond[2]=(((r20*x1620*x1622))+((r20*x1634))+x1627+(((-1.0)*x1636))+(((-1.0)*r21*sj3*x1620))+py+(((0.27155)*x1622*x1626))+((cj3*r22*x1623)));
evalcond[3]=((((-1.0)*r11*sj3*x1620))+x1637+((r10*x1634))+((cj3*r12*x1623))+(((-1.0)*x1635))+((x1622*x1633))+((r10*x1620*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1638=(cj1*cj4);
IkReal x1639=((1.0)*r22);
IkReal x1640=(cj4*sj1);
IkReal x1641=(sj4*sj5);
IkReal x1642=(cj1*cj5*sj4);
IkReal x1643=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x1641))+((r21*x1642))+((r11*x1643))+((r10*sj1*x1641))+(((-1.0)*x1638*x1639))+(((-1.0)*r12*x1640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1641))+((r21*x1643))+((r12*x1638))+(((-1.0)*x1639*x1640))+(((-1.0)*r11*x1642))+(((-1.0)*cj1*r10*x1641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1641))+((r21*x1642))+((r11*x1643))+((r10*sj1*x1641))+(((-1.0)*x1638*x1639))+(((-1.0)*r12*x1640))))+IKsqr((((r20*sj1*x1641))+((r21*x1643))+((r12*x1638))+(((-1.0)*x1639*x1640))+(((-1.0)*r11*x1642))+(((-1.0)*cj1*r10*x1641))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1641))+((r21*x1642))+((r11*x1643))+((r10*sj1*x1641))+(((-1.0)*x1638*x1639))+(((-1.0)*r12*x1640))), (((r20*sj1*x1641))+((r21*x1643))+((r12*x1638))+(((-1.0)*x1639*x1640))+(((-1.0)*r11*x1642))+(((-1.0)*cj1*r10*x1641))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1644=IKcos(j2);
IkReal x1645=IKsin(j2);
IkReal x1646=((1.0)*cj4);
IkReal x1647=((0.07155)*cj5);
IkReal x1648=(cj5*sj4);
IkReal x1649=(cj3*cj4);
IkReal x1650=(r20*sj5);
IkReal x1651=(r10*sj5);
IkReal x1652=((0.07155)*sj5);
IkReal x1653=(cj5*sj3);
IkReal x1654=(cj3*sj4);
IkReal x1655=(cj1*x1644);
IkReal x1656=((1.0)*sj3*sj5);
IkReal x1657=(cj1*x1645);
IkReal x1658=(sj1*x1644);
IkReal x1659=(sj1*x1645);
IkReal x1660=((1.0)*x1659);
evalcond[0]=(((r11*x1648))+(((-1.0)*r12*x1646))+x1655+(((-1.0)*x1660))+((sj4*x1651)));
evalcond[1]=(((r21*x1648))+(((-1.0)*r22*x1646))+(((-1.0)*x1658))+(((-1.0)*x1657))+((sj4*x1650)));
evalcond[2]=((((-0.27155)*x1657))+(((-0.27155)*x1658))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1647))+((r21*x1652)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x1659))+((r11*x1652))+(((-1.0)*py))+(((0.27155)*x1655))+(((-1.0)*r10*x1647)));
evalcond[4]=(((r10*x1653))+((r12*x1654))+x1658+x1657+(((-1.0)*r11*x1656))+((cj5*r11*x1649))+((x1649*x1651)));
evalcond[5]=(((r22*x1654))+((cj5*r21*x1649))+x1655+((r20*x1653))+(((-1.0)*r21*x1656))+((x1649*x1650))+(((-1.0)*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1661=((0.76043125175021)*sj4);
IkReal x1662=((0.200364043685242)*sj5);
IkReal x1663=((0.200364043685242)*cj5);
IkReal x1664=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r12*x1664))+((r11*x1662))+(((-1.0)*cj5*r11*x1661))+(((-1.0)*r10*x1663))+(((-1.0)*r10*sj5*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+(((-1.0)*r22*x1664))+((cj5*r21*x1661))+((r20*x1663))+(((-1.0)*r21*x1662))+((r20*sj5*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r12*x1664))+((r11*x1662))+(((-1.0)*cj5*r11*x1661))+(((-1.0)*r10*x1663))+(((-1.0)*r10*sj5*x1661))))+IKsqr(((((2.80033604032484)*pz))+(((-1.0)*r22*x1664))+((cj5*r21*x1661))+((r20*x1663))+(((-1.0)*r21*x1662))+((r20*sj5*x1661))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r12*x1664))+((r11*x1662))+(((-1.0)*cj5*r11*x1661))+(((-1.0)*r10*x1663))+(((-1.0)*r10*sj5*x1661))), ((((2.80033604032484)*pz))+(((-1.0)*r22*x1664))+((cj5*r21*x1661))+((r20*x1663))+(((-1.0)*r21*x1662))+((r20*sj5*x1661))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1665=((0.27155)*sj5);
IkReal x1666=((0.07155)*cj5);
IkReal x1667=(cj3*cj4);
IkReal x1668=((0.27155)*sj4);
IkReal x1669=((0.27155)*cj4);
IkReal x1670=((0.07155)*sj5);
IkReal x1671=(cj5*r21);
IkReal x1672=(r10*x1666);
IkReal x1673=((0.3571)*(IKsin(j1)));
IkReal x1674=(r11*x1670);
IkReal x1675=(r20*x1666);
IkReal x1676=(r21*x1670);
IkReal x1677=((0.3571)*(IKcos(j1)));
IkReal x1678=((0.27155)*cj5*r11);
IkReal x1679=((0.27155)*cj5*sj3);
IkReal x1680=(x1676+x1677);
IkReal x1681=(x1672+x1673+py);
evalcond[0]=(x1681+(((-1.0)*r12*x1669))+((cj5*r11*x1668))+((r10*sj4*x1665))+(((-1.0)*x1674)));
evalcond[1]=((((-1.0)*x1668*x1671))+x1680+(((-1.0)*pz))+(((-1.0)*x1675))+(((-1.0)*r20*sj4*x1665))+((r22*x1669)));
evalcond[2]=(x1681+(((-1.0)*r20*x1665*x1667))+(((-1.0)*cj3*r22*x1668))+(((-0.27155)*x1667*x1671))+((r21*sj3*x1665))+(((-1.0)*x1674))+(((-1.0)*r20*x1679)));
evalcond[3]=(((cj3*r12*x1668))+(((-1.0)*x1680))+x1675+((x1667*x1678))+((r10*x1665*x1667))+pz+((r10*x1679))+(((-1.0)*r11*sj3*x1665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1682=(cj4*sj1);
IkReal x1683=(cj5*sj4);
IkReal x1684=((1.0)*sj1);
IkReal x1685=(sj4*sj5);
IkReal x1686=((1.0)*cj1*cj4);
if( IKabs((((cj1*r21*x1683))+(((-1.0)*r11*x1683*x1684))+((r12*x1682))+(((-1.0)*r10*x1684*x1685))+(((-1.0)*r22*x1686))+((cj1*r20*x1685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1686))+(((-1.0)*r22*x1682))+((cj1*r10*x1685))+((cj1*r11*x1683))+((r21*sj1*x1683))+((r20*sj1*x1685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1683))+(((-1.0)*r11*x1683*x1684))+((r12*x1682))+(((-1.0)*r10*x1684*x1685))+(((-1.0)*r22*x1686))+((cj1*r20*x1685))))+IKsqr(((((-1.0)*r12*x1686))+(((-1.0)*r22*x1682))+((cj1*r10*x1685))+((cj1*r11*x1683))+((r21*sj1*x1683))+((r20*sj1*x1685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1683))+(((-1.0)*r11*x1683*x1684))+((r12*x1682))+(((-1.0)*r10*x1684*x1685))+(((-1.0)*r22*x1686))+((cj1*r20*x1685))), ((((-1.0)*r12*x1686))+(((-1.0)*r22*x1682))+((cj1*r10*x1685))+((cj1*r11*x1683))+((r21*sj1*x1683))+((r20*sj1*x1685))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1687=IKcos(j2);
IkReal x1688=IKsin(j2);
IkReal x1689=((1.0)*cj4);
IkReal x1690=((0.07155)*cj5);
IkReal x1691=(cj5*sj4);
IkReal x1692=(cj3*cj4);
IkReal x1693=(r20*sj5);
IkReal x1694=(r10*sj5);
IkReal x1695=((0.07155)*sj5);
IkReal x1696=(cj5*sj3);
IkReal x1697=(cj3*sj4);
IkReal x1698=(cj1*x1687);
IkReal x1699=((1.0)*sj3*sj5);
IkReal x1700=(sj1*x1687);
IkReal x1701=((0.27155)*x1688);
IkReal x1702=(sj1*x1688);
IkReal x1703=((1.0)*x1700);
IkReal x1704=((1.0)*cj1*x1688);
IkReal x1705=(x1703+x1704);
evalcond[0]=((((-1.0)*r12*x1689))+x1702+(((-1.0)*x1698))+((r11*x1691))+((sj4*x1694)));
evalcond[1]=(((r21*x1691))+(((-1.0)*x1705))+(((-1.0)*r22*x1689))+((sj4*x1693)));
evalcond[2]=((((-1.0)*cj1*x1701))+((r21*x1695))+(((-1.0)*r20*x1690))+(((-0.27155)*x1700))+(((0.3571)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((-0.27155)*x1698))+((r11*x1695))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x1701))+(((-1.0)*r10*x1690)));
evalcond[4]=(((r20*x1696))+(((-1.0)*r21*x1699))+(((-1.0)*x1702))+x1698+((x1692*x1693))+((r22*x1697))+((cj5*r21*x1692)));
evalcond[5]=(((r12*x1697))+((r10*x1696))+(((-1.0)*r11*x1699))+((x1692*x1694))+(((-1.0)*x1705))+((cj5*r11*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1706=((0.76043125175021)*sj4);
IkReal x1707=((0.76043125175021)*cj4);
IkReal x1708=((0.200364043685242)*sj5);
IkReal x1709=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+((r00*x1709))+(((-1.0)*r02*x1707))+((cj5*r01*x1706))+((r00*sj5*x1706))+(((-1.0)*r01*x1708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((r20*sj5*x1706))+(((-1.0)*r21*x1708))+((r20*x1709))+((cj5*r21*x1706))+(((-1.0)*r22*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+((r00*x1709))+(((-1.0)*r02*x1707))+((cj5*r01*x1706))+((r00*sj5*x1706))+(((-1.0)*r01*x1708))))+IKsqr(((((2.80033604032484)*pz))+((r20*sj5*x1706))+(((-1.0)*r21*x1708))+((r20*x1709))+((cj5*r21*x1706))+(((-1.0)*r22*x1707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+((r00*x1709))+(((-1.0)*r02*x1707))+((cj5*r01*x1706))+((r00*sj5*x1706))+(((-1.0)*r01*x1708))), ((((2.80033604032484)*pz))+((r20*sj5*x1706))+(((-1.0)*r21*x1708))+((r20*x1709))+((cj5*r21*x1706))+(((-1.0)*r22*x1707))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1710=((1.0)*pz);
IkReal x1711=((0.27155)*sj4);
IkReal x1712=(r00*sj5);
IkReal x1713=((0.07155)*sj5);
IkReal x1714=((0.27155)*cj4);
IkReal x1715=(cj5*r20);
IkReal x1716=(cj3*cj5);
IkReal x1717=((0.27155)*sj3);
IkReal x1718=(r20*sj5);
IkReal x1719=(cj5*r00);
IkReal x1720=((0.07155)*x1719);
IkReal x1721=(r01*x1713);
IkReal x1722=((0.3571)*(IKsin(j1)));
IkReal x1723=(r21*x1713);
IkReal x1724=((0.3571)*(IKcos(j1)));
IkReal x1725=((0.07155)*x1715);
IkReal x1726=(sj5*x1717);
IkReal x1727=(x1725+x1710);
IkReal x1728=(x1722+x1721);
IkReal x1729=(x1724+x1723);
evalcond[0]=(((r22*x1714))+(((-1.0)*cj5*r21*x1711))+x1729+(((-1.0)*x1711*x1718))+(((-1.0)*x1727)));
evalcond[1]=(((r02*x1714))+(((-1.0)*cj5*r01*x1711))+x1728+(((-1.0)*px))+(((-1.0)*x1711*x1712))+(((-1.0)*x1720)));
evalcond[2]=(x1720+((r21*x1714*x1716))+px+((x1715*x1717))+((cj3*r22*x1711))+(((-1.0)*x1728))+(((-1.0)*r21*x1726))+((cj3*x1714*x1718)));
evalcond[3]=(((r01*x1714*x1716))+x1729+((cj3*r02*x1711))+(((-1.0)*r01*x1726))+((cj3*x1712*x1714))+(((-1.0)*x1727))+((x1717*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1730=(cj5*sj4);
IkReal x1731=(cj4*r02);
IkReal x1732=((1.0)*cj1);
IkReal x1733=(sj4*sj5);
IkReal x1734=((1.0)*cj4*r22);
IkReal x1735=(sj1*x1733);
if( IKabs((((r00*x1735))+(((-1.0)*cj4*r22*x1732))+((cj1*r20*x1733))+((r01*sj1*x1730))+(((-1.0)*sj1*x1731))+((cj1*r21*x1730)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1730*x1732))+((cj1*x1731))+(((-1.0)*sj1*x1734))+(((-1.0)*r00*x1732*x1733))+((r21*sj1*x1730))+((r20*x1735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1735))+(((-1.0)*cj4*r22*x1732))+((cj1*r20*x1733))+((r01*sj1*x1730))+(((-1.0)*sj1*x1731))+((cj1*r21*x1730))))+IKsqr(((((-1.0)*r01*x1730*x1732))+((cj1*x1731))+(((-1.0)*sj1*x1734))+(((-1.0)*r00*x1732*x1733))+((r21*sj1*x1730))+((r20*x1735))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1735))+(((-1.0)*cj4*r22*x1732))+((cj1*r20*x1733))+((r01*sj1*x1730))+(((-1.0)*sj1*x1731))+((cj1*r21*x1730))), ((((-1.0)*r01*x1730*x1732))+((cj1*x1731))+(((-1.0)*sj1*x1734))+(((-1.0)*r00*x1732*x1733))+((r21*sj1*x1730))+((r20*x1735))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1736=IKcos(j2);
IkReal x1737=IKsin(j2);
IkReal x1738=(cj3*sj4);
IkReal x1739=((1.0)*cj4);
IkReal x1740=(r00*sj5);
IkReal x1741=(cj3*cj4);
IkReal x1742=(cj5*sj4);
IkReal x1743=((0.07155)*sj5);
IkReal x1744=(cj5*r20);
IkReal x1745=(cj5*r00);
IkReal x1746=(r20*sj5);
IkReal x1747=(cj1*x1736);
IkReal x1748=(sj1*x1736);
IkReal x1749=(cj1*x1737);
IkReal x1750=((1.0)*sj3*sj5);
IkReal x1751=(sj1*x1737);
IkReal x1752=((1.0)*x1751);
evalcond[0]=(x1747+((sj4*x1740))+(((-1.0)*x1752))+((r01*x1742))+(((-1.0)*r02*x1739)));
evalcond[1]=(((sj4*x1746))+((r21*x1742))+(((-1.0)*x1749))+(((-1.0)*x1748))+(((-1.0)*r22*x1739)));
evalcond[2]=((((-0.07155)*x1744))+(((0.3571)*cj1))+((r21*x1743))+(((-1.0)*pz))+(((-0.27155)*x1748))+(((-0.27155)*x1749)));
evalcond[3]=((((-0.07155)*x1745))+(((0.3571)*sj1))+(((0.27155)*x1747))+(((-0.27155)*x1751))+(((-1.0)*px))+((r01*x1743)));
evalcond[4]=(x1748+x1749+((r02*x1738))+(((-1.0)*r01*x1750))+((x1740*x1741))+((sj3*x1745))+((cj5*r01*x1741)));
evalcond[5]=(((cj5*r21*x1741))+x1747+((r22*x1738))+(((-1.0)*x1752))+(((-1.0)*r21*x1750))+((sj3*x1744))+((x1741*x1746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1753=((0.76043125175021)*sj4);
IkReal x1754=((0.76043125175021)*cj4);
IkReal x1755=((0.200364043685242)*sj5);
IkReal x1756=((0.200364043685242)*cj5);
if( IKabs(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1753))+((r02*x1754))+(((-1.0)*cj5*r01*x1753))+(((-1.0)*r00*x1756))+((r01*x1755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x1753))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1754))+((r20*x1756))+(((-1.0)*r21*x1755))+((r20*sj5*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1753))+((r02*x1754))+(((-1.0)*cj5*r01*x1753))+(((-1.0)*r00*x1756))+((r01*x1755))))+IKsqr((((cj5*r21*x1753))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1754))+((r20*x1756))+(((-1.0)*r21*x1755))+((r20*sj5*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*px))+(((-1.0)*r00*sj5*x1753))+((r02*x1754))+(((-1.0)*cj5*r01*x1753))+(((-1.0)*r00*x1756))+((r01*x1755))), (((cj5*r21*x1753))+(((2.80033604032484)*pz))+(((-1.0)*r22*x1754))+((r20*x1756))+(((-1.0)*r21*x1755))+((r20*sj5*x1753))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1757=((0.27155)*sj4);
IkReal x1758=(r00*sj5);
IkReal x1759=((0.07155)*sj5);
IkReal x1760=((0.27155)*cj4);
IkReal x1761=(cj5*r20);
IkReal x1762=(cj3*cj5);
IkReal x1763=((0.27155)*sj3);
IkReal x1764=(r20*sj5);
IkReal x1765=(cj5*r00);
IkReal x1766=((0.07155)*x1765);
IkReal x1767=((0.3571)*(IKsin(j1)));
IkReal x1768=(r01*x1759);
IkReal x1769=((0.07155)*x1761);
IkReal x1770=(r21*x1759);
IkReal x1771=((0.3571)*(IKcos(j1)));
IkReal x1772=(sj5*x1763);
IkReal x1773=(x1771+x1770);
IkReal x1774=(x1766+x1767+px);
evalcond[0]=((((-1.0)*x1768))+x1774+(((-1.0)*r02*x1760))+((cj5*r01*x1757))+((x1757*x1758)));
evalcond[1]=((((-1.0)*x1769))+x1773+(((-1.0)*cj5*r21*x1757))+(((-1.0)*pz))+(((-1.0)*x1757*x1764))+((r22*x1760)));
evalcond[2]=((((-1.0)*r21*x1760*x1762))+(((-1.0)*cj3*r22*x1757))+(((-1.0)*x1768))+x1774+(((-1.0)*x1761*x1763))+((r21*x1772))+(((-1.0)*cj3*x1760*x1764)));
evalcond[3]=(x1769+((cj3*x1758*x1760))+(((-1.0)*x1773))+pz+(((-1.0)*r01*x1772))+((cj3*r02*x1757))+((r01*x1760*x1762))+((x1763*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1775=(cj4*r02);
IkReal x1776=(cj5*sj4);
IkReal x1777=((1.0)*sj1);
IkReal x1778=(sj4*sj5);
IkReal x1779=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x1779))+((cj1*r21*x1776))+((cj1*r20*x1778))+(((-1.0)*r01*x1776*x1777))+((sj1*x1775))+(((-1.0)*r00*x1777*x1778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1778))+(((-1.0)*cj1*x1775))+(((-1.0)*cj4*r22*x1777))+((r21*sj1*x1776))+((cj1*r01*x1776))+((cj1*r00*x1778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1779))+((cj1*r21*x1776))+((cj1*r20*x1778))+(((-1.0)*r01*x1776*x1777))+((sj1*x1775))+(((-1.0)*r00*x1777*x1778))))+IKsqr((((r20*sj1*x1778))+(((-1.0)*cj1*x1775))+(((-1.0)*cj4*r22*x1777))+((r21*sj1*x1776))+((cj1*r01*x1776))+((cj1*r00*x1778))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1779))+((cj1*r21*x1776))+((cj1*r20*x1778))+(((-1.0)*r01*x1776*x1777))+((sj1*x1775))+(((-1.0)*r00*x1777*x1778))), (((r20*sj1*x1778))+(((-1.0)*cj1*x1775))+(((-1.0)*cj4*r22*x1777))+((r21*sj1*x1776))+((cj1*r01*x1776))+((cj1*r00*x1778))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1780=IKcos(j2);
IkReal x1781=IKsin(j2);
IkReal x1782=(cj3*sj4);
IkReal x1783=((1.0)*cj4);
IkReal x1784=(cj5*sj4);
IkReal x1785=((0.07155)*sj5);
IkReal x1786=(cj5*r20);
IkReal x1787=(sj4*sj5);
IkReal x1788=(cj5*r00);
IkReal x1789=(cj1*x1780);
IkReal x1790=(cj3*cj4*sj5);
IkReal x1791=(sj1*x1780);
IkReal x1792=((0.27155)*x1781);
IkReal x1793=((1.0)*sj3*sj5);
IkReal x1794=(sj1*x1781);
IkReal x1795=(cj3*cj4*cj5);
IkReal x1796=((1.0)*x1791);
IkReal x1797=((1.0)*cj1*x1781);
IkReal x1798=(x1797+x1796);
evalcond[0]=(x1794+(((-1.0)*x1789))+(((-1.0)*r02*x1783))+((r00*x1787))+((r01*x1784)));
evalcond[1]=((((-1.0)*x1798))+((r20*x1787))+(((-1.0)*r22*x1783))+((r21*x1784)));
evalcond[2]=(((r21*x1785))+(((-0.07155)*x1786))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1792))+(((-0.27155)*x1791)));
evalcond[3]=((((-0.07155)*x1788))+((sj1*x1792))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1789))+((r01*x1785)));
evalcond[4]=(((sj3*x1786))+((r21*x1795))+x1789+((r22*x1782))+(((-1.0)*x1794))+(((-1.0)*r21*x1793))+((r20*x1790)));
evalcond[5]=(((r00*x1790))+(((-1.0)*x1798))+((sj3*x1788))+(((-1.0)*r01*x1793))+((r02*x1782))+((r01*x1795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1799=((0.27155)*cj0);
IkReal x1800=(sj4*sj5);
IkReal x1801=((0.07155)*cj0);
IkReal x1802=(cj5*sj4);
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(cj0,-2);
if(!x1803.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1803.value)*(((((-1.0)*r00*x1799*x1800))+(((-1.0)*cj5*r00*x1801))+(((-1.0)*r01*x1799*x1802))+((r01*sj5*x1801))+((cj4*r02*x1799))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r21*x1802))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1800))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1803.value)*(((((-1.0)*r00*x1799*x1800))+(((-1.0)*cj5*r00*x1801))+(((-1.0)*r01*x1799*x1802))+((r01*sj5*x1801))+((cj4*r02*x1799))+(((-1.0)*cj0*px))))))+IKsqr(((((0.76043125175021)*r21*x1802))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1800))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1803.value)*(((((-1.0)*r00*x1799*x1800))+(((-1.0)*cj5*r00*x1801))+(((-1.0)*r01*x1799*x1802))+((r01*sj5*x1801))+((cj4*r02*x1799))+(((-1.0)*cj0*px))))), ((((0.76043125175021)*r21*x1802))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x1800))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1804=IKsin(j1);
IkReal x1805=IKcos(j1);
IkReal x1806=((0.07155)*cj5);
IkReal x1807=(r00*sj0);
IkReal x1808=(cj3*cj4);
IkReal x1809=(cj0*sj5);
IkReal x1810=((0.07155)*r11);
IkReal x1811=(cj5*sj3);
IkReal x1812=((0.27155)*sj4);
IkReal x1813=(cj3*r22);
IkReal x1814=(cj5*r11);
IkReal x1815=((0.27155)*r20);
IkReal x1816=((1.0)*sj0);
IkReal x1817=(sj0*sj5);
IkReal x1818=((0.27155)*sj5);
IkReal x1819=((1.0)*pz);
IkReal x1820=((0.07155)*r21);
IkReal x1821=(cj5*r01);
IkReal x1822=((0.27155)*cj4);
IkReal x1823=(cj5*r21);
IkReal x1824=((1.0)*cj0);
IkReal x1825=(sj0*x1815);
IkReal x1826=((0.3571)*x1805);
IkReal x1827=((0.07155)*r01*sj5);
IkReal x1828=((0.3571)*x1804);
IkReal x1829=((0.27155)*r21*sj3);
IkReal x1830=(cj0*x1828);
IkReal x1831=(sj0*x1830);
evalcond[0]=((((-1.0)*x1819))+(((-1.0)*r20*x1806))+(((-1.0)*r20*sj5*x1812))+(((-1.0)*x1812*x1823))+((r22*x1822))+x1826+((sj5*x1820)));
evalcond[1]=((((-1.0)*sj0*x1812*x1814))+(((-1.0)*py*x1816))+(((-1.0)*r10*x1812*x1817))+((x1828*(sj0*sj0)))+((x1810*x1817))+((r12*sj0*x1822))+(((-1.0)*r10*sj0*x1806)));
evalcond[2]=(((cj0*r02*x1822))+((cj0*x1830))+(((-1.0)*r00*x1809*x1812))+(((-1.0)*cj0*x1812*x1821))+(((-1.0)*cj0*r00*x1806))+(((0.07155)*r01*x1809))+(((-1.0)*px*x1824)));
evalcond[3]=(((x1808*x1815*x1817))+(((-1.0)*x1817*x1829))+(((-1.0)*sj5*x1810))+(((0.27155)*sj0*x1808*x1823))+((x1811*x1825))+py+(((-1.0)*sj0*x1828))+((sj0*x1812*x1813))+((r10*x1806)));
evalcond[4]=((((-1.0)*x1827))+((cj0*x1811*x1815))+((x1808*x1809*x1815))+((cj0*x1812*x1813))+(((-1.0)*x1830))+(((-1.0)*x1809*x1829))+px+(((0.27155)*cj0*x1808*x1823))+((r00*x1806)));
evalcond[5]=((((0.27155)*r10*x1811))+(((-1.0)*r11*sj3*x1818))+(((0.27155)*x1808*x1814))+(((-1.0)*pz*x1816))+((sj0*x1826))+(((-1.0)*r20*sj0*x1806))+((x1817*x1820))+((cj3*r12*x1812))+((r10*x1808*x1818)));
evalcond[6]=(((cj0*x1826))+(((-1.0)*cj0*x1819))+(((0.27155)*x1808*x1821))+(((-1.0)*cj0*r20*x1806))+((r00*x1808*x1818))+(((0.27155)*r00*x1811))+((x1809*x1820))+(((-1.0)*r01*sj3*x1818))+((cj3*r02*x1812)));
evalcond[7]=(((cj0*r12*x1822))+(((-1.0)*r10*x1809*x1812))+(((0.07155)*r01*x1817))+(((-1.0)*cj0*x1812*x1814))+x1831+(((-1.0)*x1806*x1807))+(((-1.0)*px*x1816)));
evalcond[8]=((((-1.0)*sj5*x1807*x1812))+(((-1.0)*sj0*x1812*x1821))+(((-1.0)*py*x1824))+((x1809*x1810))+x1831+((r02*sj0*x1822))+(((-1.0)*cj0*r10*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1832=(cj5*sj4);
IkReal x1833=(cj4*r02);
IkReal x1834=((1.0)*cj1);
IkReal x1835=(sj4*sj5);
IkReal x1836=((1.0)*cj4*r22);
IkReal x1837=(sj1*x1835);
if( IKabs((((r01*sj1*x1832))+((cj1*r20*x1835))+((cj1*r21*x1832))+(((-1.0)*cj4*r22*x1834))+(((-1.0)*sj1*x1833))+((r00*x1837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1832*x1834))+(((-1.0)*sj1*x1836))+(((-1.0)*r00*x1834*x1835))+((r20*x1837))+((r21*sj1*x1832))+((cj1*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x1832))+((cj1*r20*x1835))+((cj1*r21*x1832))+(((-1.0)*cj4*r22*x1834))+(((-1.0)*sj1*x1833))+((r00*x1837))))+IKsqr(((((-1.0)*r01*x1832*x1834))+(((-1.0)*sj1*x1836))+(((-1.0)*r00*x1834*x1835))+((r20*x1837))+((r21*sj1*x1832))+((cj1*x1833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x1832))+((cj1*r20*x1835))+((cj1*r21*x1832))+(((-1.0)*cj4*r22*x1834))+(((-1.0)*sj1*x1833))+((r00*x1837))), ((((-1.0)*r01*x1832*x1834))+(((-1.0)*sj1*x1836))+(((-1.0)*r00*x1834*x1835))+((r20*x1837))+((r21*sj1*x1832))+((cj1*x1833))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1838=IKcos(j2);
IkReal x1839=IKsin(j2);
IkReal x1840=(cj3*sj4);
IkReal x1841=((1.0)*cj4);
IkReal x1842=(r00*sj5);
IkReal x1843=(cj3*cj4);
IkReal x1844=(cj5*sj4);
IkReal x1845=((0.07155)*sj5);
IkReal x1846=(cj5*r20);
IkReal x1847=(cj5*r00);
IkReal x1848=(r20*sj5);
IkReal x1849=(cj1*x1838);
IkReal x1850=(sj1*x1838);
IkReal x1851=(cj1*x1839);
IkReal x1852=((1.0)*sj3*sj5);
IkReal x1853=(sj1*x1839);
IkReal x1854=((1.0)*x1853);
evalcond[0]=((((-1.0)*r02*x1841))+((r01*x1844))+x1849+((sj4*x1842))+(((-1.0)*x1854)));
evalcond[1]=((((-1.0)*r22*x1841))+(((-1.0)*x1850))+(((-1.0)*x1851))+((r21*x1844))+((sj4*x1848)));
evalcond[2]=((((-0.07155)*x1846))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1845))+(((-0.27155)*x1851))+(((-0.27155)*x1850)));
evalcond[3]=((((0.3571)*sj1))+(((0.27155)*x1849))+(((-0.07155)*x1847))+(((-1.0)*px))+((r01*x1845))+(((-0.27155)*x1853)));
evalcond[4]=(((sj3*x1847))+((r02*x1840))+(((-1.0)*r01*x1852))+x1850+x1851+((x1842*x1843))+((cj5*r01*x1843)));
evalcond[5]=(((r22*x1840))+((sj3*x1846))+x1849+((x1843*x1848))+((cj5*r21*x1843))+(((-1.0)*r21*x1852))+(((-1.0)*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1855=(cj4*r02);
IkReal x1856=(cj5*sj4);
IkReal x1857=((1.0)*sj1);
IkReal x1858=(sj4*sj5);
IkReal x1859=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x1858))+((sj1*x1855))+(((-1.0)*r01*x1856*x1857))+((cj1*r21*x1856))+(((-1.0)*r00*x1857*x1858))+(((-1.0)*cj1*x1859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1857))+((cj1*r00*x1858))+(((-1.0)*cj1*x1855))+((cj1*r01*x1856))+((r21*sj1*x1856))+((r20*sj1*x1858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1858))+((sj1*x1855))+(((-1.0)*r01*x1856*x1857))+((cj1*r21*x1856))+(((-1.0)*r00*x1857*x1858))+(((-1.0)*cj1*x1859))))+IKsqr(((((-1.0)*cj4*r22*x1857))+((cj1*r00*x1858))+(((-1.0)*cj1*x1855))+((cj1*r01*x1856))+((r21*sj1*x1856))+((r20*sj1*x1858))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1858))+((sj1*x1855))+(((-1.0)*r01*x1856*x1857))+((cj1*r21*x1856))+(((-1.0)*r00*x1857*x1858))+(((-1.0)*cj1*x1859))), ((((-1.0)*cj4*r22*x1857))+((cj1*r00*x1858))+(((-1.0)*cj1*x1855))+((cj1*r01*x1856))+((r21*sj1*x1856))+((r20*sj1*x1858))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1860=IKcos(j2);
IkReal x1861=IKsin(j2);
IkReal x1862=(cj3*sj4);
IkReal x1863=((1.0)*cj4);
IkReal x1864=(cj5*sj4);
IkReal x1865=((0.07155)*sj5);
IkReal x1866=(cj5*r20);
IkReal x1867=(sj4*sj5);
IkReal x1868=(cj5*r00);
IkReal x1869=(cj1*x1860);
IkReal x1870=(cj3*cj4*sj5);
IkReal x1871=(sj1*x1860);
IkReal x1872=((0.27155)*x1861);
IkReal x1873=((1.0)*sj3*sj5);
IkReal x1874=(sj1*x1861);
IkReal x1875=(cj3*cj4*cj5);
IkReal x1876=((1.0)*x1871);
IkReal x1877=((1.0)*cj1*x1861);
IkReal x1878=(x1876+x1877);
evalcond[0]=((((-1.0)*r02*x1863))+x1874+((r01*x1864))+(((-1.0)*x1869))+((r00*x1867)));
evalcond[1]=((((-1.0)*x1878))+((r20*x1867))+(((-1.0)*r22*x1863))+((r21*x1864)));
evalcond[2]=((((-0.07155)*x1866))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x1872))+(((-0.27155)*x1871))+((r21*x1865)));
evalcond[3]=((((-0.07155)*x1868))+((sj1*x1872))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x1869))+((r01*x1865)));
evalcond[4]=(((r22*x1862))+((r20*x1870))+x1869+((sj3*x1866))+((r21*x1875))+(((-1.0)*r21*x1873))+(((-1.0)*x1874)));
evalcond[5]=((((-1.0)*x1878))+(((-1.0)*r01*x1873))+((r02*x1862))+((r01*x1875))+((r00*x1870))+((sj3*x1868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1879=(cj1*cj4);
IkReal x1880=((1.0)*r22);
IkReal x1881=(cj4*sj1);
IkReal x1882=(sj4*sj5);
IkReal x1883=(cj1*cj5*sj4);
IkReal x1884=(cj5*sj1*sj4);
if( IKabs((((r21*x1883))+(((-1.0)*x1879*x1880))+((r10*sj1*x1882))+(((-1.0)*r12*x1881))+((r11*x1884))+((cj1*r20*x1882)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1882))+((r21*x1884))+(((-1.0)*x1880*x1881))+(((-1.0)*r11*x1883))+(((-1.0)*cj1*r10*x1882))+((r12*x1879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1883))+(((-1.0)*x1879*x1880))+((r10*sj1*x1882))+(((-1.0)*r12*x1881))+((r11*x1884))+((cj1*r20*x1882))))+IKsqr((((r20*sj1*x1882))+((r21*x1884))+(((-1.0)*x1880*x1881))+(((-1.0)*r11*x1883))+(((-1.0)*cj1*r10*x1882))+((r12*x1879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x1883))+(((-1.0)*x1879*x1880))+((r10*sj1*x1882))+(((-1.0)*r12*x1881))+((r11*x1884))+((cj1*r20*x1882))), (((r20*sj1*x1882))+((r21*x1884))+(((-1.0)*x1880*x1881))+(((-1.0)*r11*x1883))+(((-1.0)*cj1*r10*x1882))+((r12*x1879))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1885=IKcos(j2);
IkReal x1886=IKsin(j2);
IkReal x1887=((1.0)*cj4);
IkReal x1888=((0.07155)*cj5);
IkReal x1889=(cj5*sj4);
IkReal x1890=(cj3*cj4);
IkReal x1891=(r20*sj5);
IkReal x1892=(r10*sj5);
IkReal x1893=((0.07155)*sj5);
IkReal x1894=(cj5*sj3);
IkReal x1895=(cj3*sj4);
IkReal x1896=(cj1*x1885);
IkReal x1897=((1.0)*sj3*sj5);
IkReal x1898=(cj1*x1886);
IkReal x1899=(sj1*x1885);
IkReal x1900=(sj1*x1886);
IkReal x1901=((1.0)*x1900);
evalcond[0]=((((-1.0)*r12*x1887))+((sj4*x1892))+x1896+((r11*x1889))+(((-1.0)*x1901)));
evalcond[1]=(((r21*x1889))+(((-1.0)*r22*x1887))+(((-1.0)*x1898))+(((-1.0)*x1899))+((sj4*x1891)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1898))+(((-0.27155)*x1899))+(((-1.0)*r20*x1888))+((r21*x1893)));
evalcond[3]=((((-0.27155)*x1900))+((r11*x1893))+(((0.3571)*sj1))+(((0.27155)*x1896))+(((-1.0)*py))+(((-1.0)*r10*x1888)));
evalcond[4]=(((r10*x1894))+(((-1.0)*r11*x1897))+x1898+x1899+((cj5*r11*x1890))+((r12*x1895))+((x1890*x1892)));
evalcond[5]=(((r22*x1895))+((cj5*r21*x1890))+((r20*x1894))+(((-1.0)*r21*x1897))+x1896+(((-1.0)*x1901))+((x1890*x1891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1902=(cj4*sj1);
IkReal x1903=(cj5*sj4);
IkReal x1904=((1.0)*sj1);
IkReal x1905=(sj4*sj5);
IkReal x1906=((1.0)*cj1*cj4);
if( IKabs((((cj1*r21*x1903))+(((-1.0)*r11*x1903*x1904))+(((-1.0)*r22*x1906))+((r12*x1902))+((cj1*r20*x1905))+(((-1.0)*r10*x1904*x1905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1906))+((cj1*r11*x1903))+((r21*sj1*x1903))+((cj1*r10*x1905))+(((-1.0)*r22*x1902))+((r20*sj1*x1905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1903))+(((-1.0)*r11*x1903*x1904))+(((-1.0)*r22*x1906))+((r12*x1902))+((cj1*r20*x1905))+(((-1.0)*r10*x1904*x1905))))+IKsqr(((((-1.0)*r12*x1906))+((cj1*r11*x1903))+((r21*sj1*x1903))+((cj1*r10*x1905))+(((-1.0)*r22*x1902))+((r20*sj1*x1905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1903))+(((-1.0)*r11*x1903*x1904))+(((-1.0)*r22*x1906))+((r12*x1902))+((cj1*r20*x1905))+(((-1.0)*r10*x1904*x1905))), ((((-1.0)*r12*x1906))+((cj1*r11*x1903))+((r21*sj1*x1903))+((cj1*r10*x1905))+(((-1.0)*r22*x1902))+((r20*sj1*x1905))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1907=IKcos(j2);
IkReal x1908=IKsin(j2);
IkReal x1909=((1.0)*cj4);
IkReal x1910=((0.07155)*cj5);
IkReal x1911=(cj5*sj4);
IkReal x1912=(cj3*cj4);
IkReal x1913=(r20*sj5);
IkReal x1914=(r10*sj5);
IkReal x1915=((0.07155)*sj5);
IkReal x1916=(cj5*sj3);
IkReal x1917=(cj3*sj4);
IkReal x1918=(cj1*x1907);
IkReal x1919=((1.0)*sj3*sj5);
IkReal x1920=(sj1*x1907);
IkReal x1921=((0.27155)*x1908);
IkReal x1922=(sj1*x1908);
IkReal x1923=((1.0)*x1920);
IkReal x1924=((1.0)*cj1*x1908);
IkReal x1925=(x1923+x1924);
evalcond[0]=(((sj4*x1914))+((r11*x1911))+(((-1.0)*x1918))+x1922+(((-1.0)*r12*x1909)));
evalcond[1]=(((sj4*x1913))+(((-1.0)*r22*x1909))+(((-1.0)*x1925))+((r21*x1911)));
evalcond[2]=((((-1.0)*cj1*x1921))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.27155)*x1920))+((r21*x1915))+(((-1.0)*r20*x1910)));
evalcond[3]=(((r11*x1915))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-1.0)*r10*x1910))+(((-0.27155)*x1918))+((sj1*x1921)));
evalcond[4]=(((x1912*x1913))+(((-1.0)*x1922))+((r22*x1917))+x1918+((cj5*r21*x1912))+(((-1.0)*r21*x1919))+((r20*x1916)));
evalcond[5]=(((r10*x1916))+((x1912*x1914))+((cj5*r11*x1912))+(((-1.0)*r11*x1919))+(((-1.0)*x1925))+((r12*x1917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1926=(cj4*r12);
IkReal x1927=(cj5*sj4);
IkReal x1928=(r21*sj0);
IkReal x1929=((1.0)*cj1);
IkReal x1930=(r10*sj4*sj5);
IkReal x1931=(r20*sj0*sj4*sj5);
IkReal x1932=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1933.valid){
continue;
}
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal((((r11*sj1*x1927))+((cj1*x1931))+(((-1.0)*cj4*r22*sj0*x1929))+(((-1.0)*sj1*x1926))+((sj1*x1930))+((cj1*x1927*x1928)))),IkReal((((sj1*x1927*x1928))+(((-1.0)*r11*x1927*x1929))+((cj1*x1926))+(((-1.0)*sj1*x1932))+((sj1*x1931))+(((-1.0)*x1929*x1930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1933.value)))+(x1934.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1935=IKcos(j2);
IkReal x1936=IKsin(j2);
IkReal x1937=(cj5*r21);
IkReal x1938=(cj3*cj4);
IkReal x1939=(r11*sj5);
IkReal x1940=((1.0)*sj3);
IkReal x1941=((1.0)*cj4);
IkReal x1942=((0.27155)*cj0);
IkReal x1943=((0.07155)*cj5);
IkReal x1944=(cj5*sj4);
IkReal x1945=((0.07155)*sj5);
IkReal x1946=((0.27155)*sj0);
IkReal x1947=((1.0)*sj1);
IkReal x1948=(r20*sj5);
IkReal x1949=(r10*sj5);
IkReal x1950=(cj3*sj4);
IkReal x1951=(cj5*sj3);
IkReal x1952=(r00*sj5);
IkReal x1953=((0.3571)*sj1);
IkReal x1954=(cj1*x1935);
IkReal x1955=(sj0*x1936);
IkReal x1956=(sj1*x1935);
IkReal x1957=(cj0*x1936);
IkReal x1958=(cj1*x1936);
IkReal x1959=(sj1*x1936);
evalcond[0]=((((-1.0)*r22*x1941))+((sj4*x1937))+(((-1.0)*x1935*x1947))+(((-1.0)*x1958))+((sj4*x1948)));
evalcond[1]=(((cj0*x1954))+(((-1.0)*r02*x1941))+(((-1.0)*x1947*x1957))+((r01*x1944))+((sj4*x1952)));
evalcond[2]=(((r11*x1944))+(((-1.0)*x1947*x1955))+((sj0*x1954))+(((-1.0)*r12*x1941))+((sj4*x1949)));
evalcond[3]=((((0.3571)*cj1))+(((-1.0)*pz))+((r21*x1945))+(((-1.0)*r20*x1943))+(((-0.27155)*x1958))+(((-0.27155)*x1956)));
evalcond[4]=(((cj0*x1953))+(((-1.0)*x1942*x1959))+(((-1.0)*px))+(((-1.0)*r00*x1943))+((r01*x1945))+((x1942*x1954)));
evalcond[5]=((((0.07155)*x1939))+((x1946*x1954))+((sj0*x1953))+(((-1.0)*py))+(((-1.0)*x1946*x1959))+(((-1.0)*r10*x1943)));
evalcond[6]=(((x1938*x1948))+((r20*x1951))+(((-1.0)*r21*sj5*x1940))+((r22*x1950))+x1954+(((-1.0)*x1936*x1947))+((x1937*x1938)));
evalcond[7]=(((cj0*x1956))+((x1938*x1952))+((cj5*r01*x1938))+((cj1*x1957))+(((-1.0)*r01*sj5*x1940))+((r00*x1951))+((r02*x1950)));
evalcond[8]=(((x1938*x1949))+((cj5*r11*x1938))+((r12*x1950))+((r10*x1951))+((cj1*x1955))+((sj0*x1956))+(((-1.0)*x1939*x1940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1960=((1.0)*cj4);
IkReal x1961=(cj0*cj1);
IkReal x1962=(sj4*sj5);
IkReal x1963=(cj5*sj4);
IkReal x1964=((1.0)*cj1);
IkReal x1965=(cj0*sj1);
IkReal x1966=(sj1*x1963);
CheckValue<IkReal> x1967=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1967.valid){
continue;
}
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal((((r20*x1961*x1962))+((r00*sj1*x1962))+(((-1.0)*r02*sj1*x1960))+((r21*x1961*x1963))+((r01*x1966))+(((-1.0)*r22*x1960*x1961)))),IkReal((((cj1*cj4*r02))+((r21*x1963*x1965))+((r20*x1962*x1965))+(((-1.0)*r00*x1962*x1964))+(((-1.0)*r22*x1960*x1965))+(((-1.0)*r01*x1963*x1964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1967.value)))+(x1968.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1969=IKcos(j2);
IkReal x1970=IKsin(j2);
IkReal x1971=(cj5*r21);
IkReal x1972=(cj3*cj4);
IkReal x1973=(r11*sj5);
IkReal x1974=((1.0)*sj3);
IkReal x1975=((1.0)*cj4);
IkReal x1976=((0.27155)*cj0);
IkReal x1977=((0.07155)*cj5);
IkReal x1978=(cj5*sj4);
IkReal x1979=((0.07155)*sj5);
IkReal x1980=((0.27155)*sj0);
IkReal x1981=((1.0)*sj1);
IkReal x1982=(r20*sj5);
IkReal x1983=(r10*sj5);
IkReal x1984=(cj3*sj4);
IkReal x1985=(cj5*sj3);
IkReal x1986=(r00*sj5);
IkReal x1987=((0.3571)*sj1);
IkReal x1988=(cj1*x1969);
IkReal x1989=(sj0*x1970);
IkReal x1990=(sj1*x1969);
IkReal x1991=(cj0*x1970);
IkReal x1992=(cj1*x1970);
IkReal x1993=(sj1*x1970);
evalcond[0]=((((-1.0)*r22*x1975))+((sj4*x1982))+((sj4*x1971))+(((-1.0)*x1992))+(((-1.0)*x1969*x1981)));
evalcond[1]=((((-1.0)*r02*x1975))+(((-1.0)*x1981*x1991))+((sj4*x1986))+((r01*x1978))+((cj0*x1988)));
evalcond[2]=((((-1.0)*x1981*x1989))+((r11*x1978))+((sj0*x1988))+((sj4*x1983))+(((-1.0)*r12*x1975)));
evalcond[3]=((((0.3571)*cj1))+((r21*x1979))+(((-1.0)*pz))+(((-0.27155)*x1992))+(((-0.27155)*x1990))+(((-1.0)*r20*x1977)));
evalcond[4]=(((x1976*x1988))+(((-1.0)*r00*x1977))+(((-1.0)*px))+(((-1.0)*x1976*x1993))+((r01*x1979))+((cj0*x1987)));
evalcond[5]=((((-1.0)*x1980*x1993))+((sj0*x1987))+((x1980*x1988))+(((-1.0)*py))+(((-1.0)*r10*x1977))+(((0.07155)*x1973)));
evalcond[6]=(((x1972*x1982))+(((-1.0)*r21*sj5*x1974))+(((-1.0)*x1970*x1981))+((x1971*x1972))+x1988+((r22*x1984))+((r20*x1985)));
evalcond[7]=(((x1972*x1986))+((cj0*x1990))+((cj1*x1991))+((r00*x1985))+(((-1.0)*r01*sj5*x1974))+((cj5*r01*x1972))+((r02*x1984)));
evalcond[8]=(((x1972*x1983))+((sj0*x1990))+((r10*x1985))+((cj5*r11*x1972))+(((-1.0)*x1973*x1974))+((r12*x1984))+((cj1*x1989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1994=((0.07155)*sj0);
IkReal x1995=((0.27155)*sj0);
IkReal x1996=(sj4*sj5);
IkReal x1997=(cj5*sj4);
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(sj0,-2);
if(!x1998.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x1998.value)*((((r11*sj5*x1994))+((cj4*r12*x1995))+(((-1.0)*r10*x1995*x1996))+(((-1.0)*cj5*r10*x1994))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1995*x1997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r20*x1996))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1997))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x1998.value)*((((r11*sj5*x1994))+((cj4*r12*x1995))+(((-1.0)*r10*x1995*x1996))+(((-1.0)*cj5*r10*x1994))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1995*x1997))))))+IKsqr(((((0.76043125175021)*r20*x1996))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1997))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x1998.value)*((((r11*sj5*x1994))+((cj4*r12*x1995))+(((-1.0)*r10*x1995*x1996))+(((-1.0)*cj5*r10*x1994))+(((-1.0)*py*sj0))+(((-1.0)*r11*x1995*x1997))))), ((((0.76043125175021)*r20*x1996))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x1997))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1999=IKsin(j1);
IkReal x2000=IKcos(j1);
IkReal x2001=((0.07155)*cj5);
IkReal x2002=(r00*sj0);
IkReal x2003=(cj3*cj4);
IkReal x2004=(cj0*sj5);
IkReal x2005=((0.07155)*r11);
IkReal x2006=(cj5*sj3);
IkReal x2007=((0.27155)*sj4);
IkReal x2008=(cj3*r22);
IkReal x2009=(cj5*r11);
IkReal x2010=((0.27155)*r20);
IkReal x2011=((1.0)*sj0);
IkReal x2012=(sj0*sj5);
IkReal x2013=((0.27155)*sj5);
IkReal x2014=((1.0)*pz);
IkReal x2015=((0.07155)*r21);
IkReal x2016=(cj5*r01);
IkReal x2017=((0.27155)*cj4);
IkReal x2018=(cj5*r21);
IkReal x2019=((1.0)*cj0);
IkReal x2020=(sj0*x2010);
IkReal x2021=((0.3571)*x2000);
IkReal x2022=((0.07155)*r01*sj5);
IkReal x2023=((0.3571)*x1999);
IkReal x2024=((0.27155)*r21*sj3);
IkReal x2025=(cj0*x2023);
IkReal x2026=(sj0*x2025);
evalcond[0]=((((-1.0)*x2014))+x2021+(((-1.0)*x2007*x2018))+(((-1.0)*r20*sj5*x2007))+((r22*x2017))+((sj5*x2015))+(((-1.0)*r20*x2001)));
evalcond[1]=((((-1.0)*py*x2011))+((x2023*(sj0*sj0)))+((x2005*x2012))+(((-1.0)*r10*x2007*x2012))+(((-1.0)*sj0*x2007*x2009))+(((-1.0)*r10*sj0*x2001))+((r12*sj0*x2017)));
evalcond[2]=((((0.07155)*r01*x2004))+((cj0*x2025))+(((-1.0)*cj0*x2007*x2016))+(((-1.0)*cj0*r00*x2001))+(((-1.0)*r00*x2004*x2007))+((cj0*r02*x2017))+(((-1.0)*px*x2019)));
evalcond[3]=(((sj0*x2007*x2008))+((r10*x2001))+((x2003*x2010*x2012))+(((-1.0)*sj5*x2005))+((x2006*x2020))+py+(((-1.0)*sj0*x2023))+(((0.27155)*sj0*x2003*x2018))+(((-1.0)*x2012*x2024)));
evalcond[4]=(((r00*x2001))+((cj0*x2007*x2008))+((x2003*x2004*x2010))+px+(((0.27155)*cj0*x2003*x2018))+((cj0*x2006*x2010))+(((-1.0)*x2025))+(((-1.0)*x2022))+(((-1.0)*x2004*x2024)));
evalcond[5]=((((-1.0)*pz*x2011))+(((-1.0)*r11*sj3*x2013))+(((0.27155)*x2003*x2009))+((sj0*x2021))+((r10*x2003*x2013))+((cj3*r12*x2007))+(((-1.0)*r20*sj0*x2001))+((x2012*x2015))+(((0.27155)*r10*x2006)));
evalcond[6]=(((cj3*r02*x2007))+(((0.27155)*r00*x2006))+(((0.27155)*x2003*x2016))+((x2004*x2015))+((cj0*x2021))+(((-1.0)*r01*sj3*x2013))+((r00*x2003*x2013))+(((-1.0)*cj0*r20*x2001))+(((-1.0)*cj0*x2014)));
evalcond[7]=(((cj0*r12*x2017))+x2026+(((-1.0)*r10*x2004*x2007))+(((-1.0)*x2001*x2002))+(((0.07155)*r01*x2012))+(((-1.0)*px*x2011))+(((-1.0)*cj0*x2007*x2009)));
evalcond[8]=((((-1.0)*sj0*x2007*x2016))+((r02*sj0*x2017))+(((-1.0)*py*x2019))+x2026+(((-1.0)*cj0*r10*x2001))+((x2004*x2005))+(((-1.0)*sj5*x2002*x2007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2027=(cj5*sj4);
IkReal x2028=(cj4*r02);
IkReal x2029=((1.0)*cj1);
IkReal x2030=(sj4*sj5);
IkReal x2031=((1.0)*cj4*r22);
IkReal x2032=(sj1*x2030);
if( IKabs((((r00*x2032))+(((-1.0)*sj1*x2028))+(((-1.0)*cj4*r22*x2029))+((r01*sj1*x2027))+((cj1*r21*x2027))+((cj1*r20*x2030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2031))+((r21*sj1*x2027))+((r20*x2032))+(((-1.0)*r01*x2027*x2029))+((cj1*x2028))+(((-1.0)*r00*x2029*x2030)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2032))+(((-1.0)*sj1*x2028))+(((-1.0)*cj4*r22*x2029))+((r01*sj1*x2027))+((cj1*r21*x2027))+((cj1*r20*x2030))))+IKsqr(((((-1.0)*sj1*x2031))+((r21*sj1*x2027))+((r20*x2032))+(((-1.0)*r01*x2027*x2029))+((cj1*x2028))+(((-1.0)*r00*x2029*x2030))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2032))+(((-1.0)*sj1*x2028))+(((-1.0)*cj4*r22*x2029))+((r01*sj1*x2027))+((cj1*r21*x2027))+((cj1*r20*x2030))), ((((-1.0)*sj1*x2031))+((r21*sj1*x2027))+((r20*x2032))+(((-1.0)*r01*x2027*x2029))+((cj1*x2028))+(((-1.0)*r00*x2029*x2030))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2033=IKcos(j2);
IkReal x2034=IKsin(j2);
IkReal x2035=(cj3*sj4);
IkReal x2036=((1.0)*cj4);
IkReal x2037=(r00*sj5);
IkReal x2038=(cj3*cj4);
IkReal x2039=(cj5*sj4);
IkReal x2040=((0.07155)*sj5);
IkReal x2041=(cj5*r20);
IkReal x2042=(cj5*r00);
IkReal x2043=(r20*sj5);
IkReal x2044=(cj1*x2033);
IkReal x2045=(sj1*x2033);
IkReal x2046=(cj1*x2034);
IkReal x2047=((1.0)*sj3*sj5);
IkReal x2048=(sj1*x2034);
IkReal x2049=((1.0)*x2048);
evalcond[0]=((((-1.0)*x2049))+((r01*x2039))+x2044+(((-1.0)*r02*x2036))+((sj4*x2037)));
evalcond[1]=(((r21*x2039))+(((-1.0)*r22*x2036))+((sj4*x2043))+(((-1.0)*x2045))+(((-1.0)*x2046)));
evalcond[2]=(((r21*x2040))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x2041))+(((-0.27155)*x2046))+(((-0.27155)*x2045)));
evalcond[3]=((((0.3571)*sj1))+(((-1.0)*px))+(((-0.07155)*x2042))+(((-0.27155)*x2048))+((r01*x2040))+(((0.27155)*x2044)));
evalcond[4]=(x2046+x2045+((cj5*r01*x2038))+((r02*x2035))+(((-1.0)*r01*x2047))+((x2037*x2038))+((sj3*x2042)));
evalcond[5]=(((r22*x2035))+(((-1.0)*x2049))+((cj5*r21*x2038))+x2044+(((-1.0)*r21*x2047))+((sj3*x2041))+((x2038*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2050=(cj4*r02);
IkReal x2051=(cj5*sj4);
IkReal x2052=((1.0)*sj1);
IkReal x2053=(sj4*sj5);
IkReal x2054=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x2054))+(((-1.0)*r01*x2051*x2052))+((sj1*x2050))+((cj1*r21*x2051))+((cj1*r20*x2053))+(((-1.0)*r00*x2052*x2053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2050))+((r20*sj1*x2053))+((cj1*r01*x2051))+(((-1.0)*cj4*r22*x2052))+((cj1*r00*x2053))+((r21*sj1*x2051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2054))+(((-1.0)*r01*x2051*x2052))+((sj1*x2050))+((cj1*r21*x2051))+((cj1*r20*x2053))+(((-1.0)*r00*x2052*x2053))))+IKsqr(((((-1.0)*cj1*x2050))+((r20*sj1*x2053))+((cj1*r01*x2051))+(((-1.0)*cj4*r22*x2052))+((cj1*r00*x2053))+((r21*sj1*x2051))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2054))+(((-1.0)*r01*x2051*x2052))+((sj1*x2050))+((cj1*r21*x2051))+((cj1*r20*x2053))+(((-1.0)*r00*x2052*x2053))), ((((-1.0)*cj1*x2050))+((r20*sj1*x2053))+((cj1*r01*x2051))+(((-1.0)*cj4*r22*x2052))+((cj1*r00*x2053))+((r21*sj1*x2051))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2055=IKcos(j2);
IkReal x2056=IKsin(j2);
IkReal x2057=(cj3*sj4);
IkReal x2058=((1.0)*cj4);
IkReal x2059=(cj5*sj4);
IkReal x2060=((0.07155)*sj5);
IkReal x2061=(cj5*r20);
IkReal x2062=(sj4*sj5);
IkReal x2063=(cj5*r00);
IkReal x2064=(cj1*x2055);
IkReal x2065=(cj3*cj4*sj5);
IkReal x2066=(sj1*x2055);
IkReal x2067=((0.27155)*x2056);
IkReal x2068=((1.0)*sj3*sj5);
IkReal x2069=(sj1*x2056);
IkReal x2070=(cj3*cj4*cj5);
IkReal x2071=((1.0)*x2066);
IkReal x2072=((1.0)*cj1*x2056);
IkReal x2073=(x2072+x2071);
evalcond[0]=(((r01*x2059))+x2069+(((-1.0)*x2064))+(((-1.0)*r02*x2058))+((r00*x2062)));
evalcond[1]=((((-1.0)*r22*x2058))+(((-1.0)*x2073))+((r20*x2062))+((r21*x2059)));
evalcond[2]=(((r21*x2060))+(((0.3571)*cj1))+(((-0.07155)*x2061))+(((-1.0)*pz))+(((-1.0)*cj1*x2067))+(((-0.27155)*x2066)));
evalcond[3]=((((-0.07155)*x2063))+(((-1.0)*px))+(((-0.3571)*sj1))+((sj1*x2067))+((r01*x2060))+(((-0.27155)*x2064)));
evalcond[4]=(((sj3*x2061))+((r22*x2057))+x2064+(((-1.0)*x2069))+((r20*x2065))+(((-1.0)*r21*x2068))+((r21*x2070)));
evalcond[5]=(((sj3*x2063))+(((-1.0)*x2073))+((r02*x2057))+((r01*x2070))+((r00*x2065))+(((-1.0)*r01*x2068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2074=(cj1*cj4);
IkReal x2075=((1.0)*r22);
IkReal x2076=(cj4*sj1);
IkReal x2077=(sj4*sj5);
IkReal x2078=(cj1*cj5*sj4);
IkReal x2079=(cj5*sj1*sj4);
if( IKabs((((cj1*r20*x2077))+((r11*x2079))+(((-1.0)*x2074*x2075))+(((-1.0)*r12*x2076))+((r10*sj1*x2077))+((r21*x2078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2077))+((r12*x2074))+(((-1.0)*cj1*r10*x2077))+(((-1.0)*r11*x2078))+(((-1.0)*x2075*x2076))+((r21*x2079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2077))+((r11*x2079))+(((-1.0)*x2074*x2075))+(((-1.0)*r12*x2076))+((r10*sj1*x2077))+((r21*x2078))))+IKsqr((((r20*sj1*x2077))+((r12*x2074))+(((-1.0)*cj1*r10*x2077))+(((-1.0)*r11*x2078))+(((-1.0)*x2075*x2076))+((r21*x2079))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2077))+((r11*x2079))+(((-1.0)*x2074*x2075))+(((-1.0)*r12*x2076))+((r10*sj1*x2077))+((r21*x2078))), (((r20*sj1*x2077))+((r12*x2074))+(((-1.0)*cj1*r10*x2077))+(((-1.0)*r11*x2078))+(((-1.0)*x2075*x2076))+((r21*x2079))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2080=IKcos(j2);
IkReal x2081=IKsin(j2);
IkReal x2082=((1.0)*cj4);
IkReal x2083=((0.07155)*cj5);
IkReal x2084=(cj5*sj4);
IkReal x2085=(cj3*cj4);
IkReal x2086=(r20*sj5);
IkReal x2087=(r10*sj5);
IkReal x2088=((0.07155)*sj5);
IkReal x2089=(cj5*sj3);
IkReal x2090=(cj3*sj4);
IkReal x2091=(cj1*x2080);
IkReal x2092=((1.0)*sj3*sj5);
IkReal x2093=(cj1*x2081);
IkReal x2094=(sj1*x2080);
IkReal x2095=(sj1*x2081);
IkReal x2096=((1.0)*x2095);
evalcond[0]=((((-1.0)*x2096))+x2091+((sj4*x2087))+(((-1.0)*r12*x2082))+((r11*x2084)));
evalcond[1]=((((-1.0)*r22*x2082))+((sj4*x2086))+((r21*x2084))+(((-1.0)*x2093))+(((-1.0)*x2094)));
evalcond[2]=((((-1.0)*r20*x2083))+(((-0.27155)*x2094))+(((-0.27155)*x2093))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x2088)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x2095))+(((-1.0)*py))+(((0.27155)*x2091))+(((-1.0)*r10*x2083))+((r11*x2088)));
evalcond[4]=(((cj5*r11*x2085))+((x2085*x2087))+x2094+x2093+((r10*x2089))+(((-1.0)*r11*x2092))+((r12*x2090)));
evalcond[5]=((((-1.0)*r21*x2092))+(((-1.0)*x2096))+((cj5*r21*x2085))+((x2085*x2086))+x2091+((r20*x2089))+((r22*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2097=(cj4*sj1);
IkReal x2098=(cj5*sj4);
IkReal x2099=((1.0)*sj1);
IkReal x2100=(sj4*sj5);
IkReal x2101=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x2101))+((cj1*r21*x2098))+(((-1.0)*r10*x2099*x2100))+(((-1.0)*r11*x2098*x2099))+((cj1*r20*x2100))+((r12*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r10*x2100))+(((-1.0)*r12*x2101))+((r21*sj1*x2098))+((r20*sj1*x2100))+((cj1*r11*x2098))+(((-1.0)*r22*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2101))+((cj1*r21*x2098))+(((-1.0)*r10*x2099*x2100))+(((-1.0)*r11*x2098*x2099))+((cj1*r20*x2100))+((r12*x2097))))+IKsqr((((cj1*r10*x2100))+(((-1.0)*r12*x2101))+((r21*sj1*x2098))+((r20*sj1*x2100))+((cj1*r11*x2098))+(((-1.0)*r22*x2097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2101))+((cj1*r21*x2098))+(((-1.0)*r10*x2099*x2100))+(((-1.0)*r11*x2098*x2099))+((cj1*r20*x2100))+((r12*x2097))), (((cj1*r10*x2100))+(((-1.0)*r12*x2101))+((r21*sj1*x2098))+((r20*sj1*x2100))+((cj1*r11*x2098))+(((-1.0)*r22*x2097))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2102=IKcos(j2);
IkReal x2103=IKsin(j2);
IkReal x2104=((1.0)*cj4);
IkReal x2105=((0.07155)*cj5);
IkReal x2106=(cj5*sj4);
IkReal x2107=(cj3*cj4);
IkReal x2108=(r20*sj5);
IkReal x2109=(r10*sj5);
IkReal x2110=((0.07155)*sj5);
IkReal x2111=(cj5*sj3);
IkReal x2112=(cj3*sj4);
IkReal x2113=(cj1*x2102);
IkReal x2114=((1.0)*sj3*sj5);
IkReal x2115=(sj1*x2102);
IkReal x2116=((0.27155)*x2103);
IkReal x2117=(sj1*x2103);
IkReal x2118=((1.0)*x2115);
IkReal x2119=((1.0)*cj1*x2103);
IkReal x2120=(x2118+x2119);
evalcond[0]=((((-1.0)*r12*x2104))+((r11*x2106))+((sj4*x2109))+x2117+(((-1.0)*x2113)));
evalcond[1]=((((-1.0)*r22*x2104))+((r21*x2106))+((sj4*x2108))+(((-1.0)*x2120)));
evalcond[2]=(((r21*x2110))+(((0.3571)*cj1))+(((-0.27155)*x2115))+(((-1.0)*pz))+(((-1.0)*r20*x2105))+(((-1.0)*cj1*x2116)));
evalcond[3]=((((-1.0)*r10*x2105))+((sj1*x2116))+(((-0.27155)*x2113))+(((-1.0)*py))+(((-0.3571)*sj1))+((r11*x2110)));
evalcond[4]=((((-1.0)*r21*x2114))+x2113+((r20*x2111))+((x2107*x2108))+((cj5*r21*x2107))+(((-1.0)*x2117))+((r22*x2112)));
evalcond[5]=(((r12*x2112))+((cj5*r11*x2107))+(((-1.0)*x2120))+((x2107*x2109))+((r10*x2111))+(((-1.0)*r11*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2121=(cj4*r12);
IkReal x2122=(cj5*sj4);
IkReal x2123=(r21*sj0);
IkReal x2124=((1.0)*cj1);
IkReal x2125=(r10*sj4*sj5);
IkReal x2126=(r20*sj0*sj4*sj5);
IkReal x2127=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2128=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2128.valid){
continue;
}
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2121))+((r11*sj1*x2122))+(((-1.0)*cj4*r22*sj0*x2124))+((cj1*x2122*x2123))+((sj1*x2125))+((cj1*x2126)))),IkReal((((sj1*x2122*x2123))+((sj1*x2126))+((cj1*x2121))+(((-1.0)*r11*x2122*x2124))+(((-1.0)*x2124*x2125))+(((-1.0)*sj1*x2127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2128.value)))+(x2129.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2130=IKcos(j2);
IkReal x2131=IKsin(j2);
IkReal x2132=(cj5*r21);
IkReal x2133=(cj3*cj4);
IkReal x2134=(r11*sj5);
IkReal x2135=((1.0)*sj3);
IkReal x2136=((1.0)*cj4);
IkReal x2137=((0.27155)*cj0);
IkReal x2138=((0.07155)*cj5);
IkReal x2139=(cj5*sj4);
IkReal x2140=((0.07155)*sj5);
IkReal x2141=((0.27155)*sj0);
IkReal x2142=((1.0)*sj1);
IkReal x2143=(r20*sj5);
IkReal x2144=(r10*sj5);
IkReal x2145=(cj3*sj4);
IkReal x2146=(cj5*sj3);
IkReal x2147=(r00*sj5);
IkReal x2148=((0.3571)*sj1);
IkReal x2149=(cj1*x2130);
IkReal x2150=(sj0*x2131);
IkReal x2151=(sj1*x2130);
IkReal x2152=(cj0*x2131);
IkReal x2153=(cj1*x2131);
IkReal x2154=(sj1*x2131);
evalcond[0]=((((-1.0)*r22*x2136))+((sj4*x2132))+(((-1.0)*x2130*x2142))+((sj4*x2143))+(((-1.0)*x2153)));
evalcond[1]=((((-1.0)*x2142*x2152))+((cj0*x2149))+((r01*x2139))+((sj4*x2147))+(((-1.0)*r02*x2136)));
evalcond[2]=((((-1.0)*x2142*x2150))+(((-1.0)*r12*x2136))+((r11*x2139))+((sj0*x2149))+((sj4*x2144)));
evalcond[3]=((((-0.27155)*x2153))+(((-0.27155)*x2151))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2138))+((r21*x2140)));
evalcond[4]=((((-1.0)*x2137*x2154))+((cj0*x2148))+(((-1.0)*r00*x2138))+(((-1.0)*px))+((x2137*x2149))+((r01*x2140)));
evalcond[5]=((((-1.0)*x2141*x2154))+((sj0*x2148))+(((-1.0)*py))+((x2141*x2149))+(((0.07155)*x2134))+(((-1.0)*r10*x2138)));
evalcond[6]=(((x2133*x2143))+(((-1.0)*x2131*x2142))+((r20*x2146))+x2149+(((-1.0)*r21*sj5*x2135))+((x2132*x2133))+((r22*x2145)));
evalcond[7]=(((x2133*x2147))+((r02*x2145))+((cj0*x2151))+((cj5*r01*x2133))+((r00*x2146))+(((-1.0)*r01*sj5*x2135))+((cj1*x2152)));
evalcond[8]=(((x2133*x2144))+(((-1.0)*x2134*x2135))+((cj5*r11*x2133))+((sj0*x2151))+((r10*x2146))+((r12*x2145))+((cj1*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2155=((1.0)*cj4);
IkReal x2156=(cj0*cj1);
IkReal x2157=(sj4*sj5);
IkReal x2158=(cj5*sj4);
IkReal x2159=((1.0)*cj1);
IkReal x2160=(cj0*sj1);
IkReal x2161=(sj1*x2158);
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal((((r21*x2156*x2158))+((r20*x2156*x2157))+((r01*x2161))+(((-1.0)*r22*x2155*x2156))+(((-1.0)*r02*sj1*x2155))+((r00*sj1*x2157)))),IkReal(((((-1.0)*r00*x2157*x2159))+((cj1*cj4*r02))+((r20*x2157*x2160))+(((-1.0)*r01*x2158*x2159))+((r21*x2158*x2160))+(((-1.0)*r22*x2155*x2160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2162.value)))+(x2163.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2164=IKcos(j2);
IkReal x2165=IKsin(j2);
IkReal x2166=(cj5*r21);
IkReal x2167=(cj3*cj4);
IkReal x2168=(r11*sj5);
IkReal x2169=((1.0)*sj3);
IkReal x2170=((1.0)*cj4);
IkReal x2171=((0.27155)*cj0);
IkReal x2172=((0.07155)*cj5);
IkReal x2173=(cj5*sj4);
IkReal x2174=((0.07155)*sj5);
IkReal x2175=((0.27155)*sj0);
IkReal x2176=((1.0)*sj1);
IkReal x2177=(r20*sj5);
IkReal x2178=(r10*sj5);
IkReal x2179=(cj3*sj4);
IkReal x2180=(cj5*sj3);
IkReal x2181=(r00*sj5);
IkReal x2182=((0.3571)*sj1);
IkReal x2183=(cj1*x2164);
IkReal x2184=(sj0*x2165);
IkReal x2185=(sj1*x2164);
IkReal x2186=(cj0*x2165);
IkReal x2187=(cj1*x2165);
IkReal x2188=(sj1*x2165);
evalcond[0]=((((-1.0)*x2187))+(((-1.0)*x2164*x2176))+((sj4*x2166))+(((-1.0)*r22*x2170))+((sj4*x2177)));
evalcond[1]=(((r01*x2173))+((cj0*x2183))+(((-1.0)*r02*x2170))+(((-1.0)*x2176*x2186))+((sj4*x2181)));
evalcond[2]=(((r11*x2173))+((sj0*x2183))+(((-1.0)*x2176*x2184))+((sj4*x2178))+(((-1.0)*r12*x2170)));
evalcond[3]=((((-1.0)*r20*x2172))+((r21*x2174))+(((-0.27155)*x2187))+(((-0.27155)*x2185))+(((0.3571)*cj1))+(((-1.0)*pz)));
evalcond[4]=(((r01*x2174))+(((-1.0)*x2171*x2188))+(((-1.0)*px))+((cj0*x2182))+(((-1.0)*r00*x2172))+((x2171*x2183)));
evalcond[5]=((((-1.0)*x2175*x2188))+(((0.07155)*x2168))+((sj0*x2182))+(((-1.0)*py))+((x2175*x2183))+(((-1.0)*r10*x2172)));
evalcond[6]=(((r22*x2179))+(((-1.0)*r21*sj5*x2169))+x2183+((r20*x2180))+((x2166*x2167))+((x2167*x2177))+(((-1.0)*x2165*x2176)));
evalcond[7]=(((cj1*x2186))+((cj0*x2185))+((r02*x2179))+((cj5*r01*x2167))+(((-1.0)*r01*sj5*x2169))+((x2167*x2181))+((r00*x2180)));
evalcond[8]=(((cj1*x2184))+(((-1.0)*x2168*x2169))+((sj0*x2185))+((cj5*r11*x2167))+((x2167*x2178))+((r12*x2179))+((r10*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2189=((1.0)*sj5);
IkReal x2190=((1.0)*sj4);
IkReal x2191=((1.0)*cj5*sj0);
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x2189))+(((-1.0)*cj5*r11*x2190))+((cj4*r12)))),-1);
if(!x2192.valid){
continue;
}
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2191))+((r21*sj0*sj5)))),IkReal(((((-1.0)*cj4*r21*x2191))+(((-1.0)*r22*sj0*x2190))+(((-1.0)*cj4*r20*sj0*x2189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2192.value)))+(x2193.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2194=IKsin(j3);
IkReal x2195=IKcos(j3);
IkReal x2196=(sj4*x2194);
IkReal x2197=(sj5*x2195);
IkReal x2198=(cj4*cj5*x2194);
IkReal x2199=(cj4*sj5*x2194);
IkReal x2200=((1.0)*cj5*x2195);
evalcond[0]=(((r22*x2196))+((r20*x2199))+(((-1.0)*r20*x2200))+((r21*x2198))+((r21*x2197)));
evalcond[1]=(sj0+((r02*x2196))+(((-1.0)*r00*x2200))+((r00*x2199))+((r01*x2198))+((r01*x2197)));
evalcond[2]=((((-1.0)*r10*x2200))+((r12*x2196))+((r11*x2198))+((r11*x2197))+((r10*x2199))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2201=((0.76043125175021)*sj4);
IkReal x2202=((0.200364043685242)*sj5);
IkReal x2203=((0.200364043685242)*cj5);
IkReal x2204=((0.76043125175021)*cj4);
if( IKabs((((r10*sj5*x2201))+(((2.80033604032484)*py))+(((-1.0)*r12*x2204))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x2201))+(((2.80033604032484)*pz))+((r20*x2203))+(((-1.0)*r22*x2204))+(((-1.0)*r21*x2202))+((r20*sj5*x2201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj5*x2201))+(((2.80033604032484)*py))+(((-1.0)*r12*x2204))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2203))))+IKsqr((((cj5*r21*x2201))+(((2.80033604032484)*pz))+((r20*x2203))+(((-1.0)*r22*x2204))+(((-1.0)*r21*x2202))+((r20*sj5*x2201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj5*x2201))+(((2.80033604032484)*py))+(((-1.0)*r12*x2204))+(((-1.0)*r11*x2202))+((cj5*r11*x2201))+((r10*x2203))), (((cj5*r21*x2201))+(((2.80033604032484)*pz))+((r20*x2203))+(((-1.0)*r22*x2204))+(((-1.0)*r21*x2202))+((r20*sj5*x2201))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2205=((1.0)*pz);
IkReal x2206=((0.27155)*sj5);
IkReal x2207=((0.07155)*cj5);
IkReal x2208=(cj3*cj4);
IkReal x2209=((0.27155)*sj4);
IkReal x2210=((0.27155)*cj4);
IkReal x2211=((0.07155)*sj5);
IkReal x2212=(cj5*r21);
IkReal x2213=(r10*x2207);
IkReal x2214=(r11*x2211);
IkReal x2215=((0.3571)*(IKsin(j1)));
IkReal x2216=(r21*x2211);
IkReal x2217=((0.3571)*(IKcos(j1)));
IkReal x2218=(r20*x2207);
IkReal x2219=((0.27155)*cj5*r11);
IkReal x2220=((0.27155)*cj5*sj3);
IkReal x2221=(x2205+x2218);
IkReal x2222=(x2215+x2214);
IkReal x2223=(x2217+x2216);
evalcond[0]=(x2223+(((-1.0)*r20*sj4*x2206))+(((-1.0)*x2221))+(((-1.0)*x2209*x2212))+((r22*x2210)));
evalcond[1]=(x2222+(((-1.0)*x2213))+((r12*x2210))+(((-1.0)*r10*sj4*x2206))+(((-1.0)*py))+(((-1.0)*cj5*r11*x2209)));
evalcond[2]=((((-1.0)*r21*sj3*x2206))+x2213+((r20*x2206*x2208))+(((0.27155)*x2208*x2212))+py+(((-1.0)*x2222))+((r20*x2220))+((cj3*r22*x2209)));
evalcond[3]=(x2223+((r10*x2220))+(((-1.0)*r11*sj3*x2206))+((cj3*r12*x2209))+(((-1.0)*x2221))+((x2208*x2219))+((r10*x2206*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2224=(cj1*cj4);
IkReal x2225=((1.0)*r22);
IkReal x2226=(cj4*sj1);
IkReal x2227=(sj4*sj5);
IkReal x2228=(cj1*cj5*sj4);
IkReal x2229=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x2224*x2225))+((r21*x2228))+((r10*sj1*x2227))+(((-1.0)*r12*x2226))+((r11*x2229))+((cj1*r20*x2227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2224))+(((-1.0)*x2225*x2226))+(((-1.0)*r11*x2228))+((r21*x2229))+((r20*sj1*x2227))+(((-1.0)*cj1*r10*x2227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2224*x2225))+((r21*x2228))+((r10*sj1*x2227))+(((-1.0)*r12*x2226))+((r11*x2229))+((cj1*r20*x2227))))+IKsqr((((r12*x2224))+(((-1.0)*x2225*x2226))+(((-1.0)*r11*x2228))+((r21*x2229))+((r20*sj1*x2227))+(((-1.0)*cj1*r10*x2227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2224*x2225))+((r21*x2228))+((r10*sj1*x2227))+(((-1.0)*r12*x2226))+((r11*x2229))+((cj1*r20*x2227))), (((r12*x2224))+(((-1.0)*x2225*x2226))+(((-1.0)*r11*x2228))+((r21*x2229))+((r20*sj1*x2227))+(((-1.0)*cj1*r10*x2227))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2230=IKcos(j2);
IkReal x2231=IKsin(j2);
IkReal x2232=((1.0)*cj4);
IkReal x2233=((0.07155)*cj5);
IkReal x2234=(cj5*sj4);
IkReal x2235=(cj3*cj4);
IkReal x2236=(r20*sj5);
IkReal x2237=(r10*sj5);
IkReal x2238=((0.07155)*sj5);
IkReal x2239=(cj5*sj3);
IkReal x2240=(cj3*sj4);
IkReal x2241=(cj1*x2230);
IkReal x2242=((1.0)*sj3*sj5);
IkReal x2243=(cj1*x2231);
IkReal x2244=(sj1*x2230);
IkReal x2245=(sj1*x2231);
IkReal x2246=((1.0)*x2245);
evalcond[0]=(((sj4*x2237))+x2241+(((-1.0)*x2246))+(((-1.0)*r12*x2232))+((r11*x2234)));
evalcond[1]=(((sj4*x2236))+(((-1.0)*x2243))+(((-1.0)*x2244))+((r21*x2234))+(((-1.0)*r22*x2232)));
evalcond[2]=((((-1.0)*r20*x2233))+(((-0.27155)*x2243))+(((-0.27155)*x2244))+(((0.3571)*cj1))+((r21*x2238))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*r10*x2233))+(((-0.27155)*x2245))+(((0.3571)*sj1))+(((0.27155)*x2241))+(((-1.0)*py))+((r11*x2238)));
evalcond[4]=(((x2235*x2237))+x2244+x2243+((cj5*r11*x2235))+((r10*x2239))+(((-1.0)*r11*x2242))+((r12*x2240)));
evalcond[5]=(((x2235*x2236))+x2241+((cj5*r21*x2235))+((r20*x2239))+(((-1.0)*x2246))+(((-1.0)*r21*x2242))+((r22*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2247=((0.76043125175021)*sj4);
IkReal x2248=((0.200364043685242)*sj5);
IkReal x2249=((0.200364043685242)*cj5);
IkReal x2250=((0.76043125175021)*cj4);
if( IKabs(((((-2.80033604032484)*py))+((r11*x2248))+((r12*x2250))+(((-1.0)*r10*x2249))+(((-1.0)*r10*sj5*x2247))+(((-1.0)*cj5*r11*x2247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2250))+(((2.80033604032484)*pz))+((r20*x2249))+((r20*sj5*x2247))+((cj5*r21*x2247))+(((-1.0)*r21*x2248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.80033604032484)*py))+((r11*x2248))+((r12*x2250))+(((-1.0)*r10*x2249))+(((-1.0)*r10*sj5*x2247))+(((-1.0)*cj5*r11*x2247))))+IKsqr(((((-1.0)*r22*x2250))+(((2.80033604032484)*pz))+((r20*x2249))+((r20*sj5*x2247))+((cj5*r21*x2247))+(((-1.0)*r21*x2248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.80033604032484)*py))+((r11*x2248))+((r12*x2250))+(((-1.0)*r10*x2249))+(((-1.0)*r10*sj5*x2247))+(((-1.0)*cj5*r11*x2247))), ((((-1.0)*r22*x2250))+(((2.80033604032484)*pz))+((r20*x2249))+((r20*sj5*x2247))+((cj5*r21*x2247))+(((-1.0)*r21*x2248))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2251=((0.27155)*sj5);
IkReal x2252=((0.07155)*cj5);
IkReal x2253=(cj3*cj4);
IkReal x2254=((0.27155)*sj4);
IkReal x2255=((0.27155)*cj4);
IkReal x2256=((0.07155)*sj5);
IkReal x2257=(cj5*r21);
IkReal x2258=(r10*x2252);
IkReal x2259=((0.3571)*(IKsin(j1)));
IkReal x2260=(r11*x2256);
IkReal x2261=(r20*x2252);
IkReal x2262=(r21*x2256);
IkReal x2263=((0.3571)*(IKcos(j1)));
IkReal x2264=((0.27155)*cj5*r11);
IkReal x2265=((0.27155)*cj5*sj3);
IkReal x2266=(x2262+x2263);
IkReal x2267=(x2259+x2258+py);
evalcond[0]=(((r10*sj4*x2251))+x2267+(((-1.0)*r12*x2255))+((cj5*r11*x2254))+(((-1.0)*x2260)));
evalcond[1]=(x2266+(((-1.0)*pz))+((r22*x2255))+(((-1.0)*r20*sj4*x2251))+(((-1.0)*x2261))+(((-1.0)*x2254*x2257)));
evalcond[2]=(((r21*sj3*x2251))+x2267+(((-1.0)*cj3*r22*x2254))+(((-1.0)*r20*x2265))+(((-1.0)*x2260))+(((-0.27155)*x2253*x2257))+(((-1.0)*r20*x2251*x2253)));
evalcond[3]=(((r10*x2251*x2253))+x2261+((cj3*r12*x2254))+((r10*x2265))+pz+((x2253*x2264))+(((-1.0)*x2266))+(((-1.0)*r11*sj3*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2268=(cj4*sj1);
IkReal x2269=(cj5*sj4);
IkReal x2270=((1.0)*sj1);
IkReal x2271=(sj4*sj5);
IkReal x2272=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r22*x2272))+(((-1.0)*r10*x2270*x2271))+((r12*x2268))+((cj1*r20*x2271))+(((-1.0)*r11*x2269*x2270))+((cj1*r21*x2269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x2269))+(((-1.0)*r22*x2268))+((r21*sj1*x2269))+((cj1*r10*x2271))+((r20*sj1*x2271))+(((-1.0)*r12*x2272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2272))+(((-1.0)*r10*x2270*x2271))+((r12*x2268))+((cj1*r20*x2271))+(((-1.0)*r11*x2269*x2270))+((cj1*r21*x2269))))+IKsqr((((cj1*r11*x2269))+(((-1.0)*r22*x2268))+((r21*sj1*x2269))+((cj1*r10*x2271))+((r20*sj1*x2271))+(((-1.0)*r12*x2272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2272))+(((-1.0)*r10*x2270*x2271))+((r12*x2268))+((cj1*r20*x2271))+(((-1.0)*r11*x2269*x2270))+((cj1*r21*x2269))), (((cj1*r11*x2269))+(((-1.0)*r22*x2268))+((r21*sj1*x2269))+((cj1*r10*x2271))+((r20*sj1*x2271))+(((-1.0)*r12*x2272))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2273=IKcos(j2);
IkReal x2274=IKsin(j2);
IkReal x2275=((1.0)*cj4);
IkReal x2276=((0.07155)*cj5);
IkReal x2277=(cj5*sj4);
IkReal x2278=(cj3*cj4);
IkReal x2279=(r20*sj5);
IkReal x2280=(r10*sj5);
IkReal x2281=((0.07155)*sj5);
IkReal x2282=(cj5*sj3);
IkReal x2283=(cj3*sj4);
IkReal x2284=(cj1*x2273);
IkReal x2285=((1.0)*sj3*sj5);
IkReal x2286=(sj1*x2273);
IkReal x2287=((0.27155)*x2274);
IkReal x2288=(sj1*x2274);
IkReal x2289=((1.0)*x2286);
IkReal x2290=((1.0)*cj1*x2274);
IkReal x2291=(x2289+x2290);
evalcond[0]=(x2288+(((-1.0)*x2284))+((r11*x2277))+((sj4*x2280))+(((-1.0)*r12*x2275)));
evalcond[1]=(((r21*x2277))+((sj4*x2279))+(((-1.0)*r22*x2275))+(((-1.0)*x2291)));
evalcond[2]=((((-0.27155)*x2286))+(((0.3571)*cj1))+(((-1.0)*r20*x2276))+(((-1.0)*pz))+((r21*x2281))+(((-1.0)*cj1*x2287)));
evalcond[3]=((((-0.27155)*x2284))+((r11*x2281))+(((-1.0)*py))+(((-0.3571)*sj1))+((sj1*x2287))+(((-1.0)*r10*x2276)));
evalcond[4]=(x2284+((r20*x2282))+((cj5*r21*x2278))+(((-1.0)*x2288))+(((-1.0)*r21*x2285))+((x2278*x2279))+((r22*x2283)));
evalcond[5]=(((r10*x2282))+((r12*x2283))+(((-1.0)*r11*x2285))+((cj5*r11*x2278))+((x2278*x2280))+(((-1.0)*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2292=((0.76043125175021)*sj4);
IkReal x2293=((0.76043125175021)*cj4);
IkReal x2294=((0.200364043685242)*sj5);
IkReal x2295=((0.200364043685242)*cj5);
if( IKabs(((((2.80033604032484)*px))+(((-1.0)*r02*x2293))+(((-1.0)*r01*x2294))+((cj5*r01*x2292))+((r00*x2295))+((r00*sj5*x2292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.80033604032484)*pz))+((cj5*r21*x2292))+((r20*sj5*x2292))+((r20*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.80033604032484)*px))+(((-1.0)*r02*x2293))+(((-1.0)*r01*x2294))+((cj5*r01*x2292))+((r00*x2295))+((r00*sj5*x2292))))+IKsqr(((((2.80033604032484)*pz))+((cj5*r21*x2292))+((r20*sj5*x2292))+((r20*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.80033604032484)*px))+(((-1.0)*r02*x2293))+(((-1.0)*r01*x2294))+((cj5*r01*x2292))+((r00*x2295))+((r00*sj5*x2292))), ((((2.80033604032484)*pz))+((cj5*r21*x2292))+((r20*sj5*x2292))+((r20*x2295))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2294))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2296=((1.0)*pz);
IkReal x2297=((0.27155)*sj4);
IkReal x2298=(r00*sj5);
IkReal x2299=((0.07155)*sj5);
IkReal x2300=((0.27155)*cj4);
IkReal x2301=(cj5*r20);
IkReal x2302=(cj3*cj5);
IkReal x2303=((0.27155)*sj3);
IkReal x2304=(r20*sj5);
IkReal x2305=(cj5*r00);
IkReal x2306=((0.07155)*x2305);
IkReal x2307=(r01*x2299);
IkReal x2308=((0.3571)*(IKsin(j1)));
IkReal x2309=(r21*x2299);
IkReal x2310=((0.3571)*(IKcos(j1)));
IkReal x2311=((0.07155)*x2301);
IkReal x2312=(sj5*x2303);
IkReal x2313=(x2296+x2311);
IkReal x2314=(x2308+x2307);
IkReal x2315=(x2310+x2309);
evalcond[0]=(x2315+(((-1.0)*x2297*x2304))+((r22*x2300))+(((-1.0)*cj5*r21*x2297))+(((-1.0)*x2313)));
evalcond[1]=((((-1.0)*cj5*r01*x2297))+x2314+((r02*x2300))+(((-1.0)*x2306))+(((-1.0)*px))+(((-1.0)*x2297*x2298)));
evalcond[2]=(((cj3*x2300*x2304))+x2306+((cj3*r22*x2297))+px+((x2301*x2303))+((r21*x2300*x2302))+(((-1.0)*r21*x2312))+(((-1.0)*x2314)));
evalcond[3]=(((x2303*x2305))+x2315+((cj3*x2298*x2300))+((r01*x2300*x2302))+(((-1.0)*r01*x2312))+((cj3*r02*x2297))+(((-1.0)*x2313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2316=(cj5*sj4);
IkReal x2317=(cj4*r02);
IkReal x2318=((1.0)*cj1);
IkReal x2319=(sj4*sj5);
IkReal x2320=((1.0)*cj4*r22);
IkReal x2321=(sj1*x2319);
if( IKabs(((((-1.0)*cj4*r22*x2318))+((cj1*r20*x2319))+((r00*x2321))+((r01*sj1*x2316))+((cj1*r21*x2316))+(((-1.0)*sj1*x2317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2318*x2319))+(((-1.0)*r01*x2316*x2318))+((cj1*x2317))+(((-1.0)*sj1*x2320))+((r20*x2321))+((r21*sj1*x2316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x2318))+((cj1*r20*x2319))+((r00*x2321))+((r01*sj1*x2316))+((cj1*r21*x2316))+(((-1.0)*sj1*x2317))))+IKsqr(((((-1.0)*r00*x2318*x2319))+(((-1.0)*r01*x2316*x2318))+((cj1*x2317))+(((-1.0)*sj1*x2320))+((r20*x2321))+((r21*sj1*x2316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x2318))+((cj1*r20*x2319))+((r00*x2321))+((r01*sj1*x2316))+((cj1*r21*x2316))+(((-1.0)*sj1*x2317))), ((((-1.0)*r00*x2318*x2319))+(((-1.0)*r01*x2316*x2318))+((cj1*x2317))+(((-1.0)*sj1*x2320))+((r20*x2321))+((r21*sj1*x2316))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2322=IKcos(j2);
IkReal x2323=IKsin(j2);
IkReal x2324=(cj3*sj4);
IkReal x2325=((1.0)*cj4);
IkReal x2326=(r00*sj5);
IkReal x2327=(cj3*cj4);
IkReal x2328=(cj5*sj4);
IkReal x2329=((0.07155)*sj5);
IkReal x2330=(cj5*r20);
IkReal x2331=(cj5*r00);
IkReal x2332=(r20*sj5);
IkReal x2333=(cj1*x2322);
IkReal x2334=(sj1*x2322);
IkReal x2335=(cj1*x2323);
IkReal x2336=((1.0)*sj3*sj5);
IkReal x2337=(sj1*x2323);
IkReal x2338=((1.0)*x2337);
evalcond[0]=((((-1.0)*x2338))+x2333+((sj4*x2326))+((r01*x2328))+(((-1.0)*r02*x2325)));
evalcond[1]=((((-1.0)*r22*x2325))+((r21*x2328))+((sj4*x2332))+(((-1.0)*x2334))+(((-1.0)*x2335)));
evalcond[2]=((((-0.27155)*x2335))+(((-0.27155)*x2334))+((r21*x2329))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x2330)));
evalcond[3]=((((-0.27155)*x2337))+(((0.3571)*sj1))+(((0.27155)*x2333))+(((-1.0)*px))+((r01*x2329))+(((-0.07155)*x2331)));
evalcond[4]=(((r02*x2324))+((cj5*r01*x2327))+((sj3*x2331))+x2334+x2335+(((-1.0)*r01*x2336))+((x2326*x2327)));
evalcond[5]=((((-1.0)*x2338))+((sj3*x2330))+x2333+((r22*x2324))+((x2327*x2332))+((cj5*r21*x2327))+(((-1.0)*r21*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2339=((0.76043125175021)*sj4);
IkReal x2340=((0.76043125175021)*cj4);
IkReal x2341=((0.200364043685242)*sj5);
IkReal x2342=((0.200364043685242)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x2339))+(((-2.80033604032484)*px))+((r01*x2341))+(((-1.0)*cj5*r01*x2339))+(((-1.0)*r00*x2342))+((r02*x2340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2339))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2341))+(((-1.0)*r22*x2340))+((r20*x2342))+((cj5*r21*x2339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x2339))+(((-2.80033604032484)*px))+((r01*x2341))+(((-1.0)*cj5*r01*x2339))+(((-1.0)*r00*x2342))+((r02*x2340))))+IKsqr((((r20*sj5*x2339))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2341))+(((-1.0)*r22*x2340))+((r20*x2342))+((cj5*r21*x2339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x2339))+(((-2.80033604032484)*px))+((r01*x2341))+(((-1.0)*cj5*r01*x2339))+(((-1.0)*r00*x2342))+((r02*x2340))), (((r20*sj5*x2339))+(((2.80033604032484)*pz))+(((-1.0)*r21*x2341))+(((-1.0)*r22*x2340))+((r20*x2342))+((cj5*r21*x2339))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2343=((0.27155)*sj4);
IkReal x2344=(r00*sj5);
IkReal x2345=((0.07155)*sj5);
IkReal x2346=((0.27155)*cj4);
IkReal x2347=(cj5*r20);
IkReal x2348=(cj3*cj5);
IkReal x2349=((0.27155)*sj3);
IkReal x2350=(r20*sj5);
IkReal x2351=(cj5*r00);
IkReal x2352=((0.07155)*x2351);
IkReal x2353=((0.3571)*(IKsin(j1)));
IkReal x2354=(r01*x2345);
IkReal x2355=((0.07155)*x2347);
IkReal x2356=(r21*x2345);
IkReal x2357=((0.3571)*(IKcos(j1)));
IkReal x2358=(sj5*x2349);
IkReal x2359=(x2356+x2357);
IkReal x2360=(x2352+x2353+px);
evalcond[0]=(x2360+((x2343*x2344))+(((-1.0)*r02*x2346))+((cj5*r01*x2343))+(((-1.0)*x2354)));
evalcond[1]=(x2359+((r22*x2346))+(((-1.0)*pz))+(((-1.0)*x2343*x2350))+(((-1.0)*cj5*r21*x2343))+(((-1.0)*x2355)));
evalcond[2]=(x2360+(((-1.0)*r21*x2346*x2348))+(((-1.0)*cj3*r22*x2343))+(((-1.0)*cj3*x2346*x2350))+((r21*x2358))+(((-1.0)*x2354))+(((-1.0)*x2347*x2349)));
evalcond[3]=(((cj3*r02*x2343))+((r01*x2346*x2348))+x2355+(((-1.0)*r01*x2358))+pz+((x2349*x2351))+(((-1.0)*x2359))+((cj3*x2344*x2346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2361=(cj4*r02);
IkReal x2362=(cj5*sj4);
IkReal x2363=((1.0)*sj1);
IkReal x2364=(sj4*sj5);
IkReal x2365=((1.0)*cj4*r22);
if( IKabs((((cj1*r20*x2364))+((sj1*x2361))+((cj1*r21*x2362))+(((-1.0)*r00*x2363*x2364))+(((-1.0)*r01*x2362*x2363))+(((-1.0)*cj1*x2365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r00*x2364))+((cj1*r01*x2362))+((r21*sj1*x2362))+(((-1.0)*cj1*x2361))+(((-1.0)*cj4*r22*x2363))+((r20*sj1*x2364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2364))+((sj1*x2361))+((cj1*r21*x2362))+(((-1.0)*r00*x2363*x2364))+(((-1.0)*r01*x2362*x2363))+(((-1.0)*cj1*x2365))))+IKsqr((((cj1*r00*x2364))+((cj1*r01*x2362))+((r21*sj1*x2362))+(((-1.0)*cj1*x2361))+(((-1.0)*cj4*r22*x2363))+((r20*sj1*x2364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2364))+((sj1*x2361))+((cj1*r21*x2362))+(((-1.0)*r00*x2363*x2364))+(((-1.0)*r01*x2362*x2363))+(((-1.0)*cj1*x2365))), (((cj1*r00*x2364))+((cj1*r01*x2362))+((r21*sj1*x2362))+(((-1.0)*cj1*x2361))+(((-1.0)*cj4*r22*x2363))+((r20*sj1*x2364))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2366=IKcos(j2);
IkReal x2367=IKsin(j2);
IkReal x2368=(cj3*sj4);
IkReal x2369=((1.0)*cj4);
IkReal x2370=(cj5*sj4);
IkReal x2371=((0.07155)*sj5);
IkReal x2372=(cj5*r20);
IkReal x2373=(sj4*sj5);
IkReal x2374=(cj5*r00);
IkReal x2375=(cj1*x2366);
IkReal x2376=(cj3*cj4*sj5);
IkReal x2377=(sj1*x2366);
IkReal x2378=((0.27155)*x2367);
IkReal x2379=((1.0)*sj3*sj5);
IkReal x2380=(sj1*x2367);
IkReal x2381=(cj3*cj4*cj5);
IkReal x2382=((1.0)*x2377);
IkReal x2383=((1.0)*cj1*x2367);
IkReal x2384=(x2383+x2382);
evalcond[0]=(x2380+(((-1.0)*x2375))+((r00*x2373))+((r01*x2370))+(((-1.0)*r02*x2369)));
evalcond[1]=(((r20*x2373))+(((-1.0)*x2384))+(((-1.0)*r22*x2369))+((r21*x2370)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x2377))+(((-0.07155)*x2372))+(((-1.0)*pz))+(((-1.0)*cj1*x2378))+((r21*x2371)));
evalcond[3]=(((sj1*x2378))+(((-0.27155)*x2375))+(((-0.07155)*x2374))+(((-1.0)*px))+(((-0.3571)*sj1))+((r01*x2371)));
evalcond[4]=(((r20*x2376))+x2375+((sj3*x2372))+(((-1.0)*r21*x2379))+(((-1.0)*x2380))+((r22*x2368))+((r21*x2381)));
evalcond[5]=(((r01*x2381))+((r02*x2368))+((sj3*x2374))+(((-1.0)*r01*x2379))+(((-1.0)*x2384))+((r00*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2385=((0.27155)*cj0);
IkReal x2386=(sj4*sj5);
IkReal x2387=((0.07155)*cj0);
IkReal x2388=(cj5*sj4);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(cj0,-2);
if(!x2389.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x2389.value)*(((((-1.0)*r01*x2385*x2388))+(((-1.0)*cj5*r00*x2387))+((cj4*r02*x2385))+(((-1.0)*r00*x2385*x2386))+((r01*sj5*x2387))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2388))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2386))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x2389.value)*(((((-1.0)*r01*x2385*x2388))+(((-1.0)*cj5*r00*x2387))+((cj4*r02*x2385))+(((-1.0)*r00*x2385*x2386))+((r01*sj5*x2387))+(((-1.0)*cj0*px))))))+IKsqr(((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2388))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2386))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x2389.value)*(((((-1.0)*r01*x2385*x2388))+(((-1.0)*cj5*r00*x2387))+((cj4*r02*x2385))+(((-1.0)*r00*x2385*x2386))+((r01*sj5*x2387))+(((-1.0)*cj0*px))))), ((((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.76043125175021)*r21*x2388))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r20*x2386))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2390=IKsin(j1);
IkReal x2391=IKcos(j1);
IkReal x2392=((0.07155)*cj5);
IkReal x2393=(r00*sj0);
IkReal x2394=(cj3*cj4);
IkReal x2395=(cj0*sj5);
IkReal x2396=((0.07155)*r11);
IkReal x2397=(cj5*sj3);
IkReal x2398=((0.27155)*sj4);
IkReal x2399=(cj3*r22);
IkReal x2400=(cj5*r11);
IkReal x2401=((0.27155)*r20);
IkReal x2402=((1.0)*sj0);
IkReal x2403=(sj0*sj5);
IkReal x2404=((0.27155)*sj5);
IkReal x2405=((1.0)*pz);
IkReal x2406=((0.07155)*r21);
IkReal x2407=(cj5*r01);
IkReal x2408=((0.27155)*cj4);
IkReal x2409=(cj5*r21);
IkReal x2410=((1.0)*cj0);
IkReal x2411=(sj0*x2401);
IkReal x2412=((0.3571)*x2391);
IkReal x2413=((0.07155)*r01*sj5);
IkReal x2414=((0.3571)*x2390);
IkReal x2415=((0.27155)*r21*sj3);
IkReal x2416=(cj0*x2414);
IkReal x2417=(sj0*x2416);
evalcond[0]=(x2412+(((-1.0)*x2405))+(((-1.0)*r20*x2392))+((sj5*x2406))+(((-1.0)*r20*sj5*x2398))+((r22*x2408))+(((-1.0)*x2398*x2409)));
evalcond[1]=((((-1.0)*py*x2402))+(((-1.0)*r10*sj0*x2392))+((r12*sj0*x2408))+((x2396*x2403))+(((-1.0)*sj0*x2398*x2400))+((x2414*(sj0*sj0)))+(((-1.0)*r10*x2398*x2403)));
evalcond[2]=((((-1.0)*cj0*x2398*x2407))+(((-1.0)*cj0*r00*x2392))+((cj0*r02*x2408))+((cj0*x2416))+(((0.07155)*r01*x2395))+(((-1.0)*r00*x2395*x2398))+(((-1.0)*px*x2410)));
evalcond[3]=(((sj0*x2398*x2399))+(((-1.0)*sj0*x2414))+(((-1.0)*sj5*x2396))+((r10*x2392))+py+((x2397*x2411))+((x2394*x2401*x2403))+(((0.27155)*sj0*x2394*x2409))+(((-1.0)*x2403*x2415)));
evalcond[4]=(((r00*x2392))+((x2394*x2395*x2401))+(((-1.0)*x2416))+(((-1.0)*x2413))+px+((cj0*x2398*x2399))+((cj0*x2397*x2401))+(((-1.0)*x2395*x2415))+(((0.27155)*cj0*x2394*x2409)));
evalcond[5]=((((-1.0)*r11*sj3*x2404))+((x2403*x2406))+((cj3*r12*x2398))+(((0.27155)*x2394*x2400))+((r10*x2394*x2404))+((sj0*x2412))+(((-1.0)*pz*x2402))+(((-1.0)*r20*sj0*x2392))+(((0.27155)*r10*x2397)));
evalcond[6]=(((r00*x2394*x2404))+((cj3*r02*x2398))+(((0.27155)*x2394*x2407))+((cj0*x2412))+(((-1.0)*cj0*r20*x2392))+(((0.27155)*r00*x2397))+(((-1.0)*r01*sj3*x2404))+(((-1.0)*cj0*x2405))+((x2395*x2406)));
evalcond[7]=((((-1.0)*px*x2402))+x2417+(((-1.0)*cj0*x2398*x2400))+(((0.07155)*r01*x2403))+((cj0*r12*x2408))+(((-1.0)*r10*x2395*x2398))+(((-1.0)*x2392*x2393)));
evalcond[8]=(x2417+(((-1.0)*py*x2410))+((r02*sj0*x2408))+(((-1.0)*cj0*r10*x2392))+(((-1.0)*sj5*x2393*x2398))+(((-1.0)*sj0*x2398*x2407))+((x2395*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2418=(cj5*sj4);
IkReal x2419=(cj4*r02);
IkReal x2420=((1.0)*cj1);
IkReal x2421=(sj4*sj5);
IkReal x2422=((1.0)*cj4*r22);
IkReal x2423=(sj1*x2421);
if( IKabs((((cj1*r21*x2418))+(((-1.0)*sj1*x2419))+((r00*x2423))+(((-1.0)*cj4*r22*x2420))+((r01*sj1*x2418))+((cj1*r20*x2421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2420*x2421))+((r20*x2423))+((r21*sj1*x2418))+((cj1*x2419))+(((-1.0)*sj1*x2422))+(((-1.0)*r01*x2418*x2420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2418))+(((-1.0)*sj1*x2419))+((r00*x2423))+(((-1.0)*cj4*r22*x2420))+((r01*sj1*x2418))+((cj1*r20*x2421))))+IKsqr(((((-1.0)*r00*x2420*x2421))+((r20*x2423))+((r21*sj1*x2418))+((cj1*x2419))+(((-1.0)*sj1*x2422))+(((-1.0)*r01*x2418*x2420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2418))+(((-1.0)*sj1*x2419))+((r00*x2423))+(((-1.0)*cj4*r22*x2420))+((r01*sj1*x2418))+((cj1*r20*x2421))), ((((-1.0)*r00*x2420*x2421))+((r20*x2423))+((r21*sj1*x2418))+((cj1*x2419))+(((-1.0)*sj1*x2422))+(((-1.0)*r01*x2418*x2420))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2424=IKcos(j2);
IkReal x2425=IKsin(j2);
IkReal x2426=(cj3*sj4);
IkReal x2427=((1.0)*cj4);
IkReal x2428=(r00*sj5);
IkReal x2429=(cj3*cj4);
IkReal x2430=(cj5*sj4);
IkReal x2431=((0.07155)*sj5);
IkReal x2432=(cj5*r20);
IkReal x2433=(cj5*r00);
IkReal x2434=(r20*sj5);
IkReal x2435=(cj1*x2424);
IkReal x2436=(sj1*x2424);
IkReal x2437=(cj1*x2425);
IkReal x2438=((1.0)*sj3*sj5);
IkReal x2439=(sj1*x2425);
IkReal x2440=((1.0)*x2439);
evalcond[0]=((((-1.0)*r02*x2427))+x2435+((r01*x2430))+((sj4*x2428))+(((-1.0)*x2440)));
evalcond[1]=((((-1.0)*x2437))+(((-1.0)*x2436))+(((-1.0)*r22*x2427))+((r21*x2430))+((sj4*x2434)));
evalcond[2]=((((0.3571)*cj1))+(((-0.27155)*x2436))+(((-0.27155)*x2437))+(((-1.0)*pz))+((r21*x2431))+(((-0.07155)*x2432)));
evalcond[3]=(((r01*x2431))+(((0.3571)*sj1))+(((-0.27155)*x2439))+(((0.27155)*x2435))+(((-1.0)*px))+(((-0.07155)*x2433)));
evalcond[4]=(x2437+x2436+((sj3*x2433))+(((-1.0)*r01*x2438))+((x2428*x2429))+((cj5*r01*x2429))+((r02*x2426)));
evalcond[5]=(((x2429*x2434))+((r22*x2426))+x2435+((sj3*x2432))+((cj5*r21*x2429))+(((-1.0)*x2440))+(((-1.0)*r21*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2441=(cj4*r02);
IkReal x2442=(cj5*sj4);
IkReal x2443=((1.0)*sj1);
IkReal x2444=(sj4*sj5);
IkReal x2445=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*r01*x2442*x2443))+((cj1*r20*x2444))+((sj1*x2441))+(((-1.0)*r00*x2443*x2444))+(((-1.0)*cj1*x2445))+((cj1*r21*x2442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x2442))+(((-1.0)*cj4*r22*x2443))+((cj1*r00*x2444))+((r21*sj1*x2442))+((r20*sj1*x2444))+(((-1.0)*cj1*x2441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2442*x2443))+((cj1*r20*x2444))+((sj1*x2441))+(((-1.0)*r00*x2443*x2444))+(((-1.0)*cj1*x2445))+((cj1*r21*x2442))))+IKsqr((((cj1*r01*x2442))+(((-1.0)*cj4*r22*x2443))+((cj1*r00*x2444))+((r21*sj1*x2442))+((r20*sj1*x2444))+(((-1.0)*cj1*x2441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2442*x2443))+((cj1*r20*x2444))+((sj1*x2441))+(((-1.0)*r00*x2443*x2444))+(((-1.0)*cj1*x2445))+((cj1*r21*x2442))), (((cj1*r01*x2442))+(((-1.0)*cj4*r22*x2443))+((cj1*r00*x2444))+((r21*sj1*x2442))+((r20*sj1*x2444))+(((-1.0)*cj1*x2441))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2446=IKcos(j2);
IkReal x2447=IKsin(j2);
IkReal x2448=(cj3*sj4);
IkReal x2449=((1.0)*cj4);
IkReal x2450=(cj5*sj4);
IkReal x2451=((0.07155)*sj5);
IkReal x2452=(cj5*r20);
IkReal x2453=(sj4*sj5);
IkReal x2454=(cj5*r00);
IkReal x2455=(cj1*x2446);
IkReal x2456=(cj3*cj4*sj5);
IkReal x2457=(sj1*x2446);
IkReal x2458=((0.27155)*x2447);
IkReal x2459=((1.0)*sj3*sj5);
IkReal x2460=(sj1*x2447);
IkReal x2461=(cj3*cj4*cj5);
IkReal x2462=((1.0)*x2457);
IkReal x2463=((1.0)*cj1*x2447);
IkReal x2464=(x2462+x2463);
evalcond[0]=(x2460+((r01*x2450))+((r00*x2453))+(((-1.0)*x2455))+(((-1.0)*r02*x2449)));
evalcond[1]=((((-1.0)*x2464))+((r20*x2453))+(((-1.0)*r22*x2449))+((r21*x2450)));
evalcond[2]=((((-0.07155)*x2452))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x2458))+((r21*x2451))+(((-0.27155)*x2457)));
evalcond[3]=((((-0.07155)*x2454))+((sj1*x2458))+((r01*x2451))+(((-1.0)*px))+(((-0.3571)*sj1))+(((-0.27155)*x2455)));
evalcond[4]=(x2455+((sj3*x2452))+((r22*x2448))+(((-1.0)*r21*x2459))+(((-1.0)*x2460))+((r21*x2461))+((r20*x2456)));
evalcond[5]=(((r01*x2461))+((r02*x2448))+((sj3*x2454))+((r00*x2456))+(((-1.0)*x2464))+(((-1.0)*r01*x2459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2465=(cj1*cj4);
IkReal x2466=((1.0)*r22);
IkReal x2467=(cj4*sj1);
IkReal x2468=(sj4*sj5);
IkReal x2469=(cj1*cj5*sj4);
IkReal x2470=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x2465*x2466))+((cj1*r20*x2468))+((r21*x2469))+((r10*sj1*x2468))+(((-1.0)*r12*x2467))+((r11*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2466*x2467))+((r21*x2470))+((r12*x2465))+((r20*sj1*x2468))+(((-1.0)*cj1*r10*x2468))+(((-1.0)*r11*x2469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2465*x2466))+((cj1*r20*x2468))+((r21*x2469))+((r10*sj1*x2468))+(((-1.0)*r12*x2467))+((r11*x2470))))+IKsqr(((((-1.0)*x2466*x2467))+((r21*x2470))+((r12*x2465))+((r20*sj1*x2468))+(((-1.0)*cj1*r10*x2468))+(((-1.0)*r11*x2469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2465*x2466))+((cj1*r20*x2468))+((r21*x2469))+((r10*sj1*x2468))+(((-1.0)*r12*x2467))+((r11*x2470))), ((((-1.0)*x2466*x2467))+((r21*x2470))+((r12*x2465))+((r20*sj1*x2468))+(((-1.0)*cj1*r10*x2468))+(((-1.0)*r11*x2469))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2471=IKcos(j2);
IkReal x2472=IKsin(j2);
IkReal x2473=((1.0)*cj4);
IkReal x2474=((0.07155)*cj5);
IkReal x2475=(cj5*sj4);
IkReal x2476=(cj3*cj4);
IkReal x2477=(r20*sj5);
IkReal x2478=(r10*sj5);
IkReal x2479=((0.07155)*sj5);
IkReal x2480=(cj5*sj3);
IkReal x2481=(cj3*sj4);
IkReal x2482=(cj1*x2471);
IkReal x2483=((1.0)*sj3*sj5);
IkReal x2484=(cj1*x2472);
IkReal x2485=(sj1*x2471);
IkReal x2486=(sj1*x2472);
IkReal x2487=((1.0)*x2486);
evalcond[0]=(x2482+(((-1.0)*r12*x2473))+((sj4*x2478))+(((-1.0)*x2487))+((r11*x2475)));
evalcond[1]=((((-1.0)*x2484))+(((-1.0)*x2485))+((sj4*x2477))+((r21*x2475))+(((-1.0)*r22*x2473)));
evalcond[2]=((((-1.0)*r20*x2474))+((r21*x2479))+(((0.3571)*cj1))+(((-0.27155)*x2485))+(((-0.27155)*x2484))+(((-1.0)*pz)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x2486))+(((-1.0)*py))+(((-1.0)*r10*x2474))+(((0.27155)*x2482))+((r11*x2479)));
evalcond[4]=(x2484+x2485+((x2476*x2478))+((r12*x2481))+(((-1.0)*r11*x2483))+((r10*x2480))+((cj5*r11*x2476)));
evalcond[5]=(x2482+((r22*x2481))+(((-1.0)*x2487))+(((-1.0)*r21*x2483))+((x2476*x2477))+((cj5*r21*x2476))+((r20*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2488=(cj4*sj1);
IkReal x2489=(cj5*sj4);
IkReal x2490=((1.0)*sj1);
IkReal x2491=(sj4*sj5);
IkReal x2492=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r10*x2490*x2491))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2490))+((cj1*r21*x2489))+((r12*x2488))+(((-1.0)*r22*x2492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2491))+((cj1*r11*x2489))+((cj1*r10*x2491))+((r21*sj1*x2489))+(((-1.0)*r12*x2492))+(((-1.0)*r22*x2488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2490*x2491))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2490))+((cj1*r21*x2489))+((r12*x2488))+(((-1.0)*r22*x2492))))+IKsqr((((r20*sj1*x2491))+((cj1*r11*x2489))+((cj1*r10*x2491))+((r21*sj1*x2489))+(((-1.0)*r12*x2492))+(((-1.0)*r22*x2488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2490*x2491))+((cj1*r20*x2491))+(((-1.0)*r11*x2489*x2490))+((cj1*r21*x2489))+((r12*x2488))+(((-1.0)*r22*x2492))), (((r20*sj1*x2491))+((cj1*r11*x2489))+((cj1*r10*x2491))+((r21*sj1*x2489))+(((-1.0)*r12*x2492))+(((-1.0)*r22*x2488))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2493=IKcos(j2);
IkReal x2494=IKsin(j2);
IkReal x2495=((1.0)*cj4);
IkReal x2496=((0.07155)*cj5);
IkReal x2497=(cj5*sj4);
IkReal x2498=(cj3*cj4);
IkReal x2499=(r20*sj5);
IkReal x2500=(r10*sj5);
IkReal x2501=((0.07155)*sj5);
IkReal x2502=(cj5*sj3);
IkReal x2503=(cj3*sj4);
IkReal x2504=(cj1*x2493);
IkReal x2505=((1.0)*sj3*sj5);
IkReal x2506=(sj1*x2493);
IkReal x2507=((0.27155)*x2494);
IkReal x2508=(sj1*x2494);
IkReal x2509=((1.0)*x2506);
IkReal x2510=((1.0)*cj1*x2494);
IkReal x2511=(x2510+x2509);
evalcond[0]=(x2508+((sj4*x2500))+((r11*x2497))+(((-1.0)*x2504))+(((-1.0)*r12*x2495)));
evalcond[1]=((((-1.0)*x2511))+((sj4*x2499))+((r21*x2497))+(((-1.0)*r22*x2495)));
evalcond[2]=((((0.3571)*cj1))+(((-1.0)*r20*x2496))+(((-1.0)*pz))+(((-0.27155)*x2506))+((r21*x2501))+(((-1.0)*cj1*x2507)));
evalcond[3]=((((-1.0)*r10*x2496))+((sj1*x2507))+(((-1.0)*py))+(((-0.3571)*sj1))+(((-0.27155)*x2504))+((r11*x2501)));
evalcond[4]=(x2504+((r22*x2503))+((cj5*r21*x2498))+(((-1.0)*x2508))+((x2498*x2499))+((r20*x2502))+(((-1.0)*r21*x2505)));
evalcond[5]=(((cj5*r11*x2498))+(((-1.0)*x2511))+((r12*x2503))+((r10*x2502))+(((-1.0)*r11*x2505))+((x2498*x2500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2512=(cj4*r12);
IkReal x2513=(cj5*sj4);
IkReal x2514=(r21*sj0);
IkReal x2515=((1.0)*cj1);
IkReal x2516=(r10*sj4*sj5);
IkReal x2517=(r20*sj0*sj4*sj5);
IkReal x2518=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal((((cj1*x2513*x2514))+(((-1.0)*sj1*x2512))+((r11*sj1*x2513))+((sj1*x2516))+((cj1*x2517))+(((-1.0)*cj4*r22*sj0*x2515)))),IkReal(((((-1.0)*sj1*x2518))+(((-1.0)*r11*x2513*x2515))+((sj1*x2513*x2514))+((sj1*x2517))+((cj1*x2512))+(((-1.0)*x2515*x2516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2519.value)))+(x2520.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2521=IKcos(j2);
IkReal x2522=IKsin(j2);
IkReal x2523=(cj5*r21);
IkReal x2524=(cj3*cj4);
IkReal x2525=(r11*sj5);
IkReal x2526=((1.0)*sj3);
IkReal x2527=((1.0)*cj4);
IkReal x2528=((0.27155)*cj0);
IkReal x2529=((0.07155)*cj5);
IkReal x2530=(cj5*sj4);
IkReal x2531=((0.07155)*sj5);
IkReal x2532=((0.27155)*sj0);
IkReal x2533=((1.0)*sj1);
IkReal x2534=(r20*sj5);
IkReal x2535=(r10*sj5);
IkReal x2536=(cj3*sj4);
IkReal x2537=(cj5*sj3);
IkReal x2538=(r00*sj5);
IkReal x2539=((0.3571)*sj1);
IkReal x2540=(cj1*x2521);
IkReal x2541=(sj0*x2522);
IkReal x2542=(sj1*x2521);
IkReal x2543=(cj0*x2522);
IkReal x2544=(cj1*x2522);
IkReal x2545=(sj1*x2522);
evalcond[0]=(((sj4*x2523))+(((-1.0)*x2544))+((sj4*x2534))+(((-1.0)*x2521*x2533))+(((-1.0)*r22*x2527)));
evalcond[1]=(((r01*x2530))+((sj4*x2538))+(((-1.0)*x2533*x2543))+(((-1.0)*r02*x2527))+((cj0*x2540)));
evalcond[2]=((((-1.0)*r12*x2527))+((sj4*x2535))+(((-1.0)*x2533*x2541))+((r11*x2530))+((sj0*x2540)));
evalcond[3]=((((0.3571)*cj1))+((r21*x2531))+(((-0.27155)*x2542))+(((-0.27155)*x2544))+(((-1.0)*r20*x2529))+(((-1.0)*pz)));
evalcond[4]=(((r01*x2531))+(((-1.0)*x2528*x2545))+((x2528*x2540))+((cj0*x2539))+(((-1.0)*px))+(((-1.0)*r00*x2529)));
evalcond[5]=((((0.07155)*x2525))+((sj0*x2539))+(((-1.0)*py))+(((-1.0)*x2532*x2545))+(((-1.0)*r10*x2529))+((x2532*x2540)));
evalcond[6]=((((-1.0)*x2522*x2533))+x2540+((r20*x2537))+((x2524*x2534))+((r22*x2536))+(((-1.0)*r21*sj5*x2526))+((x2523*x2524)));
evalcond[7]=(((cj5*r01*x2524))+((cj1*x2543))+((x2524*x2538))+(((-1.0)*r01*sj5*x2526))+((r02*x2536))+((r00*x2537))+((cj0*x2542)));
evalcond[8]=(((cj1*x2541))+((cj5*r11*x2524))+((r10*x2537))+((x2524*x2535))+(((-1.0)*x2525*x2526))+((r12*x2536))+((sj0*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2546=((1.0)*cj4);
IkReal x2547=(cj0*cj1);
IkReal x2548=(sj4*sj5);
IkReal x2549=(cj5*sj4);
IkReal x2550=((1.0)*cj1);
IkReal x2551=(cj0*sj1);
IkReal x2552=(sj1*x2549);
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal((((r00*sj1*x2548))+(((-1.0)*r22*x2546*x2547))+((r01*x2552))+(((-1.0)*r02*sj1*x2546))+((r21*x2547*x2549))+((r20*x2547*x2548)))),IkReal((((cj1*cj4*r02))+(((-1.0)*r00*x2548*x2550))+(((-1.0)*r01*x2549*x2550))+(((-1.0)*r22*x2546*x2551))+((r20*x2548*x2551))+((r21*x2549*x2551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2554.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2553.value)+(((1.5707963267949)*(x2554.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2555=IKcos(j2);
IkReal x2556=IKsin(j2);
IkReal x2557=(cj5*r21);
IkReal x2558=(cj3*cj4);
IkReal x2559=(r11*sj5);
IkReal x2560=((1.0)*sj3);
IkReal x2561=((1.0)*cj4);
IkReal x2562=((0.27155)*cj0);
IkReal x2563=((0.07155)*cj5);
IkReal x2564=(cj5*sj4);
IkReal x2565=((0.07155)*sj5);
IkReal x2566=((0.27155)*sj0);
IkReal x2567=((1.0)*sj1);
IkReal x2568=(r20*sj5);
IkReal x2569=(r10*sj5);
IkReal x2570=(cj3*sj4);
IkReal x2571=(cj5*sj3);
IkReal x2572=(r00*sj5);
IkReal x2573=((0.3571)*sj1);
IkReal x2574=(cj1*x2555);
IkReal x2575=(sj0*x2556);
IkReal x2576=(sj1*x2555);
IkReal x2577=(cj0*x2556);
IkReal x2578=(cj1*x2556);
IkReal x2579=(sj1*x2556);
evalcond[0]=(((sj4*x2557))+(((-1.0)*r22*x2561))+(((-1.0)*x2555*x2567))+(((-1.0)*x2578))+((sj4*x2568)));
evalcond[1]=(((r01*x2564))+(((-1.0)*r02*x2561))+(((-1.0)*x2567*x2577))+((cj0*x2574))+((sj4*x2572)));
evalcond[2]=((((-1.0)*x2567*x2575))+((r11*x2564))+((sj4*x2569))+((sj0*x2574))+(((-1.0)*r12*x2561)));
evalcond[3]=((((-1.0)*r20*x2563))+(((0.3571)*cj1))+(((-0.27155)*x2576))+(((-0.27155)*x2578))+(((-1.0)*pz))+((r21*x2565)));
evalcond[4]=((((-1.0)*r00*x2563))+((r01*x2565))+(((-1.0)*x2562*x2579))+(((-1.0)*px))+((x2562*x2574))+((cj0*x2573)));
evalcond[5]=((((-1.0)*x2566*x2579))+(((0.07155)*x2559))+(((-1.0)*py))+((x2566*x2574))+((sj0*x2573))+(((-1.0)*r10*x2563)));
evalcond[6]=(x2574+(((-1.0)*x2556*x2567))+((x2558*x2568))+(((-1.0)*r21*sj5*x2560))+((r20*x2571))+((x2557*x2558))+((r22*x2570)));
evalcond[7]=(((cj5*r01*x2558))+((cj1*x2577))+((x2558*x2572))+(((-1.0)*r01*sj5*x2560))+((r00*x2571))+((r02*x2570))+((cj0*x2576)));
evalcond[8]=(((r10*x2571))+((cj5*r11*x2558))+((cj1*x2575))+((x2558*x2569))+((r12*x2570))+(((-1.0)*x2559*x2560))+((sj0*x2576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2580=((0.07155)*sj0);
IkReal x2581=((0.27155)*sj0);
IkReal x2582=(sj4*sj5);
IkReal x2583=(cj5*sj4);
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(sj0,-2);
if(!x2584.valid){
continue;
}
if( IKabs(((-2.80033604032484)*(x2584.value)*(((((-1.0)*r11*x2581*x2583))+((r11*sj5*x2580))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2580))+(((-1.0)*r10*x2581*x2582))+((cj4*r12*x2581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.76043125175021)*r20*x2582))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2583))+(((-0.76043125175021)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.80033604032484)*(x2584.value)*(((((-1.0)*r11*x2581*x2583))+((r11*sj5*x2580))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2580))+(((-1.0)*r10*x2581*x2582))+((cj4*r12*x2581))))))+IKsqr(((((0.76043125175021)*r20*x2582))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2583))+(((-0.76043125175021)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.80033604032484)*(x2584.value)*(((((-1.0)*r11*x2581*x2583))+((r11*sj5*x2580))+(((-1.0)*py*sj0))+(((-1.0)*cj5*r10*x2580))+(((-1.0)*r10*x2581*x2582))+((cj4*r12*x2581))))), ((((0.76043125175021)*r20*x2582))+(((-0.200364043685242)*r21*sj5))+(((2.80033604032484)*pz))+(((0.200364043685242)*cj5*r20))+(((0.76043125175021)*r21*x2583))+(((-0.76043125175021)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2585=IKsin(j1);
IkReal x2586=IKcos(j1);
IkReal x2587=((0.07155)*cj5);
IkReal x2588=(r00*sj0);
IkReal x2589=(cj3*cj4);
IkReal x2590=(cj0*sj5);
IkReal x2591=((0.07155)*r11);
IkReal x2592=(cj5*sj3);
IkReal x2593=((0.27155)*sj4);
IkReal x2594=(cj3*r22);
IkReal x2595=(cj5*r11);
IkReal x2596=((0.27155)*r20);
IkReal x2597=((1.0)*sj0);
IkReal x2598=(sj0*sj5);
IkReal x2599=((0.27155)*sj5);
IkReal x2600=((1.0)*pz);
IkReal x2601=((0.07155)*r21);
IkReal x2602=(cj5*r01);
IkReal x2603=((0.27155)*cj4);
IkReal x2604=(cj5*r21);
IkReal x2605=((1.0)*cj0);
IkReal x2606=(sj0*x2596);
IkReal x2607=((0.3571)*x2586);
IkReal x2608=((0.07155)*r01*sj5);
IkReal x2609=((0.3571)*x2585);
IkReal x2610=((0.27155)*r21*sj3);
IkReal x2611=(cj0*x2609);
IkReal x2612=(sj0*x2611);
evalcond[0]=((((-1.0)*x2593*x2604))+(((-1.0)*r20*x2587))+(((-1.0)*x2600))+(((-1.0)*r20*sj5*x2593))+((r22*x2603))+((sj5*x2601))+x2607);
evalcond[1]=((((-1.0)*r10*x2593*x2598))+(((-1.0)*r10*sj0*x2587))+((x2591*x2598))+((x2609*(sj0*sj0)))+(((-1.0)*sj0*x2593*x2595))+(((-1.0)*py*x2597))+((r12*sj0*x2603)));
evalcond[2]=((((-1.0)*r00*x2590*x2593))+(((-1.0)*cj0*r00*x2587))+(((-1.0)*cj0*x2593*x2602))+(((0.07155)*r01*x2590))+((cj0*r02*x2603))+((cj0*x2611))+(((-1.0)*px*x2605)));
evalcond[3]=(((r10*x2587))+(((-1.0)*sj5*x2591))+py+(((-1.0)*sj0*x2609))+((x2589*x2596*x2598))+((sj0*x2593*x2594))+((x2592*x2606))+(((0.27155)*sj0*x2589*x2604))+(((-1.0)*x2598*x2610)));
evalcond[4]=(((x2589*x2590*x2596))+((r00*x2587))+(((0.27155)*cj0*x2589*x2604))+((cj0*x2593*x2594))+px+((cj0*x2592*x2596))+(((-1.0)*x2611))+(((-1.0)*x2608))+(((-1.0)*x2590*x2610)));
evalcond[5]=((((0.27155)*x2589*x2595))+((cj3*r12*x2593))+(((0.27155)*r10*x2592))+(((-1.0)*r11*sj3*x2599))+((x2598*x2601))+(((-1.0)*r20*sj0*x2587))+((sj0*x2607))+(((-1.0)*pz*x2597))+((r10*x2589*x2599)));
evalcond[6]=((((-1.0)*cj0*x2600))+((r00*x2589*x2599))+((cj3*r02*x2593))+((x2590*x2601))+(((0.27155)*x2589*x2602))+(((-1.0)*r01*sj3*x2599))+((cj0*x2607))+(((0.27155)*r00*x2592))+(((-1.0)*cj0*r20*x2587)));
evalcond[7]=(((cj0*r12*x2603))+(((0.07155)*r01*x2598))+(((-1.0)*x2587*x2588))+(((-1.0)*r10*x2590*x2593))+x2612+(((-1.0)*cj0*x2593*x2595))+(((-1.0)*px*x2597)));
evalcond[8]=((((-1.0)*cj0*r10*x2587))+((r02*sj0*x2603))+(((-1.0)*sj0*x2593*x2602))+(((-1.0)*sj5*x2588*x2593))+(((-1.0)*py*x2605))+((x2590*x2591))+x2612);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2613=(cj5*sj4);
IkReal x2614=(cj4*r02);
IkReal x2615=((1.0)*cj1);
IkReal x2616=(sj4*sj5);
IkReal x2617=((1.0)*cj4*r22);
IkReal x2618=(sj1*x2616);
if( IKabs((((r00*x2618))+(((-1.0)*sj1*x2614))+((cj1*r20*x2616))+((cj1*r21*x2613))+(((-1.0)*cj4*r22*x2615))+((r01*sj1*x2613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2615*x2616))+(((-1.0)*sj1*x2617))+((r21*sj1*x2613))+((r20*x2618))+(((-1.0)*r01*x2613*x2615))+((cj1*x2614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2618))+(((-1.0)*sj1*x2614))+((cj1*r20*x2616))+((cj1*r21*x2613))+(((-1.0)*cj4*r22*x2615))+((r01*sj1*x2613))))+IKsqr(((((-1.0)*r00*x2615*x2616))+(((-1.0)*sj1*x2617))+((r21*sj1*x2613))+((r20*x2618))+(((-1.0)*r01*x2613*x2615))+((cj1*x2614))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x2618))+(((-1.0)*sj1*x2614))+((cj1*r20*x2616))+((cj1*r21*x2613))+(((-1.0)*cj4*r22*x2615))+((r01*sj1*x2613))), ((((-1.0)*r00*x2615*x2616))+(((-1.0)*sj1*x2617))+((r21*sj1*x2613))+((r20*x2618))+(((-1.0)*r01*x2613*x2615))+((cj1*x2614))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2619=IKcos(j2);
IkReal x2620=IKsin(j2);
IkReal x2621=(cj3*sj4);
IkReal x2622=((1.0)*cj4);
IkReal x2623=(r00*sj5);
IkReal x2624=(cj3*cj4);
IkReal x2625=(cj5*sj4);
IkReal x2626=((0.07155)*sj5);
IkReal x2627=(cj5*r20);
IkReal x2628=(cj5*r00);
IkReal x2629=(r20*sj5);
IkReal x2630=(cj1*x2619);
IkReal x2631=(sj1*x2619);
IkReal x2632=(cj1*x2620);
IkReal x2633=((1.0)*sj3*sj5);
IkReal x2634=(sj1*x2620);
IkReal x2635=((1.0)*x2634);
evalcond[0]=(((r01*x2625))+(((-1.0)*x2635))+((sj4*x2623))+(((-1.0)*r02*x2622))+x2630);
evalcond[1]=((((-1.0)*r22*x2622))+((sj4*x2629))+(((-1.0)*x2632))+(((-1.0)*x2631))+((r21*x2625)));
evalcond[2]=((((-0.07155)*x2627))+(((0.3571)*cj1))+(((-0.27155)*x2632))+(((-0.27155)*x2631))+(((-1.0)*pz))+((r21*x2626)));
evalcond[3]=(((r01*x2626))+(((-0.07155)*x2628))+(((0.3571)*sj1))+(((-0.27155)*x2634))+(((-1.0)*px))+(((0.27155)*x2630)));
evalcond[4]=(((sj3*x2628))+(((-1.0)*r01*x2633))+((r02*x2621))+((cj5*r01*x2624))+((x2623*x2624))+x2631+x2632);
evalcond[5]=(((x2624*x2629))+((sj3*x2627))+(((-1.0)*r21*x2633))+(((-1.0)*x2635))+((r22*x2621))+((cj5*r21*x2624))+x2630);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2636=(cj4*r02);
IkReal x2637=(cj5*sj4);
IkReal x2638=((1.0)*sj1);
IkReal x2639=(sj4*sj5);
IkReal x2640=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x2640))+((sj1*x2636))+(((-1.0)*r01*x2637*x2638))+((cj1*r20*x2639))+((cj1*r21*x2637))+(((-1.0)*r00*x2638*x2639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2639))+(((-1.0)*cj4*r22*x2638))+(((-1.0)*cj1*x2636))+((cj1*r00*x2639))+((cj1*r01*x2637))+((r21*sj1*x2637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2640))+((sj1*x2636))+(((-1.0)*r01*x2637*x2638))+((cj1*r20*x2639))+((cj1*r21*x2637))+(((-1.0)*r00*x2638*x2639))))+IKsqr((((r20*sj1*x2639))+(((-1.0)*cj4*r22*x2638))+(((-1.0)*cj1*x2636))+((cj1*r00*x2639))+((cj1*r01*x2637))+((r21*sj1*x2637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2640))+((sj1*x2636))+(((-1.0)*r01*x2637*x2638))+((cj1*r20*x2639))+((cj1*r21*x2637))+(((-1.0)*r00*x2638*x2639))), (((r20*sj1*x2639))+(((-1.0)*cj4*r22*x2638))+(((-1.0)*cj1*x2636))+((cj1*r00*x2639))+((cj1*r01*x2637))+((r21*sj1*x2637))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2641=IKcos(j2);
IkReal x2642=IKsin(j2);
IkReal x2643=(cj3*sj4);
IkReal x2644=((1.0)*cj4);
IkReal x2645=(cj5*sj4);
IkReal x2646=((0.07155)*sj5);
IkReal x2647=(cj5*r20);
IkReal x2648=(sj4*sj5);
IkReal x2649=(cj5*r00);
IkReal x2650=(cj1*x2641);
IkReal x2651=(cj3*cj4*sj5);
IkReal x2652=(sj1*x2641);
IkReal x2653=((0.27155)*x2642);
IkReal x2654=((1.0)*sj3*sj5);
IkReal x2655=(sj1*x2642);
IkReal x2656=(cj3*cj4*cj5);
IkReal x2657=((1.0)*x2652);
IkReal x2658=((1.0)*cj1*x2642);
IkReal x2659=(x2658+x2657);
evalcond[0]=((((-1.0)*r02*x2644))+((r00*x2648))+((r01*x2645))+(((-1.0)*x2650))+x2655);
evalcond[1]=((((-1.0)*r22*x2644))+((r21*x2645))+(((-1.0)*x2659))+((r20*x2648)));
evalcond[2]=(((r21*x2646))+(((-1.0)*cj1*x2653))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-0.07155)*x2647))+(((-0.27155)*x2652)));
evalcond[3]=((((-1.0)*px))+(((-0.3571)*sj1))+((r01*x2646))+(((-0.07155)*x2649))+(((-0.27155)*x2650))+((sj1*x2653)));
evalcond[4]=(((r21*x2656))+(((-1.0)*r21*x2654))+((r22*x2643))+((sj3*x2647))+(((-1.0)*x2655))+x2650+((r20*x2651)));
evalcond[5]=((((-1.0)*r01*x2654))+((r02*x2643))+((r00*x2651))+((r01*x2656))+(((-1.0)*x2659))+((sj3*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2660=(cj1*cj4);
IkReal x2661=((1.0)*r22);
IkReal x2662=(cj4*sj1);
IkReal x2663=(sj4*sj5);
IkReal x2664=(cj1*cj5*sj4);
IkReal x2665=(cj5*sj1*sj4);
if( IKabs((((r10*sj1*x2663))+(((-1.0)*x2660*x2661))+((r21*x2664))+((cj1*r20*x2663))+((r11*x2665))+(((-1.0)*r12*x2662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r10*x2663))+((r12*x2660))+((r20*sj1*x2663))+((r21*x2665))+(((-1.0)*r11*x2664))+(((-1.0)*x2661*x2662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj1*x2663))+(((-1.0)*x2660*x2661))+((r21*x2664))+((cj1*r20*x2663))+((r11*x2665))+(((-1.0)*r12*x2662))))+IKsqr(((((-1.0)*cj1*r10*x2663))+((r12*x2660))+((r20*sj1*x2663))+((r21*x2665))+(((-1.0)*r11*x2664))+(((-1.0)*x2661*x2662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj1*x2663))+(((-1.0)*x2660*x2661))+((r21*x2664))+((cj1*r20*x2663))+((r11*x2665))+(((-1.0)*r12*x2662))), ((((-1.0)*cj1*r10*x2663))+((r12*x2660))+((r20*sj1*x2663))+((r21*x2665))+(((-1.0)*r11*x2664))+(((-1.0)*x2661*x2662))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2666=IKcos(j2);
IkReal x2667=IKsin(j2);
IkReal x2668=((1.0)*cj4);
IkReal x2669=((0.07155)*cj5);
IkReal x2670=(cj5*sj4);
IkReal x2671=(cj3*cj4);
IkReal x2672=(r20*sj5);
IkReal x2673=(r10*sj5);
IkReal x2674=((0.07155)*sj5);
IkReal x2675=(cj5*sj3);
IkReal x2676=(cj3*sj4);
IkReal x2677=(cj1*x2666);
IkReal x2678=((1.0)*sj3*sj5);
IkReal x2679=(cj1*x2667);
IkReal x2680=(sj1*x2666);
IkReal x2681=(sj1*x2667);
IkReal x2682=((1.0)*x2681);
evalcond[0]=((((-1.0)*r12*x2668))+((sj4*x2673))+(((-1.0)*x2682))+((r11*x2670))+x2677);
evalcond[1]=((((-1.0)*x2679))+((sj4*x2672))+((r21*x2670))+(((-1.0)*x2680))+(((-1.0)*r22*x2668)));
evalcond[2]=(((r21*x2674))+(((0.3571)*cj1))+(((-0.27155)*x2680))+(((-1.0)*pz))+(((-1.0)*r20*x2669))+(((-0.27155)*x2679)));
evalcond[3]=((((0.3571)*sj1))+(((-0.27155)*x2681))+(((-1.0)*py))+(((0.27155)*x2677))+((r11*x2674))+(((-1.0)*r10*x2669)));
evalcond[4]=((((-1.0)*r11*x2678))+((r12*x2676))+((cj5*r11*x2671))+((r10*x2675))+((x2671*x2673))+x2679+x2680);
evalcond[5]=(((cj5*r21*x2671))+((r22*x2676))+(((-1.0)*x2682))+((x2671*x2672))+(((-1.0)*r21*x2678))+((r20*x2675))+x2677);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2683=(cj4*sj1);
IkReal x2684=(cj5*sj4);
IkReal x2685=((1.0)*sj1);
IkReal x2686=(sj4*sj5);
IkReal x2687=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*r10*x2685*x2686))+(((-1.0)*r22*x2687))+((cj1*r21*x2684))+((r12*x2683))+((cj1*r20*x2686))+(((-1.0)*r11*x2684*x2685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x2687))+((cj1*r11*x2684))+((r21*sj1*x2684))+(((-1.0)*r22*x2683))+((r20*sj1*x2686))+((cj1*r10*x2686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2685*x2686))+(((-1.0)*r22*x2687))+((cj1*r21*x2684))+((r12*x2683))+((cj1*r20*x2686))+(((-1.0)*r11*x2684*x2685))))+IKsqr(((((-1.0)*r12*x2687))+((cj1*r11*x2684))+((r21*sj1*x2684))+(((-1.0)*r22*x2683))+((r20*sj1*x2686))+((cj1*r10*x2686))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x2685*x2686))+(((-1.0)*r22*x2687))+((cj1*r21*x2684))+((r12*x2683))+((cj1*r20*x2686))+(((-1.0)*r11*x2684*x2685))), ((((-1.0)*r12*x2687))+((cj1*r11*x2684))+((r21*sj1*x2684))+(((-1.0)*r22*x2683))+((r20*sj1*x2686))+((cj1*r10*x2686))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2688=IKcos(j2);
IkReal x2689=IKsin(j2);
IkReal x2690=((1.0)*cj4);
IkReal x2691=((0.07155)*cj5);
IkReal x2692=(cj5*sj4);
IkReal x2693=(cj3*cj4);
IkReal x2694=(r20*sj5);
IkReal x2695=(r10*sj5);
IkReal x2696=((0.07155)*sj5);
IkReal x2697=(cj5*sj3);
IkReal x2698=(cj3*sj4);
IkReal x2699=(cj1*x2688);
IkReal x2700=((1.0)*sj3*sj5);
IkReal x2701=(sj1*x2688);
IkReal x2702=((0.27155)*x2689);
IkReal x2703=(sj1*x2689);
IkReal x2704=((1.0)*x2701);
IkReal x2705=((1.0)*cj1*x2689);
IkReal x2706=(x2705+x2704);
evalcond[0]=(x2703+((sj4*x2695))+(((-1.0)*r12*x2690))+(((-1.0)*x2699))+((r11*x2692)));
evalcond[1]=(((sj4*x2694))+(((-1.0)*r22*x2690))+(((-1.0)*x2706))+((r21*x2692)));
evalcond[2]=((((-0.27155)*x2701))+(((0.3571)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x2702))+((r21*x2696))+(((-1.0)*r20*x2691)));
evalcond[3]=((((-1.0)*r10*x2691))+(((-0.27155)*x2699))+(((-1.0)*py))+(((-0.3571)*sj1))+((r11*x2696))+((sj1*x2702)));
evalcond[4]=(((r22*x2698))+((x2693*x2694))+(((-1.0)*r21*x2700))+((r20*x2697))+((cj5*r21*x2693))+(((-1.0)*x2703))+x2699);
evalcond[5]=(((cj5*r11*x2693))+((r12*x2698))+((r10*x2697))+(((-1.0)*r11*x2700))+((x2693*x2695))+(((-1.0)*x2706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2707=(cj4*r12);
IkReal x2708=(cj5*sj4);
IkReal x2709=(r21*sj0);
IkReal x2710=((1.0)*cj1);
IkReal x2711=(r10*sj4*sj5);
IkReal x2712=(r20*sj0*sj4*sj5);
IkReal x2713=((1.0)*cj4*r22*sj0);
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r22*sj0*x2710))+((sj1*x2711))+((cj1*x2708*x2709))+(((-1.0)*sj1*x2707))+((r11*sj1*x2708))+((cj1*x2712)))),IkReal((((sj1*x2712))+(((-1.0)*r11*x2708*x2710))+((sj1*x2708*x2709))+(((-1.0)*x2710*x2711))+(((-1.0)*sj1*x2713))+((cj1*x2707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2715.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2714.value)))+(x2715.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2716=IKcos(j2);
IkReal x2717=IKsin(j2);
IkReal x2718=(cj5*r21);
IkReal x2719=(cj3*cj4);
IkReal x2720=(r11*sj5);
IkReal x2721=((1.0)*sj3);
IkReal x2722=((1.0)*cj4);
IkReal x2723=((0.27155)*cj0);
IkReal x2724=((0.07155)*cj5);
IkReal x2725=(cj5*sj4);
IkReal x2726=((0.07155)*sj5);
IkReal x2727=((0.27155)*sj0);
IkReal x2728=((1.0)*sj1);
IkReal x2729=(r20*sj5);
IkReal x2730=(r10*sj5);
IkReal x2731=(cj3*sj4);
IkReal x2732=(cj5*sj3);
IkReal x2733=(r00*sj5);
IkReal x2734=((0.3571)*sj1);
IkReal x2735=(cj1*x2716);
IkReal x2736=(sj0*x2717);
IkReal x2737=(sj1*x2716);
IkReal x2738=(cj0*x2717);
IkReal x2739=(cj1*x2717);
IkReal x2740=(sj1*x2717);
evalcond[0]=((((-1.0)*x2739))+((sj4*x2729))+(((-1.0)*r22*x2722))+(((-1.0)*x2716*x2728))+((sj4*x2718)));
evalcond[1]=((((-1.0)*x2728*x2738))+((r01*x2725))+((cj0*x2735))+((sj4*x2733))+(((-1.0)*r02*x2722)));
evalcond[2]=((((-1.0)*x2728*x2736))+(((-1.0)*r12*x2722))+((r11*x2725))+((sj0*x2735))+((sj4*x2730)));
evalcond[3]=((((-0.27155)*x2739))+(((-0.27155)*x2737))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x2726))+(((-1.0)*r20*x2724)));
evalcond[4]=((((-1.0)*r00*x2724))+(((-1.0)*x2723*x2740))+(((-1.0)*px))+((r01*x2726))+((x2723*x2735))+((cj0*x2734)));
evalcond[5]=((((-1.0)*x2727*x2740))+(((-1.0)*py))+((x2727*x2735))+(((0.07155)*x2720))+((sj0*x2734))+(((-1.0)*r10*x2724)));
evalcond[6]=(x2735+((r22*x2731))+((x2718*x2719))+((x2719*x2729))+((r20*x2732))+(((-1.0)*x2717*x2728))+(((-1.0)*r21*sj5*x2721)));
evalcond[7]=(((r02*x2731))+((cj5*r01*x2719))+(((-1.0)*r01*sj5*x2721))+((cj1*x2738))+((x2719*x2733))+((r00*x2732))+((cj0*x2737)));
evalcond[8]=(((cj1*x2736))+(((-1.0)*x2720*x2721))+((x2719*x2730))+((cj5*r11*x2719))+((r12*x2731))+((sj0*x2737))+((r10*x2732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2741=((1.0)*cj4);
IkReal x2742=(cj0*cj1);
IkReal x2743=(sj4*sj5);
IkReal x2744=(cj5*sj4);
IkReal x2745=((1.0)*cj1);
IkReal x2746=(cj0*sj1);
IkReal x2747=(sj1*x2744);
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal((((r00*sj1*x2743))+(((-1.0)*r02*sj1*x2741))+((r21*x2742*x2744))+(((-1.0)*r22*x2741*x2742))+((r20*x2742*x2743))+((r01*x2747)))),IkReal(((((-1.0)*r01*x2744*x2745))+(((-1.0)*r00*x2743*x2745))+((cj1*cj4*r02))+(((-1.0)*r22*x2741*x2746))+((r21*x2744*x2746))+((r20*x2743*x2746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2750=IKcos(j2);
IkReal x2751=IKsin(j2);
IkReal x2752=(cj5*r21);
IkReal x2753=(cj3*cj4);
IkReal x2754=(r11*sj5);
IkReal x2755=((1.0)*sj3);
IkReal x2756=((1.0)*cj4);
IkReal x2757=((0.27155)*cj0);
IkReal x2758=((0.07155)*cj5);
IkReal x2759=(cj5*sj4);
IkReal x2760=((0.07155)*sj5);
IkReal x2761=((0.27155)*sj0);
IkReal x2762=((1.0)*sj1);
IkReal x2763=(r20*sj5);
IkReal x2764=(r10*sj5);
IkReal x2765=(cj3*sj4);
IkReal x2766=(cj5*sj3);
IkReal x2767=(r00*sj5);
IkReal x2768=((0.3571)*sj1);
IkReal x2769=(cj1*x2750);
IkReal x2770=(sj0*x2751);
IkReal x2771=(sj1*x2750);
IkReal x2772=(cj0*x2751);
IkReal x2773=(cj1*x2751);
IkReal x2774=(sj1*x2751);
evalcond[0]=((((-1.0)*r22*x2756))+(((-1.0)*x2773))+((sj4*x2763))+((sj4*x2752))+(((-1.0)*x2750*x2762)));
evalcond[1]=((((-1.0)*x2762*x2772))+((sj4*x2767))+((cj0*x2769))+((r01*x2759))+(((-1.0)*r02*x2756)));
evalcond[2]=(((r11*x2759))+((sj0*x2769))+(((-1.0)*x2762*x2770))+((sj4*x2764))+(((-1.0)*r12*x2756)));
evalcond[3]=((((-0.27155)*x2773))+(((-0.27155)*x2771))+(((0.3571)*cj1))+(((-1.0)*pz))+((r21*x2760))+(((-1.0)*r20*x2758)));
evalcond[4]=((((-1.0)*r00*x2758))+((x2757*x2769))+((r01*x2760))+(((-1.0)*px))+((cj0*x2768))+(((-1.0)*x2757*x2774)));
evalcond[5]=((((0.07155)*x2754))+((sj0*x2768))+((x2761*x2769))+(((-1.0)*x2761*x2774))+(((-1.0)*r10*x2758))+(((-1.0)*py)));
evalcond[6]=(((x2752*x2753))+x2769+(((-1.0)*r21*sj5*x2755))+(((-1.0)*x2751*x2762))+((r20*x2766))+((x2753*x2763))+((r22*x2765)));
evalcond[7]=(((r00*x2766))+((cj0*x2771))+((r02*x2765))+((x2753*x2767))+(((-1.0)*r01*sj5*x2755))+((cj5*r01*x2753))+((cj1*x2772)));
evalcond[8]=(((r12*x2765))+((cj5*r11*x2753))+((r10*x2766))+(((-1.0)*x2754*x2755))+((x2753*x2764))+((cj1*x2770))+((sj0*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - hdt_arm (b751e2ca108e7a69748de9a136fb78f9)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
